{
  "version": 3,
  "sources": ["../../thirdweb/src/insight/index.ts", "../../thirdweb/src/insight/get-events.ts", "../../thirdweb/src/insight/get-tokens.ts"],
  "sourcesContent": ["export { type ContractEvent, getContractEvents } from \"./get-events.js\";\nexport {\n  getContractNFTs,\n  getNFT,\n  getOwnedNFTs,\n} from \"./get-nfts.js\";\nexport { getOwnedTokens } from \"./get-tokens.js\";\nexport { getTransactions, type Transaction } from \"./get-transactions.js\";\n", "import type {\n  GetV1EventsByContractAddressData,\n  GetV1EventsByContractAddressResponse,\n} from \"@thirdweb-dev/insight\";\nimport type { AbiEvent } from \"ox/AbiEvent\";\nimport type { Chain } from \"../chains/types.js\";\nimport type { ThirdwebClient } from \"../client/client.js\";\nimport type { PreparedEvent } from \"../event/prepare-event.js\";\n\nexport type ContractEvent = NonNullable<\n  GetV1EventsByContractAddressResponse[\"data\"]\n>[number];\n\n/**\n * Get contract events\n * @example\n * ```ts\n * import { Insight } from \"thirdweb\";\n *\n * const events = await Insight.getContractEvents({\n *   client,\n *   chains: [sepolia],\n *   contractAddress: \"0x1234567890123456789012345678901234567890\",\n *   event: transferEvent(),\n *   decodeLogs: true,\n * });\n * ```\n * @insight\n */\nexport async function getContractEvents(options: {\n  client: ThirdwebClient;\n  chains: Chain[];\n  contractAddress: string;\n  event?: PreparedEvent<AbiEvent>;\n  decodeLogs?: boolean;\n  queryOptions?: Omit<\n    GetV1EventsByContractAddressData[\"query\"],\n    \"chain\" | \"decode\"\n  >;\n}): Promise<ContractEvent[]> {\n  const [\n    { getV1EventsByContractAddress },\n    { getThirdwebDomains },\n    { getClientFetch },\n    { assertInsightEnabled },\n    { stringify },\n  ] = await Promise.all([\n    import(\"@thirdweb-dev/insight\"),\n    import(\"../utils/domains.js\"),\n    import(\"../utils/fetch.js\"),\n    import(\"./common.js\"),\n    import(\"../utils/json.js\"),\n  ]);\n\n  const { client, chains, contractAddress, event, queryOptions, decodeLogs } =\n    options;\n\n  await assertInsightEnabled(chains);\n\n  const defaultQueryOptions: GetV1EventsByContractAddressData[\"query\"] = {\n    chain: chains.map((chain) => chain.id),\n    decode: decodeLogs,\n    limit: 100,\n  };\n\n  if (event) {\n    defaultQueryOptions.filter_topic_0 = event.topics[0];\n    defaultQueryOptions.filter_topic_1 = event.topics[1];\n    defaultQueryOptions.filter_topic_2 = event.topics[2];\n    defaultQueryOptions.filter_topic_3 = event.topics[3];\n  }\n\n  const result = await getV1EventsByContractAddress({\n    baseUrl: `https://${getThirdwebDomains().insight}`,\n    fetch: getClientFetch(client),\n    path: {\n      contractAddress,\n    },\n    query: {\n      ...defaultQueryOptions,\n      ...queryOptions,\n    },\n  });\n\n  if (result.error) {\n    throw new Error(\n      `${result.response.status} ${result.response.statusText} - ${result.error ? stringify(result.error) : \"Unknown error\"}`,\n    );\n  }\n\n  return result.data?.data ?? [];\n}\n", "import type {\n  GetV1TokensData,\n  GetV1TokensResponse,\n} from \"@thirdweb-dev/insight\";\nimport type { Chain } from \"../chains/types.js\";\nimport type { ThirdwebClient } from \"../client/client.js\";\nimport type { GetWalletBalanceResult } from \"../wallets/utils/getWalletBalance.js\";\n\ntype OwnedToken = GetV1TokensResponse[\"data\"][number];\n\n/**\n * Get ERC20 tokens owned by an address\n * @example\n * ```ts\n * import { Insight } from \"thirdweb\";\n *\n * const tokens = await Insight.getOwnedTokens({\n *   client,\n *   chains: [sepolia],\n *   ownerAddress: \"0x1234567890123456789012345678901234567890\",\n * });\n * ```\n * @insight\n */\nexport async function getOwnedTokens(args: {\n  client: ThirdwebClient;\n  chains: Chain[];\n  ownerAddress: string;\n  tokenAddresses?: string[];\n  queryOptions?: Omit<\n    GetV1TokensData[\"query\"],\n    \"owner_address\" | \"chain_id\" | \"chain\"\n  >;\n}): Promise<GetWalletBalanceResult[]> {\n  const [\n    { getV1Tokens },\n    { getThirdwebDomains },\n    { getClientFetch },\n    { assertInsightEnabled },\n    { stringify },\n  ] = await Promise.all([\n    import(\"@thirdweb-dev/insight\"),\n    import(\"../utils/domains.js\"),\n    import(\"../utils/fetch.js\"),\n    import(\"./common.js\"),\n    import(\"../utils/json.js\"),\n  ]);\n\n  const { client, chains, ownerAddress, tokenAddresses, queryOptions } = args;\n\n  await assertInsightEnabled(chains);\n\n  const defaultQueryOptions: GetV1TokensData[\"query\"] = {\n    chain_id: chains.length > 0 ? chains.map((chain) => chain.id) : [1],\n    include_native: \"true\",\n    include_spam: \"false\",\n    limit: 50,\n    metadata: \"true\",\n    owner_address: [ownerAddress],\n    token_address: tokenAddresses ? tokenAddresses : undefined,\n    sort_by: \"balance\",\n  };\n\n  const result = await getV1Tokens({\n    baseUrl: `https://${getThirdwebDomains().insight}`,\n    fetch: getClientFetch(client),\n    query: {\n      ...defaultQueryOptions,\n      ...queryOptions,\n    },\n  });\n\n  if (result.error) {\n    throw new Error(\n      `${result.response.status} ${result.response.statusText} - ${result.error ? stringify(result.error) : \"Unknown error\"}`,\n    );\n  }\n\n  return transformOwnedToken(result.data?.data ?? []);\n}\n\nasync function transformOwnedToken(\n  token: OwnedToken[],\n): Promise<GetWalletBalanceResult[]> {\n  const { toTokens } = await import(\"../utils/units.js\");\n  return token.map((t) => {\n    const decimals = t.decimals ?? 18;\n    const value = BigInt(t.balance);\n    return {\n      chainId: t.chain_id,\n      decimals,\n      displayValue: toTokens(value, decimals),\n      name: t.name ?? \"\",\n      symbol: t.symbol ?? \"\",\n      tokenAddress: t.token_address,\n      value,\n    };\n  });\n}\n"],
  "mappings": ";;;;;;;;;;;;;AAAA;;;;;;;;;;;AC6BA,eAAsB,kBAAkB,SAUvC;AA1BD;AA2BE,QAAM,CACJ,EAAE,6BAA4B,GAC9B,EAAE,mBAAkB,GACpB,EAAE,eAAc,GAChB,EAAE,qBAAoB,GACtB,EAAE,UAAS,CAAE,IACX,MAAM,QAAQ,IAAI;IACpB,OAAO,wBAAuB;IAC9B,OAAO,uBAAqB;IAC5B,OAAO,qBAAmB;IAC1B,OAAO,sBAAa;IACpB,OAAO,oBAAkB;GAC1B;AAED,QAAM,EAAE,QAAQ,QAAQ,iBAAiB,OAAO,cAAc,WAAU,IACtE;AAEF,QAAM,qBAAqB,MAAM;AAEjC,QAAM,sBAAiE;IACrE,OAAO,OAAO,IAAI,CAAC,UAAU,MAAM,EAAE;IACrC,QAAQ;IACR,OAAO;;AAGT,MAAI,OAAO;AACT,wBAAoB,iBAAiB,MAAM,OAAO,CAAC;AACnD,wBAAoB,iBAAiB,MAAM,OAAO,CAAC;AACnD,wBAAoB,iBAAiB,MAAM,OAAO,CAAC;AACnD,wBAAoB,iBAAiB,MAAM,OAAO,CAAC;EACrD;AAEA,QAAM,SAAS,MAAM,6BAA6B;IAChD,SAAS,WAAW,mBAAkB,EAAG,OAAO;IAChD,OAAO,eAAe,MAAM;IAC5B,MAAM;MACJ;;IAEF,OAAO;MACL,GAAG;MACH,GAAG;;GAEN;AAED,MAAI,OAAO,OAAO;AAChB,UAAM,IAAI,MACR,GAAG,OAAO,SAAS,MAAM,IAAI,OAAO,SAAS,UAAU,MAAM,OAAO,QAAQ,UAAU,OAAO,KAAK,IAAI,eAAe,EAAE;EAE3H;AAEA,WAAO,YAAO,SAAP,mBAAa,SAAQ,CAAA;AAC9B;;;ACnEA,eAAsB,eAAe,MASpC;AAvBD;AAwBE,QAAM,CACJ,EAAE,YAAW,GACb,EAAE,mBAAkB,GACpB,EAAE,eAAc,GAChB,EAAE,qBAAoB,GACtB,EAAE,UAAS,CAAE,IACX,MAAM,QAAQ,IAAI;IACpB,OAAO,wBAAuB;IAC9B,OAAO,uBAAqB;IAC5B,OAAO,qBAAmB;IAC1B,OAAO,sBAAa;IACpB,OAAO,oBAAkB;GAC1B;AAED,QAAM,EAAE,QAAQ,QAAQ,cAAc,gBAAgB,aAAY,IAAK;AAEvE,QAAM,qBAAqB,MAAM;AAEjC,QAAM,sBAAgD;IACpD,UAAU,OAAO,SAAS,IAAI,OAAO,IAAI,CAAC,UAAU,MAAM,EAAE,IAAI,CAAC,CAAC;IAClE,gBAAgB;IAChB,cAAc;IACd,OAAO;IACP,UAAU;IACV,eAAe,CAAC,YAAY;IAC5B,eAAe,iBAAiB,iBAAiB;IACjD,SAAS;;AAGX,QAAM,SAAS,MAAM,YAAY;IAC/B,SAAS,WAAW,mBAAkB,EAAG,OAAO;IAChD,OAAO,eAAe,MAAM;IAC5B,OAAO;MACL,GAAG;MACH,GAAG;;GAEN;AAED,MAAI,OAAO,OAAO;AAChB,UAAM,IAAI,MACR,GAAG,OAAO,SAAS,MAAM,IAAI,OAAO,SAAS,UAAU,MAAM,OAAO,QAAQ,UAAU,OAAO,KAAK,IAAI,eAAe,EAAE;EAE3H;AAEA,SAAO,sBAAoB,YAAO,SAAP,mBAAa,SAAQ,CAAA,CAAE;AACpD;AAEA,eAAe,oBACb,OAAmB;AAEnB,QAAM,EAAE,SAAQ,IAAK,MAAM,OAAO,qBAAmB;AACrD,SAAO,MAAM,IAAI,CAAC,MAAK;AACrB,UAAM,WAAW,EAAE,YAAY;AAC/B,UAAM,QAAQ,OAAO,EAAE,OAAO;AAC9B,WAAO;MACL,SAAS,EAAE;MACX;MACA,cAAc,SAAS,OAAO,QAAQ;MACtC,MAAM,EAAE,QAAQ;MAChB,QAAQ,EAAE,UAAU;MACpB,cAAc,EAAE;MAChB;;EAEJ,CAAC;AACH;",
  "names": []
}

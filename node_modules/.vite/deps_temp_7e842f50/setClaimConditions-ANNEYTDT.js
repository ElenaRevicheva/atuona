import {
  once
} from "./chunk-NACC2RRT.js";
import {
  prepareContractCall
} from "./chunk-LM2LT5SH.js";
import {
  detectMethod
} from "./chunk-DGWZEIL6.js";
import {
  encodeAbiParameters
} from "./chunk-MQJEOAPA.js";
import "./chunk-TUVT77YQ.js";
import "./chunk-RZCLSFDG.js";
import "./chunk-BXEIBF7B.js";
import "./chunk-L4NN5UUQ.js";
import "./chunk-A5QRUZ7S.js";
import "./chunk-6JXWMKOB.js";
import "./chunk-NCIUOEBK.js";
import "./chunk-6JZ5SMSC.js";
import "./chunk-QWRIO2XV.js";
import "./chunk-2OMZKD5Y.js";
import "./chunk-FHM7BLOT.js";
import "./chunk-67FUEQYA.js";
import "./chunk-HAADYJEF.js";
import "./chunk-A2CDDISI.js";
import "./chunk-JZ3W4FG5.js";
import "./chunk-SS3OIJZU.js";
import "./chunk-T2RSOTGF.js";
import "./chunk-2CIJO3V3.js";
import "./chunk-MW5FLPJ5.js";
import "./chunk-UG6X6BL6.js";
import "./chunk-4HC36SBT.js";
import "./chunk-HXWRQBIO.js";
import "./chunk-FLUAB4EX.js";
import "./chunk-YEW47TY7.js";
import "./chunk-E7HBP2XZ.js";
import "./chunk-G24WGTAU.js";
import "./chunk-L7Y3EIPZ.js";
import "./chunk-PPP72TBL.js";
import "./chunk-3OXDSLPJ.js";
import "./chunk-HARK4W7T.js";
import "./chunk-5JRVV4XU.js";

// node_modules/thirdweb/dist/esm/extensions/erc1155/__generated__/IDrop1155/write/setClaimConditions.js
var FN_SELECTOR = "0x183718d1";
var FN_INPUTS = [
  {
    name: "tokenId",
    type: "uint256"
  },
  {
    components: [
      {
        name: "startTimestamp",
        type: "uint256"
      },
      {
        name: "maxClaimableSupply",
        type: "uint256"
      },
      {
        name: "supplyClaimed",
        type: "uint256"
      },
      {
        name: "quantityLimitPerWallet",
        type: "uint256"
      },
      {
        name: "merkleRoot",
        type: "bytes32"
      },
      {
        name: "pricePerToken",
        type: "uint256"
      },
      {
        name: "currency",
        type: "address"
      },
      {
        name: "metadata",
        type: "string"
      }
    ],
    name: "phases",
    type: "tuple[]"
  },
  {
    name: "resetClaimEligibility",
    type: "bool"
  }
];
var FN_OUTPUTS = [];
function isSetClaimConditionsSupported(availableSelectors) {
  return detectMethod({
    availableSelectors,
    method: [FN_SELECTOR, FN_INPUTS, FN_OUTPUTS]
  });
}
function encodeSetClaimConditionsParams(options) {
  return encodeAbiParameters(FN_INPUTS, [
    options.tokenId,
    options.phases,
    options.resetClaimEligibility
  ]);
}
function encodeSetClaimConditions(options) {
  return FN_SELECTOR + encodeSetClaimConditionsParams(options).slice(2);
}
function setClaimConditions(options) {
  const asyncOptions = once(async () => {
    return "asyncParams" in options ? await options.asyncParams() : options;
  });
  return prepareContractCall({
    accessList: async () => {
      var _a;
      return (_a = (await asyncOptions()).overrides) == null ? void 0 : _a.accessList;
    },
    authorizationList: async () => {
      var _a;
      return (_a = (await asyncOptions()).overrides) == null ? void 0 : _a.authorizationList;
    },
    contract: options.contract,
    erc20Value: async () => {
      var _a;
      return (_a = (await asyncOptions()).overrides) == null ? void 0 : _a.erc20Value;
    },
    extraGas: async () => {
      var _a;
      return (_a = (await asyncOptions()).overrides) == null ? void 0 : _a.extraGas;
    },
    gas: async () => {
      var _a;
      return (_a = (await asyncOptions()).overrides) == null ? void 0 : _a.gas;
    },
    gasPrice: async () => {
      var _a;
      return (_a = (await asyncOptions()).overrides) == null ? void 0 : _a.gasPrice;
    },
    maxFeePerGas: async () => {
      var _a;
      return (_a = (await asyncOptions()).overrides) == null ? void 0 : _a.maxFeePerGas;
    },
    maxPriorityFeePerGas: async () => {
      var _a;
      return (_a = (await asyncOptions()).overrides) == null ? void 0 : _a.maxPriorityFeePerGas;
    },
    method: [FN_SELECTOR, FN_INPUTS, FN_OUTPUTS],
    nonce: async () => {
      var _a;
      return (_a = (await asyncOptions()).overrides) == null ? void 0 : _a.nonce;
    },
    params: async () => {
      const resolvedOptions = await asyncOptions();
      return [
        resolvedOptions.tokenId,
        resolvedOptions.phases,
        resolvedOptions.resetClaimEligibility
      ];
    },
    value: async () => {
      var _a;
      return (_a = (await asyncOptions()).overrides) == null ? void 0 : _a.value;
    }
  });
}
export {
  FN_SELECTOR,
  encodeSetClaimConditions,
  encodeSetClaimConditionsParams,
  isSetClaimConditionsSupported,
  setClaimConditions
};
//# sourceMappingURL=setClaimConditions-ANNEYTDT.js.map

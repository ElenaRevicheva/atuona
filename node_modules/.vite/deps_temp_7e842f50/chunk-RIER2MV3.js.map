{
  "version": 3,
  "sources": ["../../thirdweb/src/bridge/types/Errors.ts", "../../thirdweb/src/bridge/Status.ts"],
  "sourcesContent": ["import { stringify } from \"../../utils/json.js\";\n\ntype ErrorCode =\n  | \"INVALID_INPUT\"\n  | \"ROUTE_NOT_FOUND\"\n  | \"AMOUNT_TOO_LOW\"\n  | \"AMOUNT_TOO_HIGH\"\n  | \"INTERNAL_SERVER_ERROR\"\n  | \"UNKNOWN_ERROR\";\n\nexport class ApiError extends Error {\n  code: ErrorCode;\n  correlationId?: string;\n  statusCode: number;\n\n  constructor(args: {\n    code: ErrorCode;\n    message: string;\n    statusCode: number;\n    correlationId?: string;\n  }) {\n    super(args.message);\n    this.code = args.code;\n    this.correlationId = args.correlationId;\n    this.statusCode = args.statusCode;\n  }\n\n  override toString() {\n    return stringify({\n      code: this.code,\n      correlationId: this.correlationId,\n      message: this.message,\n      statusCode: this.statusCode,\n    });\n  }\n}\n", "import type { Hex as ox__Hex } from \"ox\";\nimport type { Chain } from \"../chains/types.js\";\nimport type { ThirdwebClient } from \"../client/client.js\";\nimport { getThirdwebBaseUrl } from \"../utils/domains.js\";\nimport { getClientFetch } from \"../utils/fetch.js\";\nimport { ApiError } from \"./types/Errors.js\";\nimport type { Status } from \"./types/Status.js\";\n\n/**\n * Retrieves a Universal Bridge quote for the provided sell intent. The quote will specify the expected `destinationAmount` that will be received in exchange for the specified `originAmount`, which is specified with the `sellAmountWei` option.\n *\n * The returned status will include both the origin and destination transactions and any finalized amounts for the route.\n *\n * @example\n * ```typescript\n * import { Bridge } from \"thirdweb\";\n *\n * const status = await Bridge.status({\n *   transactionHash: \"0xe199ef82a0b6215221536e18ec512813c1aa10b4f5ed0d4dfdfcd703578da56d\",\n *   chainId: 8453,\n *   client: thirdwebClient,\n * });\n * ```\n *\n * If the transaction is complete, a response might look like:\n * ```typescript\n * {\n *   status: 'COMPLETED',\n *   originAmount: 200000000000000n,\n *   destinationAmount: 188625148000000n,\n *   originChainId: 8453,\n *   destinationChainId: 2741,\n *   originTokenAddress: '0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE',\n *   destinationTokenAddress: '0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE',\n *   transactions: [\n *     {\n *       chainId: 8453,\n *       transactionHash: '0xe199ef82a0b6215221536e18ec512813c1aa10b4f5ed0d4dfdfcd703578da56d'\n *     },\n *     {\n *       chainId: 2741,\n *       transactionHash: '0xa70a82f42330f54be95a542e1fcfe6ed2dd9f07fb8c82ae67afb4342319f7433'\n *     }\n *   ],\n *   purchaseData: {\n *     foo: \"bar\"\n *   }\n * }\n * ```\n *\n * If the origin transaction hasn't been mined yet, a response might look like:\n * ```typescript\n * {\n *   status: \"NOT_FOUND\",\n * }\n * ```\n * This is to allow you to poll for the status without catching an error. Be sure your transaction hash and chain are correct though, as this could also represent a legitimate 404 if the transaction doesn't exist.\n *\n * If the transaction is still pending, a response might look like:\n * ```typescript\n * {\n *   status: \"PENDING\",\n *   originAmount: 1000000000000000000n,\n *   originChainId: 466,\n *   destinationChainId: 1,\n *   originTokenAddress: \"0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE\",\n *   destinationTokenAddress: \"0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE\",\n *   transactions: [\n *     {\n *       transactionHash: \"0xe199ef82a0b6215221536e18ec512813c1aa10b4f5ed0d4dfdfcd703578da56d\",\n *       chainId: 466,\n *     }\n *   ]\n * }\n * ```\n *\n * If the transaction failed, a response might look like:\n * ```typescript\n * {\n *   status: \"FAILED\",\n *   transactions: [\n *     {\n *       transactionHash: \"0xe199ef82a0b6215221536e18ec512813c1aa10b4f5ed0d4dfdfcd703578da56d\",\n *       chainId: 466,\n *     }\n *   ]\n * }\n * ```\n *\n * This status is for a **single origin transaction only**. If your route involves multiple transactions, you'll need to get the status for each of them individually.\n *\n * If sending multiple dependent sequential transactions, wait until `status` returns `COMPLETED` before sending the next transaction.\n *\n * You can access this function's input and output types with `status.Options` and `status.Result`, respectively.\n *\n * @param options - The options for the quote.\n * @param options.transactionHash - The hash of the origin transaction to get the bridge status for.\n * @param options.chainId - The chain ID of the origin token.\n * @param options.transactionId - The transaction ID received from the `prepare` request.\n * @param options.client - Your thirdweb client.\n *\n * @returns A promise that resolves to a status object for the transaction.\n *\n * @throws Will throw an error if there is an issue fetching the status.\n * @bridge\n * @beta\n */\nexport async function status(options: status.Options): Promise<status.Result> {\n  const { transactionHash, client, transactionId } = options;\n  const chainId = \"chainId\" in options ? options.chainId : options.chain.id;\n\n  const clientFetch = getClientFetch(client);\n  const url = new URL(`${getThirdwebBaseUrl(\"bridge\")}/v1/status`);\n  url.searchParams.set(\"transactionHash\", transactionHash);\n  url.searchParams.set(\"chainId\", chainId.toString());\n  if (transactionId) {\n    url.searchParams.set(\"transactionId\", transactionId);\n  }\n\n  const response = await clientFetch(url.toString());\n  if (!response.ok) {\n    const errorJson = await response.json();\n    throw new ApiError({\n      code: errorJson.code || \"UNKNOWN_ERROR\",\n      correlationId: errorJson.correlationId || undefined,\n      message: errorJson.message || response.statusText,\n      statusCode: response.status,\n    });\n  }\n\n  const { data }: { data: Status } = await response.json();\n  if (data.status === \"FAILED\") {\n    return {\n      paymentId: data.paymentId,\n      status: \"FAILED\",\n      transactions: data.transactions,\n    };\n  }\n\n  if (data.status === \"PENDING\") {\n    return {\n      destinationChainId: data.destinationChainId,\n      destinationToken: data.destinationToken,\n      destinationTokenAddress: data.destinationTokenAddress,\n      originAmount: BigInt(data.originAmount),\n      originChainId: data.originChainId,\n      originToken: data.originToken,\n      originTokenAddress: data.originTokenAddress,\n      paymentId: data.paymentId,\n      purchaseData: data.purchaseData,\n      receiver: data.receiver,\n      sender: data.sender,\n      status: \"PENDING\",\n      transactions: data.transactions,\n    };\n  }\n\n  if (data.status === \"NOT_FOUND\") {\n    return {\n      paymentId: data.paymentId,\n      status: \"NOT_FOUND\",\n      transactions: [],\n    };\n  }\n\n  return {\n    destinationAmount: BigInt(data.destinationAmount),\n    destinationChainId: data.destinationChainId,\n    destinationToken: data.destinationToken,\n    destinationTokenAddress: data.destinationTokenAddress,\n    originAmount: BigInt(data.originAmount),\n    originChainId: data.originChainId,\n    originToken: data.originToken,\n    originTokenAddress: data.originTokenAddress,\n    paymentId: data.paymentId,\n    purchaseData: data.purchaseData,\n    receiver: data.receiver,\n    sender: data.sender,\n    status: \"COMPLETED\",\n    transactions: data.transactions,\n  };\n}\n\n/**\n * Namespace containing types for the status function.\n * @namespace status\n * @bridge\n */\nexport declare namespace status {\n  /**\n   * Options for checking transaction status.\n   * Can specify either chainId or chain object.\n   * @interface Options\n   * @bridge\n   */\n  type Options =\n    | {\n        /** The transaction hash to check status for */\n        transactionHash: ox__Hex.Hex;\n        /** The chain ID where the transaction occurred */\n        chainId: number;\n        /** The transaction ID received from the `prepare` request */\n        transactionId?: string;\n        /** Your thirdweb client */\n        client: ThirdwebClient;\n      }\n    | {\n        /** The transaction hash to check status for */\n        transactionHash: ox__Hex.Hex;\n        /** The chain object where the transaction occurred */\n        chain: Chain;\n        /** The transaction ID received from the `prepare` request */\n        transactionId?: string;\n        /** Your thirdweb client */\n        client: ThirdwebClient;\n      };\n\n  /**\n   * Result returned from checking transaction status.\n   * Contains the current status and transaction details.\n   * @interface Result\n   * @bridge\n   */\n  type Result = Status;\n}\n"],
  "mappings": ";;;;;;;;;;;AAUM,IAAO,WAAP,cAAwB,MAAK;EAKjC,YAAY,MAKX;AACC,UAAM,KAAK,OAAO;AAVpB,WAAA,eAAA,MAAA,QAAA;;;;;;AACA,WAAA,eAAA,MAAA,iBAAA;;;;;;AACA,WAAA,eAAA,MAAA,cAAA;;;;;;AASE,SAAK,OAAO,KAAK;AACjB,SAAK,gBAAgB,KAAK;AAC1B,SAAK,aAAa,KAAK;EACzB;EAES,WAAQ;AACf,WAAO,UAAU;MACf,MAAM,KAAK;MACX,eAAe,KAAK;MACpB,SAAS,KAAK;MACd,YAAY,KAAK;KAClB;EACH;;;;ACyEF,eAAsB,OAAO,SAAuB;AAClD,QAAM,EAAE,iBAAiB,QAAQ,cAAa,IAAK;AACnD,QAAM,UAAU,aAAa,UAAU,QAAQ,UAAU,QAAQ,MAAM;AAEvE,QAAM,cAAc,eAAe,MAAM;AACzC,QAAM,MAAM,IAAI,IAAI,GAAG,mBAAmB,QAAQ,CAAC,YAAY;AAC/D,MAAI,aAAa,IAAI,mBAAmB,eAAe;AACvD,MAAI,aAAa,IAAI,WAAW,QAAQ,SAAQ,CAAE;AAClD,MAAI,eAAe;AACjB,QAAI,aAAa,IAAI,iBAAiB,aAAa;EACrD;AAEA,QAAM,WAAW,MAAM,YAAY,IAAI,SAAQ,CAAE;AACjD,MAAI,CAAC,SAAS,IAAI;AAChB,UAAM,YAAY,MAAM,SAAS,KAAI;AACrC,UAAM,IAAI,SAAS;MACjB,MAAM,UAAU,QAAQ;MACxB,eAAe,UAAU,iBAAiB;MAC1C,SAAS,UAAU,WAAW,SAAS;MACvC,YAAY,SAAS;KACtB;EACH;AAEA,QAAM,EAAE,KAAI,IAAuB,MAAM,SAAS,KAAI;AACtD,MAAI,KAAK,WAAW,UAAU;AAC5B,WAAO;MACL,WAAW,KAAK;MAChB,QAAQ;MACR,cAAc,KAAK;;EAEvB;AAEA,MAAI,KAAK,WAAW,WAAW;AAC7B,WAAO;MACL,oBAAoB,KAAK;MACzB,kBAAkB,KAAK;MACvB,yBAAyB,KAAK;MAC9B,cAAc,OAAO,KAAK,YAAY;MACtC,eAAe,KAAK;MACpB,aAAa,KAAK;MAClB,oBAAoB,KAAK;MACzB,WAAW,KAAK;MAChB,cAAc,KAAK;MACnB,UAAU,KAAK;MACf,QAAQ,KAAK;MACb,QAAQ;MACR,cAAc,KAAK;;EAEvB;AAEA,MAAI,KAAK,WAAW,aAAa;AAC/B,WAAO;MACL,WAAW,KAAK;MAChB,QAAQ;MACR,cAAc,CAAA;;EAElB;AAEA,SAAO;IACL,mBAAmB,OAAO,KAAK,iBAAiB;IAChD,oBAAoB,KAAK;IACzB,kBAAkB,KAAK;IACvB,yBAAyB,KAAK;IAC9B,cAAc,OAAO,KAAK,YAAY;IACtC,eAAe,KAAK;IACpB,aAAa,KAAK;IAClB,oBAAoB,KAAK;IACzB,WAAW,KAAK;IAChB,cAAc,KAAK;IACnB,UAAU,KAAK;IACf,QAAQ,KAAK;IACb,QAAQ;IACR,cAAc,KAAK;;AAEvB;",
  "names": []
}

// node_modules/thirdweb/dist/esm/utils/ipfs.js
var DEFAULT_GATEWAY = "https://{clientId}.ipfscdn.io/ipfs/{cid}";
function resolveScheme(options) {
  var _a, _b;
  if (options.uri.startsWith("ipfs://")) {
    const gateway = ((_b = (_a = options.client.config) == null ? void 0 : _a.storage) == null ? void 0 : _b.gatewayUrl) ?? DEFAULT_GATEWAY;
    const clientId = options.client.clientId;
    const cid = findIPFSCidFromUri(options.uri);
    let bundleId;
    if (typeof globalThis !== "undefined" && "Application" in globalThis) {
      bundleId = globalThis.Application.applicationId;
    }
    return `${gateway.replace("{clientId}", clientId).split("/ipfs")[0]}/ipfs/${cid}${bundleId ? `?bundleId=${bundleId}` : ""}`;
  }
  if (options.uri.startsWith("http")) {
    return options.uri;
  }
  throw new Error(`Invalid URI scheme, expected "ipfs://" or "http(s)://"`);
}
function findIPFSCidFromUri(uri) {
  if (!uri.startsWith("ipfs://")) {
    return uri;
  }
  const firstIndex = uri.search(/\/(Qm|baf)/i);
  return uri.slice(firstIndex + 1);
}
async function uploadOrExtractURIs(files, client, startNumber) {
  if (isUriList(files)) {
    return files;
  }
  if (isMetadataList(files)) {
    const { upload } = await import("./upload-L7WUMND4.js");
    const uris = await upload({
      client,
      files,
      rewriteFileNames: {
        fileStartNumber: startNumber || 0
      }
    });
    return Array.isArray(uris) ? uris : [uris];
  }
  throw new Error("Files must all be of the same type (all URI or all FileOrBufferOrString)");
}
function getBaseUriFromBatch(uris) {
  uris = Array.isArray(uris) ? uris : [uris];
  const [base, ...rest] = uris.map((uri) => {
    [uri] = uri.split("?");
    [uri] = uri.split("#");
    if (uri.endsWith("/")) {
      uri = uri.slice(0, -1);
    }
    return `${uri.split("/").slice(0, -1).join("/")}/`;
  });
  if (!base) {
    throw new Error("Batch of URIs is empty");
  }
  if (rest.some((uri) => uri !== base)) {
    throw new Error("All URIs in the batch must have the same base URI");
  }
  return base;
}
function isUriList(metadatas) {
  return metadatas.every((m) => typeof m === "string");
}
function isMetadataList(metadatas) {
  return metadatas.every((m) => typeof m !== "string");
}

export {
  resolveScheme,
  findIPFSCidFromUri,
  uploadOrExtractURIs,
  getBaseUriFromBatch
};
//# sourceMappingURL=chunk-MW5FLPJ5.js.map

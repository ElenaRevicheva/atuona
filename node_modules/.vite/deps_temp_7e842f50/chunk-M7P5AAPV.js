import {
  serializeTransaction
} from "./chunk-CGG4YRSE.js";
import {
  sign
} from "./chunk-OL7MBKU7.js";
import {
  keccak256
} from "./chunk-RLLA7YOA.js";
import {
  getClientFetch
} from "./chunk-L7Y3EIPZ.js";
import {
  getThirdwebBaseUrl
} from "./chunk-HARK4W7T.js";

// node_modules/thirdweb/dist/esm/wallets/in-app/core/users/getUser.js
async function getUser({ client, walletAddress, email, phone, id, externalWalletAddress, ecosystem }) {
  if (!client.secretKey) {
    throw new Error("A secret key is required to query for users. If you're making this request from the server, please add a secret key to your client.");
  }
  const url = new URL(`${getThirdwebBaseUrl("inAppWallet")}/api/2023-11-30/embedded-wallet/user-details`);
  if (walletAddress) {
    url.searchParams.set("queryBy", "walletAddress");
    url.searchParams.set("walletAddress", walletAddress);
  } else if (email) {
    url.searchParams.set("queryBy", "email");
    url.searchParams.set("email", email);
  } else if (phone) {
    url.searchParams.set("queryBy", "phone");
    url.searchParams.set("phone", phone);
  } else if (id) {
    url.searchParams.set("queryBy", "id");
    url.searchParams.set("id", id);
  } else if (externalWalletAddress) {
    url.searchParams.set("queryBy", "externalWalletAddress");
    url.searchParams.set("externalWalletAddress", externalWalletAddress);
  } else {
    throw new Error("Please provide a walletAddress, email, phone, id, or externalWalletAddress to query for users.");
  }
  const clientFetch = getClientFetch(client, ecosystem);
  const res = await clientFetch(url.toString());
  if (!res.ok) {
    const error = await res.text().catch(() => "Unknown error");
    throw new Error(`Failed to get profiles. ${res.status} ${res.statusText}: ${error}`);
  }
  const data = await res.json();
  return data.map((item) => ({
    createdAt: item.createdAt,
    email: item.email,
    phone: item.phone,
    profiles: item.linkedAccounts.map((profile) => {
      return {
        details: profile.details,
        type: profile.type === "siwe" ? "wallet" : profile.type
      };
    }),
    smartAccountAddress: item.smartAccountAddress,
    userId: item.userId,
    walletAddress: item.walletAddress
  }))[0] || null;
}

// node_modules/thirdweb/dist/esm/transaction/actions/sign-transaction.js
function signTransaction({ transaction, privateKey }) {
  const serializedTransaction = serializeTransaction({ transaction });
  const signature = sign({
    payload: keccak256(serializedTransaction),
    privateKey
  });
  return serializeTransaction({
    transaction: { ...transaction, ...signature }
  });
}

export {
  getUser,
  signTransaction
};
//# sourceMappingURL=chunk-M7P5AAPV.js.map

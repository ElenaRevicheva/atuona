{
  "version": 3,
  "sources": ["../../thirdweb/src/wallets/constants.ts", "../../thirdweb/src/wallets/eip5792/get-calls-status.ts", "../../thirdweb/src/wallets/eip5792/get-capabilities.ts", "../../thirdweb/src/wallets/eip5792/send-calls.ts", "../../thirdweb/src/wallets/utils/chains.ts", "../../thirdweb/src/wallets/coinbase/coinbase-web.ts"],
  "sourcesContent": ["// Constants for most common wallets\nexport const COINBASE = \"com.coinbase.wallet\";\nexport const METAMASK = \"io.metamask\";\nexport const RAINBOW = \"me.rainbow\";\nexport const ZERION = \"io.zerion.wallet\";\n", "import type { ThirdwebClient } from \"../../client/client.js\";\nimport { hexToBigInt, hexToNumber } from \"../../utils/encoding/hex.js\";\nimport type { Wallet } from \"../interfaces/wallet.js\";\nimport type {\n  GetCallsStatusRawResponse,\n  GetCallsStatusResponse,\n  WalletSendCallsId,\n} from \"./types.js\";\n\nexport type GetCallsStatusOptions = {\n  wallet: Wallet;\n  client: ThirdwebClient;\n  id: WalletSendCallsId;\n};\n\n/**\n * Get the status of an [EIP-5792](https://eips.ethereum.org/EIPS/eip-5792) bundle.\n *\n *  This function is dependent on the wallet's support for EIP-5792 and could fail.\n *\n * @param {GetCallsStatusOptions} options\n * @param {Wallet} options.wallet - The wallet that send the original calls.\n * @param {ThirdwebClient} options.client - A {@link ThirdwebClient} instance.\n * @param {WalletSendCallsId} options.bundleId - The ID of the bundle to get the status of.\n * @throws an error if the wallet does not support EIP-5792.\n * @returns {Promise<GetCallsStatusResponse>} - A promise that resolves to the bundle's status and receipts (if available). {@link GetCallsStatusResponse}\n * @beta\n * @example\n * ```ts\n *  import { createThirdwebClient } from \"thirdweb\";\n *  import { sendCalls, getCallsStatus } from \"thirdweb/wallets/eip5792\";\n *\n *  const client = createThirdwebClient({ clientId: ... });\n *\n *  const result = await sendCalls({ wallet, client, calls });\n *\n *  let result;\n *  while (result.status !== \"success\") {\n *    result = await getCallsStatus(result);\n *  }\n * ```\n * @extension EIP5792\n */\nexport async function getCallsStatus({\n  wallet,\n  client,\n  id,\n}: GetCallsStatusOptions): Promise<GetCallsStatusResponse> {\n  const account = wallet.getAccount();\n  if (!account) {\n    throw new Error(\n      `Failed to get call status, no account found for wallet ${wallet.id}`,\n    );\n  }\n\n  const chain = wallet.getChain();\n  if (!chain) {\n    throw new Error(\n      `Failed to get call status, no chain found for wallet ${wallet.id}`,\n    );\n  }\n\n  if (account.getCallsStatus) {\n    return account.getCallsStatus({ id, chain, client });\n  }\n\n  throw new Error(\n    `Failed to get call status, wallet ${wallet.id} does not support EIP-5792`,\n  );\n}\n\nconst receiptStatuses = {\n  \"0x0\": \"reverted\",\n  \"0x1\": \"success\",\n} as const;\n\nexport function toGetCallsStatusResponse(\n  response: GetCallsStatusRawResponse,\n): GetCallsStatusResponse {\n  const [status, statusCode] = (() => {\n    const statusCode = response.status;\n    if (statusCode >= 100 && statusCode < 200)\n      return [\"pending\", statusCode] as const;\n    if (statusCode >= 200 && statusCode < 300)\n      return [\"success\", statusCode] as const;\n    if (statusCode >= 300 && statusCode < 700)\n      return [\"failure\", statusCode] as const;\n    // @ts-expect-error: for backwards compatibility\n    if (statusCode === \"CONFIRMED\") return [\"success\", 200] as const;\n    // @ts-expect-error: for backwards compatibility\n    if (statusCode === \"PENDING\") return [\"pending\", 100] as const;\n    return [undefined, statusCode];\n  })();\n  return {\n    ...response,\n    atomic: response.atomic,\n    // @ts-expect-error: for backwards compatibility\n    chainId: response.chainId ? hexToNumber(response.chainId) : undefined,\n    receipts:\n      response.receipts?.map((receipt) => ({\n        ...receipt,\n        blockNumber: hexToBigInt(receipt.blockNumber),\n        gasUsed: hexToBigInt(receipt.gasUsed),\n        status: receiptStatuses[receipt.status as \"0x0\" | \"0x1\"],\n      })) ?? [],\n    status,\n    statusCode,\n    version: response.version,\n  };\n}\n", "import type { Prettify } from \"../../utils/type-utils.js\";\nimport type { Wallet } from \"../interfaces/wallet.js\";\nimport type { WalletId } from \"../wallet-types.js\";\nimport type { WalletCapabilities, WalletCapabilitiesRecord } from \"./types.js\";\n\nexport type GetCapabilitiesOptions<ID extends WalletId = WalletId> = {\n  wallet: Wallet<ID>;\n  chainId?: number;\n};\n\nexport type GetCapabilitiesResult = Prettify<\n  WalletCapabilitiesRecord<WalletCapabilities, number>\n>;\n\n/**\n * Get the capabilities of a wallet based on the [EIP-5792](https://eips.ethereum.org/EIPS/eip-5792) specification.\n *\n *  This function is dependent on the wallet's support for EIP-5792, but will not throw.\n * **The returned object contains a `message` field detailing any issues with the wallet's support for EIP-5792.**\n *\n * @param {GetCapabilitiesOptions} options\n * @param {Wallet} options.wallet - The wallet to get the capabilities of.\n * @returns {Promise<GetCapabilitiesResult>} - A promise that resolves to the capabilities of the wallet based on the [EIP-5792](https://eips.ethereum.org/EIPS/eip-5792) spec.\n * @beta\n * @example\n * ```ts\n * import { getCapabilities } from \"thirdweb/wallets/eip5792\";\n *\n * const wallet = createWallet(\"com.coinbase.wallet\");\n * const capabilities = await getCapabilities({ wallet });\n * ```\n *\n * @extension EIP5792\n */\nexport async function getCapabilities<const ID extends WalletId = WalletId>({\n  wallet,\n  chainId,\n}: GetCapabilitiesOptions<ID>): Promise<GetCapabilitiesResult> {\n  const account = wallet.getAccount();\n  if (!account) {\n    return {\n      message: `Can't get capabilities, no account connected for wallet: ${wallet.id}`,\n    };\n  }\n\n  if (account.getCapabilities) {\n    return account.getCapabilities({ chainId });\n  }\n\n  throw new Error(\n    `Failed to get capabilities, wallet ${wallet.id} does not support EIP-5792`,\n  );\n}\n\nexport function toGetCapabilitiesResult(\n  result: Record<string, WalletCapabilities>,\n  chainId?: number,\n): GetCapabilitiesResult {\n  const capabilities = {} as WalletCapabilitiesRecord<\n    WalletCapabilities,\n    number\n  >;\n  for (const [chainId, capabilities_] of Object.entries(result)) {\n    capabilities[Number(chainId)] = {};\n    const capabilitiesCopy = {} as WalletCapabilities;\n    for (const [key, value] of Object.entries(capabilities_)) {\n      capabilitiesCopy[key] = value;\n    }\n    capabilities[Number(chainId)] = capabilitiesCopy;\n  }\n  return (\n    typeof chainId === \"number\" ? capabilities[chainId] : capabilities\n  ) as never;\n}\n", "import type { Abi, AbiFunction } from \"abitype\";\nimport type { WalletSendCallsParameters as ViemWalletSendCallsParameters } from \"viem\";\nimport type { Chain } from \"../../chains/types.js\";\nimport type { ThirdwebClient } from \"../../client/client.js\";\nimport { encode } from \"../../transaction/actions/encode.js\";\nimport type { PreparedTransaction } from \"../../transaction/prepare-transaction.js\";\nimport { getAddress } from \"../../utils/address.js\";\nimport { type Hex, numberToHex } from \"../../utils/encoding/hex.js\";\nimport {\n  type PromisedObject,\n  resolvePromisedValue,\n} from \"../../utils/promise/resolve-promised-value.js\";\nimport type { OneOf, Prettify } from \"../../utils/type-utils.js\";\nimport type { Account, Wallet } from \"../interfaces/wallet.js\";\nimport type { WalletId } from \"../wallet-types.js\";\nimport type {\n  EIP5792Call,\n  WalletSendCallsId,\n  WalletSendCallsParameters,\n} from \"./types.js\";\n\ntype WalletCall = OneOf<{\n  to?: string | undefined; // TODO: Make this required but compatible with StaticPrepareTransactionOptions to prevent runtime error\n  data?: Hex | undefined;\n  value?: bigint | undefined;\n}>;\n\nexport type PreparedSendCall<\n  abi extends Abi = [],\n  abiFunction extends AbiFunction = AbiFunction,\n> = PreparedTransaction<abi, abiFunction, PrepareCallOptions>;\n\nexport type PrepareCallOptions = {\n  chain: Chain;\n  client: ThirdwebClient;\n} & PromisedObject<WalletCall>;\n\nexport type SendCallsOptions<\n  ID extends WalletId = WalletId,\n  abi extends Abi = [],\n  abiFunction extends AbiFunction = AbiFunction,\n> = Prettify<{\n  wallet: Wallet<ID>;\n  calls: PreparedSendCall<abi, abiFunction>[];\n  capabilities?: WalletSendCallsParameters[number][\"capabilities\"];\n  version?: WalletSendCallsParameters[number][\"version\"];\n  chain?: Chain;\n  atomicRequired?: boolean;\n}>;\n\nexport type SendCallsResult = Prettify<{\n  id: WalletSendCallsId;\n  client: ThirdwebClient;\n  chain: Chain;\n  wallet: Wallet;\n}>;\n\n/**\n * Send [EIP-5792](https://eips.ethereum.org/EIPS/eip-5792) calls to a wallet.\n * This function works with all Thirdweb wallets (in-app and smart) and certain injected wallets that already support EIP-5792.\n * Transactions will be bundled and sponsored when those capabilities are supported, otherwise they will be sent as individual transactions.\n *\n *  This function is dependent on the wallet's support for EIP-5792 and could fail.\n *\n * @param {SendCallsOptions} options\n * @param {Wallet} options.wallet - The wallet to send the calls to.\n * @param {PreparedSendCall[]} options.calls - An array of prepared transactions to send.\n * @param {WalletSendCallsParameters[number][\"capabilities\"]} [options.capabilities] - Capabilities objects to use, see the [EIP-5792 spec](https://eips.ethereum.org/EIPS/eip-5792) for details.\n * @param {string} [options.version=\"1.0\"] - The `wallet_sendCalls` version to use, defaults to \"1.0\".\n * @param {Chain} [options.chain] - A {@link Chain} instance to override the wallet's current chain.\n * @throws an error if the wallet does not support EIP-5792.\n * @returns The ID of the bundle of the calls.\n *\n * @see getCallsStatus for how to retrieve the status of the bundle.\n * @see getCapabilities for how to retrieve the capabilities of the wallet.\n * @beta\n * @example\n * ```ts\n * import { createThirdwebClient } from \"thirdweb\";\n * import { sendCalls } from \"thirdweb/wallets/eip5792\";\n *\n * const client = createThirdwebClient({ clientId: ... });\n * const wallet = createWallet(\"com.coinbase.wallet\");\n * await wallet.connect({ client });\n *\n * const sendTx1 = approve({\n      contract: USDT_CONTRACT,\n      amount: 100,\n      spender: \"0x33d9B8BEfE81027E2C859EDc84F5636cbb202Ed6\",\n    });\n * const sendTx2 = approve({\n      contract: USDT_CONTRACT,\n      amount: 100,\n      spender: \"0x2a4f24F935Eb178e3e7BA9B53A5Ee6d8407C0709\",\n    });\n * const bundleId = await sendCalls({\n *   wallet,\n *   client,\n *   calls: [sendTx1, sendTx2],\n * });\n * ```\n * Sponsor transactions with a paymaster:\n * ```ts\n * const bundleId = await sendCalls({\n *   wallet,\n *   client,\n *   calls: [send1, send2],\n *   capabilities: {\n *     paymasterService: {\n *       url: `https://${CHAIN.id}.bundler.thirdweb.com/${client.clientId}`\n *     }\n *   }\n * });\n * ```\n * We recommend proxying any paymaster calls via an API route you setup and control.\n * \n * @extension EIP5792\n */\nexport async function sendCalls<const ID extends WalletId>(\n  options: SendCallsOptions<ID>,\n): Promise<SendCallsResult> {\n  const { wallet, chain } = options;\n\n  const account = wallet.getAccount();\n  if (!account) {\n    throw new Error(\n      `Cannot send calls, no account connected for wallet: ${wallet.id}`,\n    );\n  }\n\n  const firstCall = options.calls[0];\n  if (!firstCall) {\n    throw new Error(\"No calls to send\");\n  }\n\n  const callChain = firstCall.chain || chain;\n\n  if (wallet.getChain()?.id !== callChain.id) {\n    await wallet.switchChain(callChain);\n  }\n\n  // check internal implementations\n  if (account.sendCalls) {\n    const { wallet: _, ...optionsWithoutWallet } = options;\n    const result = await account.sendCalls(optionsWithoutWallet);\n    return {\n      ...result,\n      wallet,\n    };\n  }\n\n  throw new Error(\n    `Cannot send calls, wallet ${wallet.id} does not support EIP-5792`,\n  );\n}\n\nexport async function toProviderCallParams(\n  options: Omit<SendCallsOptions, \"wallet\">,\n  account: Account,\n): Promise<{ callParams: ViemWalletSendCallsParameters; chain: Chain }> {\n  const firstCall = options.calls[0];\n  if (!firstCall) {\n    throw new Error(\"No calls to send\");\n  }\n\n  const {\n    calls,\n    capabilities,\n    version = \"2.0.0\",\n    chain = firstCall.chain,\n  } = options;\n\n  const preparedCalls: EIP5792Call[] = await Promise.all(\n    calls.map(async (call) => {\n      const { to, value } = call;\n      if (to === undefined && call.data === undefined) {\n        throw new Error(\"Cannot send call, `to` or `data` must be provided.\");\n      }\n\n      const [_to, _data, _value] = await Promise.all([\n        resolvePromisedValue(to),\n        encode(call),\n        resolvePromisedValue(value),\n      ]);\n\n      if (_to) {\n        return {\n          data: _data as Hex,\n          to: getAddress(_to),\n          value:\n            typeof _value === \"bigint\" || typeof _value === \"number\"\n              ? numberToHex(_value)\n              : undefined,\n        };\n      }\n\n      return {\n        data: _data as Hex,\n        to: undefined,\n        value: undefined,\n      };\n    }),\n  );\n\n  const injectedWalletCallParams: ViemWalletSendCallsParameters = [\n    {\n      // see: https://eips.ethereum.org/EIPS/eip-5792#wallet_sendcalls\n      atomicRequired: options.atomicRequired ?? false,\n      calls: preparedCalls,\n      capabilities,\n      chainId: numberToHex(chain.id),\n      from: getAddress(account.address),\n      version,\n    },\n  ];\n\n  return { callParams: injectedWalletCallParams, chain };\n}\n", "import type { ChainMetadata } from \"../../chains/types.js\";\n\n// TODO - move this to chains subfolder\n\n/**\n * Remove client id from RPC url for given chain\n * @internal\n */\nexport function getValidPublicRPCUrl(chain: ChainMetadata) {\n  return getValidChainRPCs(chain).map((rpc) => {\n    try {\n      const url = new URL(rpc);\n      // remove client id from url\n      if (url.hostname.endsWith(\".thirdweb.com\")) {\n        url.pathname = \"\";\n        url.search = \"\";\n      }\n      return url.toString();\n    } catch {\n      return rpc;\n    }\n  });\n}\n\n// TODO - move this to chains/\n/**\n * Get valid RPCs for given chain\n * @internal\n */\nfunction getValidChainRPCs(\n  chain: Pick<ChainMetadata, \"rpc\" | \"chainId\">,\n  clientId?: string,\n  mode: \"http\" | \"ws\" = \"http\",\n): string[] {\n  const processedRPCs: string[] = [];\n\n  for (const rpc of chain.rpc) {\n    // exclude RPC if mode mismatch\n    if (mode === \"http\" && !rpc.startsWith(\"http\")) {\n      continue;\n    }\n\n    if (mode === \"ws\" && !rpc.startsWith(\"ws\")) {\n      continue;\n    }\n\n    // Replace API_KEY placeholder with value\n    // biome-ignore lint/suspicious/noTemplateCurlyInString: this is valid\n    if (rpc.includes(\"${THIRDWEB_API_KEY}\")) {\n      if (clientId) {\n        processedRPCs.push(\n          // biome-ignore lint/suspicious/noTemplateCurlyInString: this is what the string to replace looks like in this case\n          rpc.replace(\"${THIRDWEB_API_KEY}\", clientId) +\n            (typeof globalThis !== \"undefined\" && \"APP_BUNDLE_ID\" in globalThis\n              ? // @ts-expect-error\n                `/?bundleId=${globalThis.APP_BUNDLE_ID}`\n              : \"\"),\n        );\n      } else {\n        // if no client id, let it through with empty string\n        // if secretKey is present, it will be used in header\n        // if none are passed, will have reduced access\n        // biome-ignore lint/suspicious/noTemplateCurlyInString: this is what the string to replace looks like in this case\n        processedRPCs.push(rpc.replace(\"${THIRDWEB_API_KEY}\", \"\"));\n      }\n    }\n\n    // exclude RPCs with unknown placeholder\n    else if (rpc.includes(\"${\")) {\n      // do nothing (just don't add it to the list)\n    }\n\n    // add as is\n    else {\n      processedRPCs.push(rpc);\n    }\n  }\n\n  if (processedRPCs.length === 0) {\n    throw new Error(\n      `No RPC available for chainId \"${chain.chainId}\" with mode ${mode}`,\n    );\n  }\n\n  return processedRPCs;\n}\n", "import type { ProviderInterface } from \"@coinbase/wallet-sdk\";\nimport type { Preference } from \"@coinbase/wallet-sdk/dist/core/provider/interface.js\";\nimport type { Address } from \"abitype\";\nimport * as ox__Hex from \"ox/Hex\";\nimport * as ox__TypedData from \"ox/TypedData\";\nimport { trackTransaction } from \"../../analytics/track/transaction.js\";\nimport type { Chain } from \"../../chains/types.js\";\nimport { getCachedChain, getChainMetadata } from \"../../chains/utils.js\";\nimport type { ThirdwebClient } from \"../../client/client.js\";\nimport { getAddress } from \"../../utils/address.js\";\nimport {\n  type Hex,\n  numberToHex,\n  stringToHex,\n  uint8ArrayToHex,\n} from \"../../utils/encoding/hex.js\";\nimport { stringify } from \"../../utils/json.js\";\nimport { parseTypedData } from \"../../utils/signatures/helpers/parse-typed-data.js\";\nimport { COINBASE } from \"../constants.js\";\nimport { toGetCallsStatusResponse } from \"../eip5792/get-calls-status.js\";\nimport { toGetCapabilitiesResult } from \"../eip5792/get-capabilities.js\";\nimport { toProviderCallParams } from \"../eip5792/send-calls.js\";\nimport type {\n  GetCallsStatusRawResponse,\n  WalletCapabilities,\n} from \"../eip5792/types.js\";\nimport type {\n  Account,\n  SendTransactionOption,\n  Wallet,\n} from \"../interfaces/wallet.js\";\nimport type { AppMetadata, DisconnectFn, SwitchChainFn } from \"../types.js\";\nimport { getValidPublicRPCUrl } from \"../utils/chains.js\";\nimport { getDefaultAppMetadata } from \"../utils/defaultDappMetadata.js\";\nimport { normalizeChainId } from \"../utils/normalizeChainId.js\";\nimport type { WalletEmitter } from \"../wallet-emitter.js\";\nimport type {\n  CreateWalletArgs,\n  WalletConnectionOption,\n} from \"../wallet-types.js\";\nimport { showCoinbasePopup } from \"./utils.js\";\n\nexport type CoinbaseWalletCreationOptions =\n  | {\n      /**\n       * Metadata of the dApp that will be passed to connected wallet.\n       *\n       * Some wallets may display this information to the user.\n       *\n       * Setting this property is highly recommended. If this is not set, Below default metadata will be used:\n       *\n       * ```ts\n       * {\n       *   name: \"thirdweb powered dApp\",\n       *   url: \"https://thirdweb.com\",\n       *   description: \"thirdweb powered dApp\",\n       *   logoUrl: \"https://thirdweb.com/favicon.ico\",\n       * };\n       * ```\n       */\n      appMetadata?: AppMetadata;\n\n      /**\n       * Wallet configuration, choices are 'all' | 'smartWalletOnly' | 'eoaOnly'\n       * @default 'all'\n       * @example\n       * ```ts\n       * {\n       *  walletConfig: {\n       *   options: 'all',\n       *  }\n       * }\n       * ```\n       */\n      walletConfig?: Preference;\n\n      /**\n       * Chains that the wallet can switch chains to, will default to the first chain in this array on first connection.\n       * @default Ethereum mainnet\n       * @example\n       * ```ts\n       * {\n       *   chains: [base, optimisim]\n       * }\n       */\n      chains?: Chain[];\n\n      mobileConfig?: {\n        /**\n         * The univeral callback URL to redirect the user to after they have completed the wallet connection with the cb wallet app.\n         * This needs to be setup as a Universal link for iOS https://docs.cdp.coinbase.com/wallet-sdk/docs/ios-setup/\n         * and App link on Android https://docs.cdp.coinbase.com/wallet-sdk/docs/android-setup/\n         */\n        callbackURL?: string;\n      };\n    }\n  | undefined;\n\n/**\n * Options for connecting to the CoinbaseSDK Wallet\n */\nexport type CoinbaseSDKWalletConnectionOptions = {\n  /**\n   * The Thirdweb client object\n   */\n  client: ThirdwebClient;\n\n  /**\n   * If you want the wallet to be connected to a specific blockchain, you can pass a `Chain` object to the `connect` method.\n   * This will trigger a chain switch if the wallet provider is not already connected to the specified chain.\n   *\n   * You can create a `Chain` object using the [`defineChain`](https://portal.thirdweb.com/references/typescript/v5/defineChain) function.\n   * At minimum, you need to pass the `id` of the blockchain.\n   *\n   * ```ts\n   * import { defineChain } from \"thirdweb\";\n   * const myChain = defineChain(myChainId);\n   *\n   * const address = await wallet.connect({ chain: myChain })\n   */\n  chain?: Chain;\n};\n\n// Need to keep the provider around because it keeps a single popup window connection behind the scenes\n// this should be ok since all the creation options are provided at build time\nlet _provider: ProviderInterface | undefined;\n\n/**\n * @internal\n */\nexport async function getCoinbaseWebProvider(\n  options?: CreateWalletArgs<typeof COINBASE>[1],\n): Promise<ProviderInterface> {\n  if (!_provider) {\n    let CoinbaseWalletSDK: unknown = (await import(\"@coinbase/wallet-sdk\"))\n      .default;\n    // Workaround for Vite dev import errors\n    // https://github.com/vitejs/vite/issues/7112\n    if (\n      typeof CoinbaseWalletSDK !== \"function\" &&\n      typeof (CoinbaseWalletSDK as { default: unknown }).default === \"function\"\n    ) {\n      CoinbaseWalletSDK = (\n        CoinbaseWalletSDK as unknown as { default: typeof CoinbaseWalletSDK }\n      ).default;\n    }\n\n    // @ts-expect-error This import error is not visible to TypeScript\n    const client = new CoinbaseWalletSDK({\n      appChainIds: options?.chains\n        ? options.chains.map((c) => c.id)\n        : undefined,\n      appLogoUrl:\n        options?.appMetadata?.logoUrl || getDefaultAppMetadata().logoUrl,\n      appName: options?.appMetadata?.name || getDefaultAppMetadata().name,\n    });\n\n    const provider = client.makeWeb3Provider(options?.walletConfig);\n    _provider = provider;\n    return provider;\n  }\n  return _provider;\n}\n\n/**\n * Checks if the provided wallet is a Coinbase SDK wallet.\n *\n * @param wallet - The wallet to check.\n * @returns True if the wallet is a Coinbase SDK wallet, false otherwise.\n */\nexport function isCoinbaseSDKWallet(\n  wallet: Wallet,\n): wallet is Wallet<typeof COINBASE> {\n  return wallet.id === COINBASE;\n}\n\nfunction createAccount({\n  provider,\n  address,\n  client,\n}: {\n  provider: ProviderInterface;\n  address: string;\n  client: ThirdwebClient;\n}) {\n  const account: Account = {\n    address: getAddress(address),\n    onTransactionRequested: async () => {\n      // make sure to show the coinbase popup BEFORE doing any transaction preprocessing\n      // otherwise the popup might get blocked in safari\n      await showCoinbasePopup(provider);\n    },\n    async sendTransaction(tx: SendTransactionOption) {\n      const transactionHash = (await provider.request({\n        method: \"eth_sendTransaction\",\n        params: [\n          {\n            accessList: tx.accessList,\n            data: tx.data,\n            from: getAddress(address),\n            gas: tx.gas ? numberToHex(tx.gas) : undefined,\n            to: tx.to as Address,\n            value: tx.value ? numberToHex(tx.value) : undefined,\n          },\n        ],\n      })) as Hex;\n\n      trackTransaction({\n        chainId: tx.chainId,\n        client: client,\n        contractAddress: tx.to ?? undefined,\n        gasPrice: tx.gasPrice,\n        transactionHash,\n        walletAddress: getAddress(address),\n        walletType: COINBASE,\n      });\n\n      return {\n        transactionHash,\n      };\n    },\n    async signMessage({ message }) {\n      if (!account.address) {\n        throw new Error(\"Provider not setup\");\n      }\n\n      const messageToSign = (() => {\n        if (typeof message === \"string\") {\n          return stringToHex(message);\n        }\n        if (message.raw instanceof Uint8Array) {\n          return uint8ArrayToHex(message.raw);\n        }\n        return message.raw;\n      })();\n\n      const res = await provider.request({\n        method: \"personal_sign\",\n        params: [messageToSign, account.address],\n      });\n      if (!ox__Hex.validate(res)) {\n        throw new Error(\"Invalid signature returned\");\n      }\n      return res;\n    },\n    async signTypedData(typedData) {\n      if (!account.address) {\n        throw new Error(\"Provider not setup\");\n      }\n\n      const { domain, message, primaryType } = parseTypedData(\n        typedData,\n      ) as ox__TypedData.Definition;\n\n      const types = {\n        EIP712Domain: ox__TypedData.extractEip712DomainTypes(domain),\n        ...typedData.types,\n      };\n\n      // Need to do a runtime validation check on addresses, byte ranges, integer ranges, etc\n      // as we can't statically check this with TypeScript.\n      ox__TypedData.validate({ domain, message, primaryType, types });\n\n      const stringifiedData = ox__TypedData.serialize({\n        domain: domain ?? {},\n        message,\n        primaryType,\n        types,\n      });\n\n      const res = await provider.request({\n        method: \"eth_signTypedData_v4\",\n        params: [account.address, stringifiedData],\n      });\n      if (!ox__Hex.validate(res)) {\n        throw new Error(\"Invalid signed payload returned\");\n      }\n      return res;\n    },\n    sendCalls: async (options) => {\n      try {\n        const { callParams, chain } = await toProviderCallParams(\n          options,\n          account,\n        );\n        const callId = await provider.request({\n          method: \"wallet_sendCalls\",\n          params: callParams,\n        });\n        if (callId && typeof callId === \"object\" && \"id\" in callId) {\n          return { chain, client, id: callId.id as string };\n        }\n        return { chain, client, id: callId as string };\n      } catch (error) {\n        if (/unsupport|not support/i.test((error as Error).message)) {\n          throw new Error(\n            `${COINBASE} errored calling wallet_sendCalls, with error: ${error instanceof Error ? error.message : stringify(error)}`,\n          );\n        }\n        throw error;\n      }\n    },\n    async getCallsStatus(options) {\n      try {\n        const rawResponse = (await provider.request({\n          method: \"wallet_getCallsStatus\",\n          params: [options.id],\n        })) as GetCallsStatusRawResponse;\n        return toGetCallsStatusResponse(rawResponse);\n      } catch (error) {\n        if (/unsupport|not support/i.test((error as Error).message)) {\n          throw new Error(\n            `${COINBASE} does not support wallet_getCallsStatus, reach out to them directly to request EIP-5792 support.`,\n          );\n        }\n        throw error;\n      }\n    },\n    async getCapabilities(options) {\n      const chainId = options.chainId;\n      try {\n        const result = (await provider.request({\n          method: \"wallet_getCapabilities\",\n          params: [getAddress(account.address)],\n        })) as Record<string, WalletCapabilities>;\n        return toGetCapabilitiesResult(result, chainId);\n      } catch (error: unknown) {\n        if (\n          /unsupport|not support|not available/i.test((error as Error).message)\n        ) {\n          return {\n            message: `${COINBASE} does not support wallet_getCapabilities, reach out to them directly to request EIP-5792 support.`,\n          };\n        }\n        throw error;\n      }\n    },\n  };\n\n  return account;\n}\n\nfunction onConnect(\n  address: string,\n  chain: Chain,\n  provider: ProviderInterface,\n  emitter: WalletEmitter<typeof COINBASE>,\n  client: ThirdwebClient,\n): [Account, Chain, DisconnectFn, SwitchChainFn] {\n  const account = createAccount({ address, client, provider });\n\n  async function disconnect() {\n    provider.removeListener(\"accountsChanged\", onAccountsChanged);\n    provider.removeListener(\"chainChanged\", onChainChanged);\n    provider.removeListener(\"disconnect\", onDisconnect);\n    await provider.disconnect();\n  }\n\n  async function onDisconnect() {\n    disconnect();\n    emitter.emit(\"disconnect\", undefined);\n  }\n\n  function onAccountsChanged(accounts: string[]) {\n    if (accounts[0]) {\n      const newAccount = createAccount({\n        address: getAddress(accounts[0]),\n        client,\n        provider,\n      });\n      emitter.emit(\"accountChanged\", newAccount);\n      emitter.emit(\"accountsChanged\", accounts);\n    } else {\n      onDisconnect();\n    }\n  }\n\n  function onChainChanged(newChainId: string) {\n    const newChain = getCachedChain(normalizeChainId(newChainId));\n    emitter.emit(\"chainChanged\", newChain);\n  }\n\n  // subscribe to events\n  provider.on(\"accountsChanged\", onAccountsChanged);\n  provider.on(\"chainChanged\", onChainChanged);\n  provider.on(\"disconnect\", onDisconnect);\n\n  return [\n    account,\n    chain,\n    onDisconnect,\n    (newChain) => switchChainCoinbaseWalletSDK(provider, newChain),\n  ];\n}\n\n/**\n * @internal\n */\nexport async function connectCoinbaseWalletSDK(\n  options: WalletConnectionOption<typeof COINBASE>,\n  emitter: WalletEmitter<typeof COINBASE>,\n  provider: ProviderInterface,\n): Promise<ReturnType<typeof onConnect>> {\n  const accounts = (await provider.request({\n    method: \"eth_requestAccounts\",\n  })) as string[];\n\n  if (!accounts[0]) {\n    throw new Error(\"No accounts found\");\n  }\n\n  const address = getAddress(accounts[0]);\n\n  const connectedChainId = (await provider.request({\n    method: \"eth_chainId\",\n  })) as string | number;\n\n  const chainId = normalizeChainId(connectedChainId);\n  let chain =\n    options.chain && options.chain.id === chainId\n      ? options.chain\n      : getCachedChain(chainId);\n  // Switch to chain if provided\n  if (chainId && options?.chain && chainId !== options?.chain.id) {\n    await switchChainCoinbaseWalletSDK(provider, options.chain);\n    chain = options.chain;\n  }\n\n  return onConnect(address, chain, provider, emitter, options.client);\n}\n\n/**\n * @internal\n */\nexport async function autoConnectCoinbaseWalletSDK(\n  options: WalletConnectionOption<typeof COINBASE>,\n  emitter: WalletEmitter<typeof COINBASE>,\n  provider: ProviderInterface,\n): Promise<ReturnType<typeof onConnect>> {\n  // connected accounts\n  const addresses = (await provider.request({\n    method: \"eth_accounts\",\n  })) as string[];\n\n  const address = addresses[0];\n\n  if (!address) {\n    throw new Error(\"No accounts found\");\n  }\n\n  const connectedChainId = (await provider.request({\n    method: \"eth_chainId\",\n  })) as string | number;\n  const chainId = normalizeChainId(connectedChainId);\n  const chain =\n    options.chain && options.chain.id === chainId\n      ? options.chain\n      : getCachedChain(chainId);\n\n  return onConnect(address, chain, provider, emitter, options.client);\n}\n\nasync function switchChainCoinbaseWalletSDK(\n  provider: ProviderInterface,\n  chain: Chain,\n) {\n  const chainIdHex = numberToHex(chain.id);\n\n  try {\n    await provider.request({\n      method: \"wallet_switchEthereumChain\",\n      params: [{ chainId: chainIdHex }],\n    });\n  } catch (error) {\n    const apiChain = await getChainMetadata(chain);\n\n    // Indicates chain is not added to provider\n    // biome-ignore lint/suspicious/noExplicitAny: TODO: fix later\n    if ((error as any)?.code === 4902) {\n      // try to add the chain\n      await provider.request({\n        method: \"wallet_addEthereumChain\",\n        params: [\n          {\n            blockExplorerUrls: apiChain.explorers?.map((x) => x.url) || [],\n            chainId: chainIdHex,\n            chainName: apiChain.name,\n            nativeCurrency: apiChain.nativeCurrency, // no client id on purpose here\n            rpcUrls: getValidPublicRPCUrl(apiChain),\n          },\n        ],\n      });\n    }\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACO,IAAM,WAAW;AACjB,IAAM,WAAW;AACjB,IAAM,UAAU;AAChB,IAAM,SAAS;;;ACuCtB,eAAsB,eAAe,EACnC,QACA,QACA,GAAE,GACoB;AACtB,QAAM,UAAU,OAAO,WAAU;AACjC,MAAI,CAAC,SAAS;AACZ,UAAM,IAAI,MACR,0DAA0D,OAAO,EAAE,EAAE;EAEzE;AAEA,QAAM,QAAQ,OAAO,SAAQ;AAC7B,MAAI,CAAC,OAAO;AACV,UAAM,IAAI,MACR,wDAAwD,OAAO,EAAE,EAAE;EAEvE;AAEA,MAAI,QAAQ,gBAAgB;AAC1B,WAAO,QAAQ,eAAe,EAAE,IAAI,OAAO,OAAM,CAAE;EACrD;AAEA,QAAM,IAAI,MACR,qCAAqC,OAAO,EAAE,4BAA4B;AAE9E;AAEA,IAAM,kBAAkB;EACtB,OAAO;EACP,OAAO;;AAGH,SAAU,yBACd,UAAmC;AA5ErC;AA8EE,QAAM,CAAC,QAAQ,UAAU,KAAK,MAAK;AACjC,UAAMA,cAAa,SAAS;AAC5B,QAAIA,eAAc,OAAOA,cAAa;AACpC,aAAO,CAAC,WAAWA,WAAU;AAC/B,QAAIA,eAAc,OAAOA,cAAa;AACpC,aAAO,CAAC,WAAWA,WAAU;AAC/B,QAAIA,eAAc,OAAOA,cAAa;AACpC,aAAO,CAAC,WAAWA,WAAU;AAE/B,QAAIA,gBAAe;AAAa,aAAO,CAAC,WAAW,GAAG;AAEtD,QAAIA,gBAAe;AAAW,aAAO,CAAC,WAAW,GAAG;AACpD,WAAO,CAAC,QAAWA,WAAU;EAC/B,GAAE;AACF,SAAO;IACL,GAAG;IACH,QAAQ,SAAS;;IAEjB,SAAS,SAAS,UAAU,YAAY,SAAS,OAAO,IAAI;IAC5D,YACE,cAAS,aAAT,mBAAmB,IAAI,CAAC,aAAa;MACnC,GAAG;MACH,aAAa,YAAY,QAAQ,WAAW;MAC5C,SAAS,YAAY,QAAQ,OAAO;MACpC,QAAQ,gBAAgB,QAAQ,MAAuB;YAClD,CAAA;IACT;IACA;IACA,SAAS,SAAS;;AAEtB;;;AC3EA,eAAsB,gBAAsD,EAC1E,QACA,QAAO,GACoB;AAC3B,QAAM,UAAU,OAAO,WAAU;AACjC,MAAI,CAAC,SAAS;AACZ,WAAO;MACL,SAAS,4DAA4D,OAAO,EAAE;;EAElF;AAEA,MAAI,QAAQ,iBAAiB;AAC3B,WAAO,QAAQ,gBAAgB,EAAE,QAAO,CAAE;EAC5C;AAEA,QAAM,IAAI,MACR,sCAAsC,OAAO,EAAE,4BAA4B;AAE/E;AAEM,SAAU,wBACd,QACA,SAAgB;AAEhB,QAAM,eAAe,CAAA;AAIrB,aAAW,CAACC,UAAS,aAAa,KAAK,OAAO,QAAQ,MAAM,GAAG;AAC7D,iBAAa,OAAOA,QAAO,CAAC,IAAI,CAAA;AAChC,UAAM,mBAAmB,CAAA;AACzB,eAAW,CAAC,KAAK,KAAK,KAAK,OAAO,QAAQ,aAAa,GAAG;AACxD,uBAAiB,GAAG,IAAI;IAC1B;AACA,iBAAa,OAAOA,QAAO,CAAC,IAAI;EAClC;AACA,SACE,OAAO,YAAY,WAAW,aAAa,OAAO,IAAI;AAE1D;;;AC6CA,eAAsB,UACpB,SAA6B;AAnH/B;AAqHE,QAAM,EAAE,QAAQ,MAAK,IAAK;AAE1B,QAAM,UAAU,OAAO,WAAU;AACjC,MAAI,CAAC,SAAS;AACZ,UAAM,IAAI,MACR,uDAAuD,OAAO,EAAE,EAAE;EAEtE;AAEA,QAAM,YAAY,QAAQ,MAAM,CAAC;AACjC,MAAI,CAAC,WAAW;AACd,UAAM,IAAI,MAAM,kBAAkB;EACpC;AAEA,QAAM,YAAY,UAAU,SAAS;AAErC,QAAI,YAAO,SAAQ,MAAf,mBAAmB,QAAO,UAAU,IAAI;AAC1C,UAAM,OAAO,YAAY,SAAS;EACpC;AAGA,MAAI,QAAQ,WAAW;AACrB,UAAM,EAAE,QAAQ,GAAG,GAAG,qBAAoB,IAAK;AAC/C,UAAM,SAAS,MAAM,QAAQ,UAAU,oBAAoB;AAC3D,WAAO;MACL,GAAG;MACH;;EAEJ;AAEA,QAAM,IAAI,MACR,6BAA6B,OAAO,EAAE,4BAA4B;AAEtE;AAEA,eAAsB,qBACpB,SACA,SAAgB;AAEhB,QAAM,YAAY,QAAQ,MAAM,CAAC;AACjC,MAAI,CAAC,WAAW;AACd,UAAM,IAAI,MAAM,kBAAkB;EACpC;AAEA,QAAM,EACJ,OACA,cACA,UAAU,SACV,QAAQ,UAAU,MAAK,IACrB;AAEJ,QAAM,gBAA+B,MAAM,QAAQ,IACjD,MAAM,IAAI,OAAO,SAAQ;AACvB,UAAM,EAAE,IAAI,MAAK,IAAK;AACtB,QAAI,OAAO,UAAa,KAAK,SAAS,QAAW;AAC/C,YAAM,IAAI,MAAM,oDAAoD;IACtE;AAEA,UAAM,CAAC,KAAK,OAAO,MAAM,IAAI,MAAM,QAAQ,IAAI;MAC7C,qBAAqB,EAAE;MACvB,OAAO,IAAI;MACX,qBAAqB,KAAK;KAC3B;AAED,QAAI,KAAK;AACP,aAAO;QACL,MAAM;QACN,IAAI,WAAW,GAAG;QAClB,OACE,OAAO,WAAW,YAAY,OAAO,WAAW,WAC5C,YAAY,MAAM,IAClB;;IAEV;AAEA,WAAO;MACL,MAAM;MACN,IAAI;MACJ,OAAO;;EAEX,CAAC,CAAC;AAGJ,QAAM,2BAA0D;IAC9D;;MAEE,gBAAgB,QAAQ,kBAAkB;MAC1C,OAAO;MACP;MACA,SAAS,YAAY,MAAM,EAAE;MAC7B,MAAM,WAAW,QAAQ,OAAO;MAChC;;;AAIJ,SAAO,EAAE,YAAY,0BAA0B,MAAK;AACtD;;;ACjNM,SAAU,qBAAqB,OAAoB;AACvD,SAAO,kBAAkB,KAAK,EAAE,IAAI,CAAC,QAAO;AAC1C,QAAI;AACF,YAAM,MAAM,IAAI,IAAI,GAAG;AAEvB,UAAI,IAAI,SAAS,SAAS,eAAe,GAAG;AAC1C,YAAI,WAAW;AACf,YAAI,SAAS;MACf;AACA,aAAO,IAAI,SAAQ;IACrB,QAAQ;AACN,aAAO;IACT;EACF,CAAC;AACH;AAOA,SAAS,kBACP,OACA,UACA,OAAsB,QAAM;AAE5B,QAAM,gBAA0B,CAAA;AAEhC,aAAW,OAAO,MAAM,KAAK;AAE3B,QAAI,SAAS,UAAU,CAAC,IAAI,WAAW,MAAM,GAAG;AAC9C;IACF;AAEA,QAAI,SAAS,QAAQ,CAAC,IAAI,WAAW,IAAI,GAAG;AAC1C;IACF;AAIA,QAAI,IAAI,SAAS,qBAAqB,GAAG;AACvC,UAAI,UAAU;AACZ,sBAAc;;UAEZ,IAAI,QAAQ,uBAAuB,QAAQ,KACxC,OAAO,eAAe,eAAe,mBAAmB;;YAErD,cAAc,WAAW,aAAa;cACtC;QAAG;MAEb,OAAO;AAKL,sBAAc,KAAK,IAAI,QAAQ,uBAAuB,EAAE,CAAC;MAC3D;IACF,WAGS,IAAI,SAAS,IAAI,GAAG;IAE7B,OAGK;AACH,oBAAc,KAAK,GAAG;IACxB;EACF;AAEA,MAAI,cAAc,WAAW,GAAG;AAC9B,UAAM,IAAI,MACR,iCAAiC,MAAM,OAAO,eAAe,IAAI,EAAE;EAEvE;AAEA,SAAO;AACT;;;ACwCA,IAAI;AAKJ,eAAsB,uBACpB,SAA8C;AAhIhD;AAkIE,MAAI,CAAC,WAAW;AACd,QAAI,qBAA8B,MAAM,OAAO,oBAAsB,GAClE;AAGH,QACE,OAAO,sBAAsB,cAC7B,OAAQ,kBAA2C,YAAY,YAC/D;AACA,0BACE,kBACA;IACJ;AAGA,UAAM,SAAS,IAAI,kBAAkB;MACnC,cAAa,mCAAS,UAClB,QAAQ,OAAO,IAAI,CAAC,MAAM,EAAE,EAAE,IAC9B;MACJ,cACE,wCAAS,gBAAT,mBAAsB,YAAW,sBAAqB,EAAG;MAC3D,WAAS,wCAAS,gBAAT,mBAAsB,SAAQ,sBAAqB,EAAG;KAChE;AAED,UAAM,WAAW,OAAO,iBAAiB,mCAAS,YAAY;AAC9D,gBAAY;AACZ,WAAO;EACT;AACA,SAAO;AACT;AAQM,SAAU,oBACd,QAAc;AAEd,SAAO,OAAO,OAAO;AACvB;AAEA,SAAS,cAAc,EACrB,UACA,SACA,OAAM,GAKP;AACC,QAAM,UAAmB;IACvB,SAAS,WAAW,OAAO;IAC3B,wBAAwB,YAAW;AAGjC,YAAM,kBAAkB,QAAQ;IAClC;IACA,MAAM,gBAAgB,IAAyB;AAC7C,YAAM,kBAAmB,MAAM,SAAS,QAAQ;QAC9C,QAAQ;QACR,QAAQ;UACN;YACE,YAAY,GAAG;YACf,MAAM,GAAG;YACT,MAAM,WAAW,OAAO;YACxB,KAAK,GAAG,MAAM,YAAY,GAAG,GAAG,IAAI;YACpC,IAAI,GAAG;YACP,OAAO,GAAG,QAAQ,YAAY,GAAG,KAAK,IAAI;;;OAG/C;AAED,uBAAiB;QACf,SAAS,GAAG;QACZ;QACA,iBAAiB,GAAG,MAAM;QAC1B,UAAU,GAAG;QACb;QACA,eAAe,WAAW,OAAO;QACjC,YAAY;OACb;AAED,aAAO;QACL;;IAEJ;IACA,MAAM,YAAY,EAAE,QAAO,GAAE;AAC3B,UAAI,CAAC,QAAQ,SAAS;AACpB,cAAM,IAAI,MAAM,oBAAoB;MACtC;AAEA,YAAM,iBAAiB,MAAK;AAC1B,YAAI,OAAO,YAAY,UAAU;AAC/B,iBAAO,YAAY,OAAO;QAC5B;AACA,YAAI,QAAQ,eAAe,YAAY;AACrC,iBAAO,gBAAgB,QAAQ,GAAG;QACpC;AACA,eAAO,QAAQ;MACjB,GAAE;AAEF,YAAM,MAAM,MAAM,SAAS,QAAQ;QACjC,QAAQ;QACR,QAAQ,CAAC,eAAe,QAAQ,OAAO;OACxC;AACD,UAAI,CAAS,SAAS,GAAG,GAAG;AAC1B,cAAM,IAAI,MAAM,4BAA4B;MAC9C;AACA,aAAO;IACT;IACA,MAAM,cAAc,WAAS;AAC3B,UAAI,CAAC,QAAQ,SAAS;AACpB,cAAM,IAAI,MAAM,oBAAoB;MACtC;AAEA,YAAM,EAAE,QAAQ,SAAS,YAAW,IAAK,eACvC,SAAS;AAGX,YAAM,QAAQ;QACZ,cAA4B,yBAAyB,MAAM;QAC3D,GAAG,UAAU;;AAKf,MAAcC,UAAS,EAAE,QAAQ,SAAS,aAAa,MAAK,CAAE;AAE9D,YAAM,kBAAgC,UAAU;QAC9C,QAAQ,UAAU,CAAA;QAClB;QACA;QACA;OACD;AAED,YAAM,MAAM,MAAM,SAAS,QAAQ;QACjC,QAAQ;QACR,QAAQ,CAAC,QAAQ,SAAS,eAAe;OAC1C;AACD,UAAI,CAAS,SAAS,GAAG,GAAG;AAC1B,cAAM,IAAI,MAAM,iCAAiC;MACnD;AACA,aAAO;IACT;IACA,WAAW,OAAO,YAAW;AAC3B,UAAI;AACF,cAAM,EAAE,YAAY,MAAK,IAAK,MAAM,qBAClC,SACA,OAAO;AAET,cAAM,SAAS,MAAM,SAAS,QAAQ;UACpC,QAAQ;UACR,QAAQ;SACT;AACD,YAAI,UAAU,OAAO,WAAW,YAAY,QAAQ,QAAQ;AAC1D,iBAAO,EAAE,OAAO,QAAQ,IAAI,OAAO,GAAY;QACjD;AACA,eAAO,EAAE,OAAO,QAAQ,IAAI,OAAgB;MAC9C,SAAS,OAAO;AACd,YAAI,yBAAyB,KAAM,MAAgB,OAAO,GAAG;AAC3D,gBAAM,IAAI,MACR,GAAG,QAAQ,kDAAkD,iBAAiB,QAAQ,MAAM,UAAU,UAAU,KAAK,CAAC,EAAE;QAE5H;AACA,cAAM;MACR;IACF;IACA,MAAM,eAAe,SAAO;AAC1B,UAAI;AACF,cAAM,cAAe,MAAM,SAAS,QAAQ;UAC1C,QAAQ;UACR,QAAQ,CAAC,QAAQ,EAAE;SACpB;AACD,eAAO,yBAAyB,WAAW;MAC7C,SAAS,OAAO;AACd,YAAI,yBAAyB,KAAM,MAAgB,OAAO,GAAG;AAC3D,gBAAM,IAAI,MACR,GAAG,QAAQ,kGAAkG;QAEjH;AACA,cAAM;MACR;IACF;IACA,MAAM,gBAAgB,SAAO;AAC3B,YAAM,UAAU,QAAQ;AACxB,UAAI;AACF,cAAM,SAAU,MAAM,SAAS,QAAQ;UACrC,QAAQ;UACR,QAAQ,CAAC,WAAW,QAAQ,OAAO,CAAC;SACrC;AACD,eAAO,wBAAwB,QAAQ,OAAO;MAChD,SAAS,OAAgB;AACvB,YACE,uCAAuC,KAAM,MAAgB,OAAO,GACpE;AACA,iBAAO;YACL,SAAS,GAAG,QAAQ;;QAExB;AACA,cAAM;MACR;IACF;;AAGF,SAAO;AACT;AAEA,SAAS,UACP,SACA,OACA,UACA,SACA,QAAsB;AAEtB,QAAM,UAAU,cAAc,EAAE,SAAS,QAAQ,SAAQ,CAAE;AAE3D,iBAAe,aAAU;AACvB,aAAS,eAAe,mBAAmB,iBAAiB;AAC5D,aAAS,eAAe,gBAAgB,cAAc;AACtD,aAAS,eAAe,cAAc,YAAY;AAClD,UAAM,SAAS,WAAU;EAC3B;AAEA,iBAAe,eAAY;AACzB,eAAU;AACV,YAAQ,KAAK,cAAc,MAAS;EACtC;AAEA,WAAS,kBAAkB,UAAkB;AAC3C,QAAI,SAAS,CAAC,GAAG;AACf,YAAM,aAAa,cAAc;QAC/B,SAAS,WAAW,SAAS,CAAC,CAAC;QAC/B;QACA;OACD;AACD,cAAQ,KAAK,kBAAkB,UAAU;AACzC,cAAQ,KAAK,mBAAmB,QAAQ;IAC1C,OAAO;AACL,mBAAY;IACd;EACF;AAEA,WAAS,eAAe,YAAkB;AACxC,UAAM,WAAW,eAAe,iBAAiB,UAAU,CAAC;AAC5D,YAAQ,KAAK,gBAAgB,QAAQ;EACvC;AAGA,WAAS,GAAG,mBAAmB,iBAAiB;AAChD,WAAS,GAAG,gBAAgB,cAAc;AAC1C,WAAS,GAAG,cAAc,YAAY;AAEtC,SAAO;IACL;IACA;IACA;IACA,CAAC,aAAa,6BAA6B,UAAU,QAAQ;;AAEjE;AAKA,eAAsB,yBACpB,SACA,SACA,UAA2B;AAE3B,QAAM,WAAY,MAAM,SAAS,QAAQ;IACvC,QAAQ;GACT;AAED,MAAI,CAAC,SAAS,CAAC,GAAG;AAChB,UAAM,IAAI,MAAM,mBAAmB;EACrC;AAEA,QAAM,UAAU,WAAW,SAAS,CAAC,CAAC;AAEtC,QAAM,mBAAoB,MAAM,SAAS,QAAQ;IAC/C,QAAQ;GACT;AAED,QAAM,UAAU,iBAAiB,gBAAgB;AACjD,MAAI,QACF,QAAQ,SAAS,QAAQ,MAAM,OAAO,UAClC,QAAQ,QACR,eAAe,OAAO;AAE5B,MAAI,YAAW,mCAAS,UAAS,aAAY,mCAAS,MAAM,KAAI;AAC9D,UAAM,6BAA6B,UAAU,QAAQ,KAAK;AAC1D,YAAQ,QAAQ;EAClB;AAEA,SAAO,UAAU,SAAS,OAAO,UAAU,SAAS,QAAQ,MAAM;AACpE;AAKA,eAAsB,6BACpB,SACA,SACA,UAA2B;AAG3B,QAAM,YAAa,MAAM,SAAS,QAAQ;IACxC,QAAQ;GACT;AAED,QAAM,UAAU,UAAU,CAAC;AAE3B,MAAI,CAAC,SAAS;AACZ,UAAM,IAAI,MAAM,mBAAmB;EACrC;AAEA,QAAM,mBAAoB,MAAM,SAAS,QAAQ;IAC/C,QAAQ;GACT;AACD,QAAM,UAAU,iBAAiB,gBAAgB;AACjD,QAAM,QACJ,QAAQ,SAAS,QAAQ,MAAM,OAAO,UAClC,QAAQ,QACR,eAAe,OAAO;AAE5B,SAAO,UAAU,SAAS,OAAO,UAAU,SAAS,QAAQ,MAAM;AACpE;AAEA,eAAe,6BACb,UACA,OAAY;AA7cd;AA+cE,QAAM,aAAa,YAAY,MAAM,EAAE;AAEvC,MAAI;AACF,UAAM,SAAS,QAAQ;MACrB,QAAQ;MACR,QAAQ,CAAC,EAAE,SAAS,WAAU,CAAE;KACjC;EACH,SAAS,OAAO;AACd,UAAM,WAAW,MAAM,iBAAiB,KAAK;AAI7C,SAAK,+BAAe,UAAS,MAAM;AAEjC,YAAM,SAAS,QAAQ;QACrB,QAAQ;QACR,QAAQ;UACN;YACE,qBAAmB,cAAS,cAAT,mBAAoB,IAAI,CAAC,MAAM,EAAE,SAAQ,CAAA;YAC5D,SAAS;YACT,WAAW,SAAS;YACpB,gBAAgB,SAAS;;YACzB,SAAS,qBAAqB,QAAQ;;;OAG3C;IACH;EACF;AACF;",
  "names": ["statusCode", "chainId", "validate"]
}

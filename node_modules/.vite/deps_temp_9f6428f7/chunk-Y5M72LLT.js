import {
  getClaimParams
} from "./chunk-WTVUONKS.js";
import {
  isClaimConditionSupported
} from "./chunk-PQGFIGUE.js";
import {
  isGetActiveClaimConditionSupported
} from "./chunk-YG2PFDN2.js";
import {
  isContractURISupported
} from "./chunk-LDCAYGRP.js";
import {
  once
} from "./chunk-NACC2RRT.js";
import {
  prepareContractCall
} from "./chunk-CEXHI3CH.js";
import {
  detectMethod
} from "./chunk-DGWZEIL6.js";
import {
  encodeAbiParameters
} from "./chunk-NOCRRPHM.js";

// node_modules/thirdweb/dist/esm/extensions/erc721/__generated__/IDrop/write/claim.js
var FN_SELECTOR = "0x84bb1e42";
var FN_INPUTS = [
  {
    name: "receiver",
    type: "address"
  },
  {
    name: "quantity",
    type: "uint256"
  },
  {
    name: "currency",
    type: "address"
  },
  {
    name: "pricePerToken",
    type: "uint256"
  },
  {
    components: [
      {
        name: "proof",
        type: "bytes32[]"
      },
      {
        name: "quantityLimitPerWallet",
        type: "uint256"
      },
      {
        name: "pricePerToken",
        type: "uint256"
      },
      {
        name: "currency",
        type: "address"
      }
    ],
    name: "allowlistProof",
    type: "tuple"
  },
  {
    name: "data",
    type: "bytes"
  }
];
var FN_OUTPUTS = [];
function isClaimSupported(availableSelectors) {
  return detectMethod({
    availableSelectors,
    method: [FN_SELECTOR, FN_INPUTS, FN_OUTPUTS]
  });
}
function encodeClaimParams(options) {
  return encodeAbiParameters(FN_INPUTS, [
    options.receiver,
    options.quantity,
    options.currency,
    options.pricePerToken,
    options.allowlistProof,
    options.data
  ]);
}
function encodeClaim(options) {
  return FN_SELECTOR + encodeClaimParams(options).slice(2);
}
function claim(options) {
  const asyncOptions = once(async () => {
    return "asyncParams" in options ? await options.asyncParams() : options;
  });
  return prepareContractCall({
    accessList: async () => {
      var _a;
      return (_a = (await asyncOptions()).overrides) == null ? void 0 : _a.accessList;
    },
    authorizationList: async () => {
      var _a;
      return (_a = (await asyncOptions()).overrides) == null ? void 0 : _a.authorizationList;
    },
    contract: options.contract,
    erc20Value: async () => {
      var _a;
      return (_a = (await asyncOptions()).overrides) == null ? void 0 : _a.erc20Value;
    },
    extraGas: async () => {
      var _a;
      return (_a = (await asyncOptions()).overrides) == null ? void 0 : _a.extraGas;
    },
    gas: async () => {
      var _a;
      return (_a = (await asyncOptions()).overrides) == null ? void 0 : _a.gas;
    },
    gasPrice: async () => {
      var _a;
      return (_a = (await asyncOptions()).overrides) == null ? void 0 : _a.gasPrice;
    },
    maxFeePerGas: async () => {
      var _a;
      return (_a = (await asyncOptions()).overrides) == null ? void 0 : _a.maxFeePerGas;
    },
    maxPriorityFeePerGas: async () => {
      var _a;
      return (_a = (await asyncOptions()).overrides) == null ? void 0 : _a.maxPriorityFeePerGas;
    },
    method: [FN_SELECTOR, FN_INPUTS, FN_OUTPUTS],
    nonce: async () => {
      var _a;
      return (_a = (await asyncOptions()).overrides) == null ? void 0 : _a.nonce;
    },
    params: async () => {
      const resolvedOptions = await asyncOptions();
      return [
        resolvedOptions.receiver,
        resolvedOptions.quantity,
        resolvedOptions.currency,
        resolvedOptions.pricePerToken,
        resolvedOptions.allowlistProof,
        resolvedOptions.data
      ];
    },
    value: async () => {
      var _a;
      return (_a = (await asyncOptions()).overrides) == null ? void 0 : _a.value;
    }
  });
}

// node_modules/thirdweb/dist/esm/extensions/erc721/drops/write/claimTo.js
function claimTo(options) {
  return claim({
    asyncParams: () => getClaimParams({
      contract: options.contract,
      from: options.from,
      quantity: options.quantity,
      singlePhaseDrop: options.singlePhaseDrop,
      to: options.to,
      type: "erc721"
    }),
    contract: options.contract
  });
}
function isClaimToSupported(availableSelectors) {
  return isClaimSupported(availableSelectors) && // requires contractMetadata for claimer proofs
  isContractURISupported(availableSelectors) && // required to check if the contract supports the getActiveClaimCondition method
  (isGetActiveClaimConditionSupported(availableSelectors) || isClaimConditionSupported(availableSelectors));
}

export {
  encodeClaim,
  claimTo,
  isClaimToSupported
};
//# sourceMappingURL=chunk-Y5M72LLT.js.map

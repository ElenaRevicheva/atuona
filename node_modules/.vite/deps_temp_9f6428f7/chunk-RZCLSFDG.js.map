{
  "version": 3,
  "sources": ["../../thirdweb/src/analytics/track/helpers.ts", "../../thirdweb/src/analytics/track/transaction.ts"],
  "sourcesContent": ["/**\n * @internal\n */\nexport function isInsufficientFundsError(error: Error | unknown): boolean {\n  if (!error) return false;\n\n  const errorMessage =\n    typeof error === \"string\"\n      ? error\n      : (error as Error)?.message ||\n        (error as { data?: { message?: string } })?.data?.message ||\n        \"\";\n\n  const message = errorMessage.toLowerCase();\n\n  // Common patterns for insufficient funds errors\n  return (\n    message.includes(\"insufficient funds\") ||\n    message.includes(\"insufficient balance\") ||\n    (message.includes(\"insufficient\") &&\n      (message.includes(\"native\") || message.includes(\"gas\"))) ||\n    // Common error codes from various wallets/providers\n    (error as { code?: string | number })?.code === \"INSUFFICIENT_FUNDS\" ||\n    (error as { reason?: string })?.reason === \"insufficient funds\"\n  );\n}\n\n/**\n * @internal\n */\nexport function getErrorDetails(error: Error | unknown): {\n  message: string;\n  code?: string | number;\n} {\n  if (!error) return { message: \"Unknown error\" };\n\n  const message =\n    typeof error === \"string\"\n      ? error\n      : (error as Error)?.message ||\n        (error as { data?: { message?: string } })?.data?.message ||\n        String(error);\n\n  const code =\n    (error as { code?: string | number })?.code ||\n    (error as { reason?: string })?.reason;\n\n  return { code, message };\n}\n", "import type { ThirdwebClient } from \"../../client/client.js\";\nimport { stringify } from \"../../utils/json.js\";\nimport type { Ecosystem } from \"../../wallets/in-app/core/wallet/types.js\";\nimport type { WalletId } from \"../../wallets/wallet-types.js\";\nimport { getErrorDetails } from \"./helpers.js\";\nimport { track } from \"./index.js\";\n\ntype TransactionEvent = {\n  client: ThirdwebClient;\n  ecosystem?: Ecosystem;\n  transactionHash?: string;\n  walletAddress?: string;\n  walletType?: WalletId | ({} & string);\n  chainId?: number;\n  contractAddress?: string;\n  functionName?: string;\n  gasPrice?: bigint;\n  error?: {\n    message: string;\n    code: string;\n  };\n};\n\n/**\n * @internal\n */\nexport async function trackTransaction(args: TransactionEvent) {\n  return trackTransactionEvent({\n    ...args,\n    action: \"transaction:sent\",\n  });\n}\n\n/**\n * @internal\n */\nfunction trackTransactionEvent(\n  args: TransactionEvent & {\n    action: \"transaction:sent\";\n  },\n) {\n  return track({\n    client: args.client,\n    data: {\n      action: args.action,\n      chainId: args.chainId,\n      clientId: args.client.clientId,\n      contractAddress: args.contractAddress,\n      errorCode: stringify(args.error),\n      functionName: args.functionName,\n      gasPrice: args.gasPrice,\n      transactionHash: args.transactionHash,\n      walletAddress: args.walletAddress,\n      walletType: args.walletType,\n    },\n    ecosystem: args.ecosystem,\n  });\n}\n\n/**\n * @internal\n */\nexport async function trackInsufficientFundsError(args: {\n  client: ThirdwebClient;\n  ecosystem?: Ecosystem;\n  error: Error | unknown;\n  walletAddress?: string;\n  chainId?: number;\n  contractAddress?: string;\n  functionName?: string;\n  transactionValue?: bigint;\n  requiredAmount?: bigint;\n  userBalance?: bigint;\n}) {\n  const errorDetails = getErrorDetails(args.error);\n\n  return track({\n    client: args.client,\n    data: {\n      action: \"transaction:insufficient_funds\",\n      chainId: args.chainId,\n      clientId: args.client.clientId,\n      contractAddress: args.contractAddress,\n      errorCode: errorDetails.code ? stringify(errorDetails.code) : undefined,\n      errorMessage: errorDetails.message,\n      functionName: args.functionName,\n      requiredAmount: args.requiredAmount?.toString(),\n      transactionValue: args.transactionValue?.toString(),\n      userBalance: args.userBalance?.toString(),\n      walletAddress: args.walletAddress,\n    },\n    ecosystem: args.ecosystem,\n  });\n}\n"],
  "mappings": ";;;;;;;;AAGM,SAAU,yBAAyB,OAAsB;AAH/D;AAIE,MAAI,CAAC;AAAO,WAAO;AAEnB,QAAM,eACJ,OAAO,UAAU,WACb,SACC,+BAAiB,cACjB,oCAA2C,SAA3C,mBAAiD,YAClD;AAEN,QAAM,UAAU,aAAa,YAAW;AAGxC,SACE,QAAQ,SAAS,oBAAoB,KACrC,QAAQ,SAAS,sBAAsB,KACtC,QAAQ,SAAS,cAAc,MAC7B,QAAQ,SAAS,QAAQ,KAAK,QAAQ,SAAS,KAAK;GAEtD,+BAAsC,UAAS,yBAC/C,+BAA+B,YAAW;AAE/C;AAKM,SAAU,gBAAgB,OAAsB;AA9BtD;AAkCE,MAAI,CAAC;AAAO,WAAO,EAAE,SAAS,gBAAe;AAE7C,QAAM,UACJ,OAAO,UAAU,WACb,SACC,+BAAiB,cACjB,oCAA2C,SAA3C,mBAAiD,YAClD,OAAO,KAAK;AAElB,QAAM,QACH,+BAAsC,UACtC,+BAA+B;AAElC,SAAO,EAAE,MAAM,QAAO;AACxB;;;ACtBA,eAAsB,iBAAiB,MAAsB;AAC3D,SAAO,sBAAsB;IAC3B,GAAG;IACH,QAAQ;GACT;AACH;AAKA,SAAS,sBACP,MAEC;AAED,SAAO,MAAM;IACX,QAAQ,KAAK;IACb,MAAM;MACJ,QAAQ,KAAK;MACb,SAAS,KAAK;MACd,UAAU,KAAK,OAAO;MACtB,iBAAiB,KAAK;MACtB,WAAW,UAAU,KAAK,KAAK;MAC/B,cAAc,KAAK;MACnB,UAAU,KAAK;MACf,iBAAiB,KAAK;MACtB,eAAe,KAAK;MACpB,YAAY,KAAK;;IAEnB,WAAW,KAAK;GACjB;AACH;AAKA,eAAsB,4BAA4B,MAWjD;AAxED;AAyEE,QAAM,eAAe,gBAAgB,KAAK,KAAK;AAE/C,SAAO,MAAM;IACX,QAAQ,KAAK;IACb,MAAM;MACJ,QAAQ;MACR,SAAS,KAAK;MACd,UAAU,KAAK,OAAO;MACtB,iBAAiB,KAAK;MACtB,WAAW,aAAa,OAAO,UAAU,aAAa,IAAI,IAAI;MAC9D,cAAc,aAAa;MAC3B,cAAc,KAAK;MACnB,iBAAgB,UAAK,mBAAL,mBAAqB;MACrC,mBAAkB,UAAK,qBAAL,mBAAuB;MACzC,cAAa,UAAK,gBAAL,mBAAkB;MAC/B,eAAe,KAAK;;IAEtB,WAAW,KAAK;GACjB;AACH;",
  "names": []
}

{
  "version": 3,
  "sources": ["../../thirdweb/src/utils/bigint.ts"],
  "sourcesContent": ["import { uint8ArrayToHex } from \"./encoding/hex.js\";\n\n/**\n * Returns the minimum of two BigInt values.\n * @param a - The first BigInt value.\n * @param b - The second BigInt value.\n * @returns The smaller of the two BigInt values.\n * @utils\n * @example\n * ```ts\n * min(1n, 2n)\n * // 1n\n */\nexport function min(a: bigint, b: bigint) {\n  return a < b ? a : b;\n}\n\n/**\n * Returns the maximum of two BigInt values.\n * @param a - The first BigInt value.\n * @param b - The second BigInt value.\n * @returns The larger of the two BigInt values.\n * @utils\n * @example\n * ```ts\n * max(1n, 2n)\n * // 2n\n */\nexport function max(a: bigint, b: bigint) {\n  return a > b ? a : b;\n}\n\n/**\n * Provides error checking on string or number bigint inputs.\n * @param value - A possibly integer-like string, number, or bigint.\n * @returns The bigint representation of the input.\n * @example\n * ```ts\n * toBigInt(\"2\")\n * // 2n\n */\nexport function toBigInt(value: string | number | bigint | Uint8Array): bigint {\n  if (\n    [\"string\", \"number\"].includes(typeof value) &&\n    !Number.isInteger(Number(value))\n  ) {\n    throw new Error(\n      `Expected value to be an integer to convert to a bigint, got ${value} of type ${typeof value}`,\n    );\n  }\n\n  if (value instanceof Uint8Array) {\n    return BigInt(uint8ArrayToHex(value));\n  }\n\n  return BigInt(value);\n}\n\n// replaceBigInts courtesy of ponder.sh:\n// https://github.com/ponder-sh/ponder/blob/bc65b865898b6145e87031314192c59f9e8b621f/packages/utils/src/replaceBigInts.ts\ntype _ReplaceBigInts<\n  arr extends readonly unknown[],\n  type,\n  result extends readonly unknown[] = [],\n> = arr extends [infer first, ...infer rest]\n  ? _ReplaceBigInts<\n      rest,\n      type,\n      readonly [...result, first extends bigint ? type : first]\n    >\n  : result;\n\ntype ReplaceBigInts<obj, type> = obj extends bigint\n  ? type\n  : obj extends unknown[]\n    ? _ReplaceBigInts<Readonly<obj>, type>\n    : obj extends readonly []\n      ? _ReplaceBigInts<obj, type>\n      : obj extends object\n        ? { [key in keyof obj]: ReplaceBigInts<obj[key], type> }\n        : obj;\n\nexport const replaceBigInts = <const T, const type>(\n  obj: T,\n  replacer: (x: bigint) => type,\n): ReplaceBigInts<T, type> => {\n  if (typeof obj === \"bigint\") return replacer(obj) as ReplaceBigInts<T, type>;\n  if (Array.isArray(obj))\n    return obj.map((x) => replaceBigInts(x, replacer)) as ReplaceBigInts<\n      T,\n      type\n    >;\n  if (obj && typeof obj === \"object\")\n    return Object.fromEntries(\n      Object.entries(obj).map(([k, v]) => [k, replaceBigInts(v, replacer)]),\n    ) as ReplaceBigInts<T, type>;\n  return obj as ReplaceBigInts<T, type>;\n};\n"],
  "mappings": ";;;;;AAaM,SAAU,IAAI,GAAW,GAAS;AACtC,SAAO,IAAI,IAAI,IAAI;AACrB;AA0BM,SAAU,SAAS,OAA4C;AACnE,MACE,CAAC,UAAU,QAAQ,EAAE,SAAS,OAAO,KAAK,KAC1C,CAAC,OAAO,UAAU,OAAO,KAAK,CAAC,GAC/B;AACA,UAAM,IAAI,MACR,+DAA+D,KAAK,YAAY,OAAO,KAAK,EAAE;EAElG;AAEA,MAAI,iBAAiB,YAAY;AAC/B,WAAO,OAAO,gBAAgB,KAAK,CAAC;EACtC;AAEA,SAAO,OAAO,KAAK;AACrB;AA0BO,IAAM,iBAAiB,CAC5B,KACA,aAC2B;AAC3B,MAAI,OAAO,QAAQ;AAAU,WAAO,SAAS,GAAG;AAChD,MAAI,MAAM,QAAQ,GAAG;AACnB,WAAO,IAAI,IAAI,CAAC,MAAM,eAAe,GAAG,QAAQ,CAAC;AAInD,MAAI,OAAO,OAAO,QAAQ;AACxB,WAAO,OAAO,YACZ,OAAO,QAAQ,GAAG,EAAE,IAAI,CAAC,CAAC,GAAG,CAAC,MAAM,CAAC,GAAG,eAAe,GAAG,QAAQ,CAAC,CAAC,CAAC;AAEzE,SAAO;AACT;",
  "names": []
}

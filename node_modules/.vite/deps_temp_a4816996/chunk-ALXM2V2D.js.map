{
  "version": 3,
  "sources": ["../../thirdweb/src/storage/download.ts"],
  "sourcesContent": ["import { getClientFetch } from \"../utils/fetch.js\";\nimport { type ResolveSchemeOptions, resolveScheme } from \"../utils/ipfs.js\";\nimport { IS_TEST } from \"../utils/process.js\";\nimport type { Prettify } from \"../utils/type-utils.js\";\nimport { getFromMockStorage } from \"./mock.js\";\n\nexport type DownloadOptions = Prettify<\n  ResolveSchemeOptions & {\n    requestTimeoutMs?: number;\n  }\n>;\n\n/**\n * Downloads a file from the specified IPFS, Arweave, or HTTP URI.\n *\n * `download` will parse the provided URI based on its scheme (ipfs://, ar://, https://) and convert it to a URL to fetch the file from thirdweb's storage service.\n *\n * @param options - The download options.\n * @param options.client - The Thirdweb client. See [createThirdwebClient](https://portal.thirdweb.com/references/typescript/v5/createThirdwebClient).\n * @param options.uri - The URI of the file to download. Can be IPFS, Arweave, or HTTP.\n * @param [options.requestTimeoutMs] - The maximum time in milliseconds to wait for the request to complete. Defaults to 60 seconds (60,000 milliseconds).\n *\n * @returns Asynchronously returns the network response from fetching the file.\n * @throws An error if the URI scheme is invalid or if the request fails.\n *\n * @example\n * Download a file from IPFS:\n * ```ts\n * import { download } from \"thirdweb/storage\";\n * import { createThirdwebClient } from \"thirdweb\";\n *\n * const client = createThirdwebClient({ clientId: \"YOUR_CLIENT_ID\" });\n *\n * const file = await download({\n *  client,\n *  uri: \"ipfs://Qm...\",\n * });\n * ```\n *\n * Download a file from Arweave:\n * ```ts\n * import { download } from \"thirdweb/storage\";\n * import { createThirdwebClient } from \"thirdweb\";\n *\n * const client = createThirdwebClient({ clientId: \"YOUR_CLIENT_ID\" });\n *\n * const file = await download({\n *  client,\n *  uri: \"ar://{arweave-transaction-id}\",\n * });\n * ```\n *\n * Download a file from HTTP:\n * ```ts\n * import { download } from \"thirdweb/storage\";\n * import { createThirdwebClient } from \"thirdweb\";\n *\n * const client = createThirdwebClient({ clientId: \"YOUR_CLIENT_ID\" });\n *\n * const file = await download({\n *  client,\n *  uri: \"https://example.com/file.txt\",\n * });\n * ```\n *\n * @storage\n */\nexport async function download(options: DownloadOptions) {\n  if (IS_TEST) {\n    const hash = options.uri.split(\"://\")[1];\n    if (!hash) {\n      throw new Error(\"Invalid hash\");\n    }\n    const data = getFromMockStorage(hash);\n    if (data) {\n      return {\n        json: () => Promise.resolve(data),\n        ok: true,\n        status: 200,\n      } as Response;\n    }\n  }\n\n  let url: string;\n  if (options.uri.startsWith(\"ar://\")) {\n    const { resolveArweaveScheme } = await import(\"../utils/arweave.js\");\n    url = resolveArweaveScheme(options);\n  } else {\n    url = resolveScheme(options);\n  }\n\n  const res = await getClientFetch(options.client)(url, {\n    headers: options.client.config?.storage?.fetch?.headers,\n    keepalive: options.client.config?.storage?.fetch?.keepalive,\n    requestTimeoutMs:\n      options.requestTimeoutMs ??\n      options.client.config?.storage?.fetch?.requestTimeoutMs ??\n      60000,\n  });\n\n  if (!res.ok) {\n    const error = await res.text();\n    throw new Error(\n      `Failed to download file: ${res.status} ${res.statusText} ${error || \"\"}`,\n    );\n  }\n  return res;\n}\n"],
  "mappings": ";;;;;;;;;;;;AAmEA,eAAsB,SAAS,SAAwB;AAnEvD;AAoEE,MAAI,SAAS;AACX,UAAM,OAAO,QAAQ,IAAI,MAAM,KAAK,EAAE,CAAC;AACvC,QAAI,CAAC,MAAM;AACT,YAAM,IAAI,MAAM,cAAc;IAChC;AACA,UAAM,OAAO,mBAAmB,IAAI;AACpC,QAAI,MAAM;AACR,aAAO;QACL,MAAM,MAAM,QAAQ,QAAQ,IAAI;QAChC,IAAI;QACJ,QAAQ;;IAEZ;EACF;AAEA,MAAI;AACJ,MAAI,QAAQ,IAAI,WAAW,OAAO,GAAG;AACnC,UAAM,EAAE,qBAAoB,IAAK,MAAM,OAAO,uBAAqB;AACnE,UAAM,qBAAqB,OAAO;EACpC,OAAO;AACL,UAAM,cAAc,OAAO;EAC7B;AAEA,QAAM,MAAM,MAAM,eAAe,QAAQ,MAAM,EAAE,KAAK;IACpD,UAAS,yBAAQ,OAAO,WAAf,mBAAuB,YAAvB,mBAAgC,UAAhC,mBAAuC;IAChD,YAAW,yBAAQ,OAAO,WAAf,mBAAuB,YAAvB,mBAAgC,UAAhC,mBAAuC;IAClD,kBACE,QAAQ,sBACR,yBAAQ,OAAO,WAAf,mBAAuB,YAAvB,mBAAgC,UAAhC,mBAAuC,qBACvC;GACH;AAED,MAAI,CAAC,IAAI,IAAI;AACX,UAAM,QAAQ,MAAM,IAAI,KAAI;AAC5B,UAAM,IAAI,MACR,4BAA4B,IAAI,MAAM,IAAI,IAAI,UAAU,IAAI,SAAS,EAAE,EAAE;EAE7E;AACA,SAAO;AACT;",
  "names": []
}

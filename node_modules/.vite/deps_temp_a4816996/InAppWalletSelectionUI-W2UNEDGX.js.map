{
  "version": 3,
  "sources": ["../../thirdweb/src/react/web/wallets/in-app/InAppWalletSelectionUI.tsx"],
  "sourcesContent": ["\"use client\";\nimport type { Chain } from \"../../../../chains/types.js\";\nimport type { ThirdwebClient } from \"../../../../client/client.js\";\nimport type { Wallet } from \"../../../../wallets/interfaces/wallet.js\";\nimport { useSetSelectionData } from \"../../providers/wallet-ui-states-provider.js\";\nimport { reservedScreens } from \"../../ui/ConnectWallet/constants.js\";\nimport type { ConnectLocale } from \"../../ui/ConnectWallet/locale/types.js\";\nimport { useScreenContext } from \"../../ui/ConnectWallet/Modal/screen.js\";\nimport { WalletEntryButton } from \"../../ui/ConnectWallet/WalletEntryButton.js\";\nimport { ConnectWalletSocialOptions } from \"../shared/ConnectWalletSocialOptions.js\";\nimport { LoadingScreen } from \"../shared/LoadingScreen.js\";\nimport { useInAppWalletLocale } from \"./useInAppWalletLocale.js\";\n\n/**\n *\n * @internal\n */\nfunction InAppWalletSelectionUI(props: {\n  select: () => void;\n  wallet: Wallet<\"inApp\">;\n  done: () => void;\n  goBack?: () => void;\n  connectLocale: ConnectLocale;\n  client: ThirdwebClient;\n  recommendedWallets: Wallet[] | undefined;\n  chain: Chain | undefined;\n  size: \"compact\" | \"wide\";\n  // If true, all options will be disabled. Used for things like requiring TOS approval.\n  disabled?: boolean;\n}) {\n  const { screen } = useScreenContext();\n  const setData = useSetSelectionData();\n  const locale = useInAppWalletLocale(props.connectLocale.id);\n\n  // do not show the \"selectUI\" if\n  // modal is compact or\n  // it is being rendered in Safe wallet\n  if (\n    props.size === \"wide\" ||\n    (screen !== reservedScreens.main && props.size === \"compact\")\n  ) {\n    return (\n      <WalletEntryButton\n        badge={undefined}\n        client={props.client}\n        connectLocale={props.connectLocale}\n        isActive={screen === props.wallet}\n        recommendedWallets={props.recommendedWallets}\n        selectWallet={() => {\n          setData({});\n          props.select();\n        }}\n        wallet={props.wallet}\n      />\n    );\n  }\n\n  if (!locale) {\n    return <LoadingScreen height=\"195px\" />;\n  }\n\n  return (\n    <ConnectWalletSocialOptions\n      chain={props.chain}\n      client={props.client}\n      disabled={props.disabled}\n      done={props.done}\n      goBack={props.goBack}\n      locale={locale}\n      select={props.select}\n      size={props.size}\n      wallet={props.wallet}\n    />\n  );\n}\n\nexport default InAppWalletSelectionUI;\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiBA,SAAS,uBAAuB,OAY/B;AACC,QAAM,EAAE,OAAM,IAAK,iBAAgB;AACnC,QAAM,UAAU,oBAAmB;AACnC,QAAM,SAAS,qBAAqB,MAAM,cAAc,EAAE;AAK1D,MACE,MAAM,SAAS,UACd,WAAW,gBAAgB,QAAQ,MAAM,SAAS,WACnD;AACA,eACE,mBAAAA,KAAC,mBAAiB,EAChB,OAAO,QACP,QAAQ,MAAM,QACd,eAAe,MAAM,eACrB,UAAU,WAAW,MAAM,QAC3B,oBAAoB,MAAM,oBAC1B,cAAc,MAAK;AACjB,cAAQ,CAAA,CAAE;AACV,YAAM,OAAM;IACd,GACA,QAAQ,MAAM,OAAM,CAAA;EAG1B;AAEA,MAAI,CAAC,QAAQ;AACX,eAAO,mBAAAA,KAAC,eAAa,EAAC,QAAO,QAAO,CAAA;EACtC;AAEA,aACE,mBAAAA,KAAC,4BAA0B,EACzB,OAAO,MAAM,OACb,QAAQ,MAAM,QACd,UAAU,MAAM,UAChB,MAAM,MAAM,MACZ,QAAQ,MAAM,QACd,QACA,QAAQ,MAAM,QACd,MAAM,MAAM,MACZ,QAAQ,MAAM,OAAM,CAAA;AAG1B;AAEA,IAAA,iCAAe;",
  "names": ["_jsx"]
}

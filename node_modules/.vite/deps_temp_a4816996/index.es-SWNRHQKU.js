import {
  Chi,
  HashMD,
  Maj
} from "./chunk-OMHDK36G.js";
import {
  BaseError,
  LruMap,
  checksumAddress,
  concat,
  defineFormatter,
  from,
  fromBoolean,
  fromBytes,
  fromNumber,
  fromString,
  fromString2,
  hexToBigInt,
  hexToNumber,
  isHex,
  keccak256,
  keccak_256,
  numberToHex,
  padLeft,
  padRight,
  size,
  size2,
  toHex
} from "./chunk-IKEUMQOO.js";
import {
  clean,
  createHasher,
  rotl
} from "./chunk-6GOASCKB.js";
import {
  A,
  C,
  E,
  IEvents,
  Po,
  Qe,
  Qo,
  bases,
  detect,
  esm_default,
  esm_exports,
  f,
  formatJsonRpcError,
  formatJsonRpcRequest,
  formatJsonRpcResult,
  getBigIntRpcId,
  h,
  i,
  import_pino,
  isHttpUrl,
  isJsonRpcError,
  isJsonRpcRequest,
  isJsonRpcResponse,
  isJsonRpcResult,
  k,
  o,
  parseConnectionError,
  payloadId,
  r,
  require_cjs,
  require_cjs2,
  require_cjs3,
  require_events,
  safeJsonParse,
  safeJsonStringify,
  sn,
  y
} from "./chunk-2BPWCJWN.js";
import {
  base32
} from "./chunk-AL7AZVTW.js";
import "./chunk-HXWRQBIO.js";
import {
  __commonJS,
  __toESM
} from "./chunk-5JRVV4XU.js";

// node_modules/blakejs/util.js
var require_util = __commonJS({
  "node_modules/blakejs/util.js"(exports, module) {
    var ERROR_MSG_INPUT = "Input must be an string, Buffer or Uint8Array";
    function normalizeInput(input) {
      let ret;
      if (input instanceof Uint8Array) {
        ret = input;
      } else if (typeof input === "string") {
        const encoder = new TextEncoder();
        ret = encoder.encode(input);
      } else {
        throw new Error(ERROR_MSG_INPUT);
      }
      return ret;
    }
    function toHex3(bytes) {
      return Array.prototype.map.call(bytes, function(n2) {
        return (n2 < 16 ? "0" : "") + n2.toString(16);
      }).join("");
    }
    function uint32ToHex(val) {
      return (4294967296 + val).toString(16).substring(1);
    }
    function debugPrint(label, arr, size4) {
      let msg = "\n" + label + " = ";
      for (let i3 = 0; i3 < arr.length; i3 += 2) {
        if (size4 === 32) {
          msg += uint32ToHex(arr[i3]).toUpperCase();
          msg += " ";
          msg += uint32ToHex(arr[i3 + 1]).toUpperCase();
        } else if (size4 === 64) {
          msg += uint32ToHex(arr[i3 + 1]).toUpperCase();
          msg += uint32ToHex(arr[i3]).toUpperCase();
        } else throw new Error("Invalid size " + size4);
        if (i3 % 6 === 4) {
          msg += "\n" + new Array(label.length + 4).join(" ");
        } else if (i3 < arr.length - 2) {
          msg += " ";
        }
      }
      console.log(msg);
    }
    function testSpeed(hashFn, N4, M5) {
      let startMs = (/* @__PURE__ */ new Date()).getTime();
      const input = new Uint8Array(N4);
      for (let i3 = 0; i3 < N4; i3++) {
        input[i3] = i3 % 256;
      }
      const genMs = (/* @__PURE__ */ new Date()).getTime();
      console.log("Generated random input in " + (genMs - startMs) + "ms");
      startMs = genMs;
      for (let i3 = 0; i3 < M5; i3++) {
        const hashHex = hashFn(input);
        const hashMs = (/* @__PURE__ */ new Date()).getTime();
        const ms3 = hashMs - startMs;
        startMs = hashMs;
        console.log("Hashed in " + ms3 + "ms: " + hashHex.substring(0, 20) + "...");
        console.log(
          Math.round(N4 / (1 << 20) / (ms3 / 1e3) * 100) / 100 + " MB PER SECOND"
        );
      }
    }
    module.exports = {
      normalizeInput,
      toHex: toHex3,
      debugPrint,
      testSpeed
    };
  }
});

// node_modules/blakejs/blake2b.js
var require_blake2b = __commonJS({
  "node_modules/blakejs/blake2b.js"(exports, module) {
    var util = require_util();
    function ADD64AA(v5, a2, b3) {
      const o0 = v5[a2] + v5[b3];
      let o1 = v5[a2 + 1] + v5[b3 + 1];
      if (o0 >= 4294967296) {
        o1++;
      }
      v5[a2] = o0;
      v5[a2 + 1] = o1;
    }
    function ADD64AC(v5, a2, b0, b1) {
      let o0 = v5[a2] + b0;
      if (b0 < 0) {
        o0 += 4294967296;
      }
      let o1 = v5[a2 + 1] + b1;
      if (o0 >= 4294967296) {
        o1++;
      }
      v5[a2] = o0;
      v5[a2 + 1] = o1;
    }
    function B2B_GET32(arr, i3) {
      return arr[i3] ^ arr[i3 + 1] << 8 ^ arr[i3 + 2] << 16 ^ arr[i3 + 3] << 24;
    }
    function B2B_G(a2, b3, c4, d3, ix, iy) {
      const x0 = m3[ix];
      const x1 = m3[ix + 1];
      const y0 = m3[iy];
      const y1 = m3[iy + 1];
      ADD64AA(v4, a2, b3);
      ADD64AC(v4, a2, x0, x1);
      let xor0 = v4[d3] ^ v4[a2];
      let xor1 = v4[d3 + 1] ^ v4[a2 + 1];
      v4[d3] = xor1;
      v4[d3 + 1] = xor0;
      ADD64AA(v4, c4, d3);
      xor0 = v4[b3] ^ v4[c4];
      xor1 = v4[b3 + 1] ^ v4[c4 + 1];
      v4[b3] = xor0 >>> 24 ^ xor1 << 8;
      v4[b3 + 1] = xor1 >>> 24 ^ xor0 << 8;
      ADD64AA(v4, a2, b3);
      ADD64AC(v4, a2, y0, y1);
      xor0 = v4[d3] ^ v4[a2];
      xor1 = v4[d3 + 1] ^ v4[a2 + 1];
      v4[d3] = xor0 >>> 16 ^ xor1 << 16;
      v4[d3 + 1] = xor1 >>> 16 ^ xor0 << 16;
      ADD64AA(v4, c4, d3);
      xor0 = v4[b3] ^ v4[c4];
      xor1 = v4[b3 + 1] ^ v4[c4 + 1];
      v4[b3] = xor1 >>> 31 ^ xor0 << 1;
      v4[b3 + 1] = xor0 >>> 31 ^ xor1 << 1;
    }
    var BLAKE2B_IV32 = new Uint32Array([
      4089235720,
      1779033703,
      2227873595,
      3144134277,
      4271175723,
      1013904242,
      1595750129,
      2773480762,
      2917565137,
      1359893119,
      725511199,
      2600822924,
      4215389547,
      528734635,
      327033209,
      1541459225
    ]);
    var SIGMA8 = [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9,
      10,
      11,
      12,
      13,
      14,
      15,
      14,
      10,
      4,
      8,
      9,
      15,
      13,
      6,
      1,
      12,
      0,
      2,
      11,
      7,
      5,
      3,
      11,
      8,
      12,
      0,
      5,
      2,
      15,
      13,
      10,
      14,
      3,
      6,
      7,
      1,
      9,
      4,
      7,
      9,
      3,
      1,
      13,
      12,
      11,
      14,
      2,
      6,
      5,
      10,
      4,
      0,
      15,
      8,
      9,
      0,
      5,
      7,
      2,
      4,
      10,
      15,
      14,
      1,
      11,
      12,
      6,
      8,
      3,
      13,
      2,
      12,
      6,
      10,
      0,
      11,
      8,
      3,
      4,
      13,
      7,
      5,
      15,
      14,
      1,
      9,
      12,
      5,
      1,
      15,
      14,
      13,
      4,
      10,
      0,
      7,
      6,
      3,
      9,
      2,
      8,
      11,
      13,
      11,
      7,
      14,
      12,
      1,
      3,
      9,
      5,
      0,
      15,
      4,
      8,
      6,
      2,
      10,
      6,
      15,
      14,
      9,
      11,
      3,
      0,
      8,
      12,
      2,
      13,
      7,
      1,
      4,
      10,
      5,
      10,
      2,
      8,
      4,
      7,
      6,
      1,
      5,
      15,
      11,
      9,
      14,
      3,
      12,
      13,
      0,
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9,
      10,
      11,
      12,
      13,
      14,
      15,
      14,
      10,
      4,
      8,
      9,
      15,
      13,
      6,
      1,
      12,
      0,
      2,
      11,
      7,
      5,
      3
    ];
    var SIGMA82 = new Uint8Array(
      SIGMA8.map(function(x3) {
        return x3 * 2;
      })
    );
    var v4 = new Uint32Array(32);
    var m3 = new Uint32Array(32);
    function blake2bCompress(ctx, last) {
      let i3 = 0;
      for (i3 = 0; i3 < 16; i3++) {
        v4[i3] = ctx.h[i3];
        v4[i3 + 16] = BLAKE2B_IV32[i3];
      }
      v4[24] = v4[24] ^ ctx.t;
      v4[25] = v4[25] ^ ctx.t / 4294967296;
      if (last) {
        v4[28] = ~v4[28];
        v4[29] = ~v4[29];
      }
      for (i3 = 0; i3 < 32; i3++) {
        m3[i3] = B2B_GET32(ctx.b, 4 * i3);
      }
      for (i3 = 0; i3 < 12; i3++) {
        B2B_G(0, 8, 16, 24, SIGMA82[i3 * 16 + 0], SIGMA82[i3 * 16 + 1]);
        B2B_G(2, 10, 18, 26, SIGMA82[i3 * 16 + 2], SIGMA82[i3 * 16 + 3]);
        B2B_G(4, 12, 20, 28, SIGMA82[i3 * 16 + 4], SIGMA82[i3 * 16 + 5]);
        B2B_G(6, 14, 22, 30, SIGMA82[i3 * 16 + 6], SIGMA82[i3 * 16 + 7]);
        B2B_G(0, 10, 20, 30, SIGMA82[i3 * 16 + 8], SIGMA82[i3 * 16 + 9]);
        B2B_G(2, 12, 22, 24, SIGMA82[i3 * 16 + 10], SIGMA82[i3 * 16 + 11]);
        B2B_G(4, 14, 16, 26, SIGMA82[i3 * 16 + 12], SIGMA82[i3 * 16 + 13]);
        B2B_G(6, 8, 18, 28, SIGMA82[i3 * 16 + 14], SIGMA82[i3 * 16 + 15]);
      }
      for (i3 = 0; i3 < 16; i3++) {
        ctx.h[i3] = ctx.h[i3] ^ v4[i3] ^ v4[i3 + 16];
      }
    }
    var parameterBlock = new Uint8Array([
      0,
      0,
      0,
      0,
      //  0: outlen, keylen, fanout, depth
      0,
      0,
      0,
      0,
      //  4: leaf length, sequential mode
      0,
      0,
      0,
      0,
      //  8: node offset
      0,
      0,
      0,
      0,
      // 12: node offset
      0,
      0,
      0,
      0,
      // 16: node depth, inner length, rfu
      0,
      0,
      0,
      0,
      // 20: rfu
      0,
      0,
      0,
      0,
      // 24: rfu
      0,
      0,
      0,
      0,
      // 28: rfu
      0,
      0,
      0,
      0,
      // 32: salt
      0,
      0,
      0,
      0,
      // 36: salt
      0,
      0,
      0,
      0,
      // 40: salt
      0,
      0,
      0,
      0,
      // 44: salt
      0,
      0,
      0,
      0,
      // 48: personal
      0,
      0,
      0,
      0,
      // 52: personal
      0,
      0,
      0,
      0,
      // 56: personal
      0,
      0,
      0,
      0
      // 60: personal
    ]);
    function blake2bInit(outlen, key, salt, personal) {
      if (outlen === 0 || outlen > 64) {
        throw new Error("Illegal output length, expected 0 < length <= 64");
      }
      if (key && key.length > 64) {
        throw new Error("Illegal key, expected Uint8Array with 0 < length <= 64");
      }
      if (salt && salt.length !== 16) {
        throw new Error("Illegal salt, expected Uint8Array with length is 16");
      }
      if (personal && personal.length !== 16) {
        throw new Error("Illegal personal, expected Uint8Array with length is 16");
      }
      const ctx = {
        b: new Uint8Array(128),
        h: new Uint32Array(16),
        t: 0,
        // input count
        c: 0,
        // pointer within buffer
        outlen
        // output length in bytes
      };
      parameterBlock.fill(0);
      parameterBlock[0] = outlen;
      if (key) parameterBlock[1] = key.length;
      parameterBlock[2] = 1;
      parameterBlock[3] = 1;
      if (salt) parameterBlock.set(salt, 32);
      if (personal) parameterBlock.set(personal, 48);
      for (let i3 = 0; i3 < 16; i3++) {
        ctx.h[i3] = BLAKE2B_IV32[i3] ^ B2B_GET32(parameterBlock, i3 * 4);
      }
      if (key) {
        blake2bUpdate(ctx, key);
        ctx.c = 128;
      }
      return ctx;
    }
    function blake2bUpdate(ctx, input) {
      for (let i3 = 0; i3 < input.length; i3++) {
        if (ctx.c === 128) {
          ctx.t += ctx.c;
          blake2bCompress(ctx, false);
          ctx.c = 0;
        }
        ctx.b[ctx.c++] = input[i3];
      }
    }
    function blake2bFinal(ctx) {
      ctx.t += ctx.c;
      while (ctx.c < 128) {
        ctx.b[ctx.c++] = 0;
      }
      blake2bCompress(ctx, true);
      const out = new Uint8Array(ctx.outlen);
      for (let i3 = 0; i3 < ctx.outlen; i3++) {
        out[i3] = ctx.h[i3 >> 2] >> 8 * (i3 & 3);
      }
      return out;
    }
    function blake2b(input, key, outlen, salt, personal) {
      outlen = outlen || 64;
      input = util.normalizeInput(input);
      if (salt) {
        salt = util.normalizeInput(salt);
      }
      if (personal) {
        personal = util.normalizeInput(personal);
      }
      const ctx = blake2bInit(outlen, key, salt, personal);
      blake2bUpdate(ctx, input);
      return blake2bFinal(ctx);
    }
    function blake2bHex(input, key, outlen, salt, personal) {
      const output = blake2b(input, key, outlen, salt, personal);
      return util.toHex(output);
    }
    module.exports = {
      blake2b,
      blake2bHex,
      blake2bInit,
      blake2bUpdate,
      blake2bFinal
    };
  }
});

// node_modules/blakejs/blake2s.js
var require_blake2s = __commonJS({
  "node_modules/blakejs/blake2s.js"(exports, module) {
    var util = require_util();
    function B2S_GET32(v5, i3) {
      return v5[i3] ^ v5[i3 + 1] << 8 ^ v5[i3 + 2] << 16 ^ v5[i3 + 3] << 24;
    }
    function B2S_G(a2, b3, c4, d3, x3, y5) {
      v4[a2] = v4[a2] + v4[b3] + x3;
      v4[d3] = ROTR32(v4[d3] ^ v4[a2], 16);
      v4[c4] = v4[c4] + v4[d3];
      v4[b3] = ROTR32(v4[b3] ^ v4[c4], 12);
      v4[a2] = v4[a2] + v4[b3] + y5;
      v4[d3] = ROTR32(v4[d3] ^ v4[a2], 8);
      v4[c4] = v4[c4] + v4[d3];
      v4[b3] = ROTR32(v4[b3] ^ v4[c4], 7);
    }
    function ROTR32(x3, y5) {
      return x3 >>> y5 ^ x3 << 32 - y5;
    }
    var BLAKE2S_IV = new Uint32Array([
      1779033703,
      3144134277,
      1013904242,
      2773480762,
      1359893119,
      2600822924,
      528734635,
      1541459225
    ]);
    var SIGMA = new Uint8Array([
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9,
      10,
      11,
      12,
      13,
      14,
      15,
      14,
      10,
      4,
      8,
      9,
      15,
      13,
      6,
      1,
      12,
      0,
      2,
      11,
      7,
      5,
      3,
      11,
      8,
      12,
      0,
      5,
      2,
      15,
      13,
      10,
      14,
      3,
      6,
      7,
      1,
      9,
      4,
      7,
      9,
      3,
      1,
      13,
      12,
      11,
      14,
      2,
      6,
      5,
      10,
      4,
      0,
      15,
      8,
      9,
      0,
      5,
      7,
      2,
      4,
      10,
      15,
      14,
      1,
      11,
      12,
      6,
      8,
      3,
      13,
      2,
      12,
      6,
      10,
      0,
      11,
      8,
      3,
      4,
      13,
      7,
      5,
      15,
      14,
      1,
      9,
      12,
      5,
      1,
      15,
      14,
      13,
      4,
      10,
      0,
      7,
      6,
      3,
      9,
      2,
      8,
      11,
      13,
      11,
      7,
      14,
      12,
      1,
      3,
      9,
      5,
      0,
      15,
      4,
      8,
      6,
      2,
      10,
      6,
      15,
      14,
      9,
      11,
      3,
      0,
      8,
      12,
      2,
      13,
      7,
      1,
      4,
      10,
      5,
      10,
      2,
      8,
      4,
      7,
      6,
      1,
      5,
      15,
      11,
      9,
      14,
      3,
      12,
      13,
      0
    ]);
    var v4 = new Uint32Array(16);
    var m3 = new Uint32Array(16);
    function blake2sCompress(ctx, last) {
      let i3 = 0;
      for (i3 = 0; i3 < 8; i3++) {
        v4[i3] = ctx.h[i3];
        v4[i3 + 8] = BLAKE2S_IV[i3];
      }
      v4[12] ^= ctx.t;
      v4[13] ^= ctx.t / 4294967296;
      if (last) {
        v4[14] = ~v4[14];
      }
      for (i3 = 0; i3 < 16; i3++) {
        m3[i3] = B2S_GET32(ctx.b, 4 * i3);
      }
      for (i3 = 0; i3 < 10; i3++) {
        B2S_G(0, 4, 8, 12, m3[SIGMA[i3 * 16 + 0]], m3[SIGMA[i3 * 16 + 1]]);
        B2S_G(1, 5, 9, 13, m3[SIGMA[i3 * 16 + 2]], m3[SIGMA[i3 * 16 + 3]]);
        B2S_G(2, 6, 10, 14, m3[SIGMA[i3 * 16 + 4]], m3[SIGMA[i3 * 16 + 5]]);
        B2S_G(3, 7, 11, 15, m3[SIGMA[i3 * 16 + 6]], m3[SIGMA[i3 * 16 + 7]]);
        B2S_G(0, 5, 10, 15, m3[SIGMA[i3 * 16 + 8]], m3[SIGMA[i3 * 16 + 9]]);
        B2S_G(1, 6, 11, 12, m3[SIGMA[i3 * 16 + 10]], m3[SIGMA[i3 * 16 + 11]]);
        B2S_G(2, 7, 8, 13, m3[SIGMA[i3 * 16 + 12]], m3[SIGMA[i3 * 16 + 13]]);
        B2S_G(3, 4, 9, 14, m3[SIGMA[i3 * 16 + 14]], m3[SIGMA[i3 * 16 + 15]]);
      }
      for (i3 = 0; i3 < 8; i3++) {
        ctx.h[i3] ^= v4[i3] ^ v4[i3 + 8];
      }
    }
    function blake2sInit(outlen, key) {
      if (!(outlen > 0 && outlen <= 32)) {
        throw new Error("Incorrect output length, should be in [1, 32]");
      }
      const keylen = key ? key.length : 0;
      if (key && !(keylen > 0 && keylen <= 32)) {
        throw new Error("Incorrect key length, should be in [1, 32]");
      }
      const ctx = {
        h: new Uint32Array(BLAKE2S_IV),
        // hash state
        b: new Uint8Array(64),
        // input block
        c: 0,
        // pointer within block
        t: 0,
        // input count
        outlen
        // output length in bytes
      };
      ctx.h[0] ^= 16842752 ^ keylen << 8 ^ outlen;
      if (keylen > 0) {
        blake2sUpdate(ctx, key);
        ctx.c = 64;
      }
      return ctx;
    }
    function blake2sUpdate(ctx, input) {
      for (let i3 = 0; i3 < input.length; i3++) {
        if (ctx.c === 64) {
          ctx.t += ctx.c;
          blake2sCompress(ctx, false);
          ctx.c = 0;
        }
        ctx.b[ctx.c++] = input[i3];
      }
    }
    function blake2sFinal(ctx) {
      ctx.t += ctx.c;
      while (ctx.c < 64) {
        ctx.b[ctx.c++] = 0;
      }
      blake2sCompress(ctx, true);
      const out = new Uint8Array(ctx.outlen);
      for (let i3 = 0; i3 < ctx.outlen; i3++) {
        out[i3] = ctx.h[i3 >> 2] >> 8 * (i3 & 3) & 255;
      }
      return out;
    }
    function blake2s(input, key, outlen) {
      outlen = outlen || 32;
      input = util.normalizeInput(input);
      const ctx = blake2sInit(outlen, key);
      blake2sUpdate(ctx, input);
      return blake2sFinal(ctx);
    }
    function blake2sHex(input, key, outlen) {
      const output = blake2s(input, key, outlen);
      return util.toHex(output);
    }
    module.exports = {
      blake2s,
      blake2sHex,
      blake2sInit,
      blake2sUpdate,
      blake2sFinal
    };
  }
});

// node_modules/blakejs/index.js
var require_blakejs = __commonJS({
  "node_modules/blakejs/index.js"(exports, module) {
    var b2b = require_blake2b();
    var b2s = require_blake2s();
    module.exports = {
      blake2b: b2b.blake2b,
      blake2bHex: b2b.blake2bHex,
      blake2bInit: b2b.blake2bInit,
      blake2bUpdate: b2b.blake2bUpdate,
      blake2bFinal: b2b.blake2bFinal,
      blake2s: b2s.blake2s,
      blake2sHex: b2s.blake2sHex,
      blake2sInit: b2s.blake2sInit,
      blake2sUpdate: b2s.blake2sUpdate,
      blake2sFinal: b2s.blake2sFinal
    };
  }
});

// node_modules/cross-fetch/dist/browser-ponyfill.js
var require_browser_ponyfill = __commonJS({
  "node_modules/cross-fetch/dist/browser-ponyfill.js"(exports, module) {
    var __global__ = typeof globalThis !== "undefined" && globalThis || typeof self !== "undefined" && self || typeof global !== "undefined" && global;
    var __globalThis__ = function() {
      function F3() {
        this.fetch = false;
        this.DOMException = __global__.DOMException;
      }
      F3.prototype = __global__;
      return new F3();
    }();
    (function(globalThis2) {
      var irrelevant = function(exports2) {
        var g2 = typeof globalThis2 !== "undefined" && globalThis2 || typeof self !== "undefined" && self || // eslint-disable-next-line no-undef
        typeof global !== "undefined" && global || {};
        var support = {
          searchParams: "URLSearchParams" in g2,
          iterable: "Symbol" in g2 && "iterator" in Symbol,
          blob: "FileReader" in g2 && "Blob" in g2 && function() {
            try {
              new Blob();
              return true;
            } catch (e) {
              return false;
            }
          }(),
          formData: "FormData" in g2,
          arrayBuffer: "ArrayBuffer" in g2
        };
        function isDataView(obj) {
          return obj && DataView.prototype.isPrototypeOf(obj);
        }
        if (support.arrayBuffer) {
          var viewClasses = [
            "[object Int8Array]",
            "[object Uint8Array]",
            "[object Uint8ClampedArray]",
            "[object Int16Array]",
            "[object Uint16Array]",
            "[object Int32Array]",
            "[object Uint32Array]",
            "[object Float32Array]",
            "[object Float64Array]"
          ];
          var isArrayBufferView = ArrayBuffer.isView || function(obj) {
            return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1;
          };
        }
        function normalizeName(name) {
          if (typeof name !== "string") {
            name = String(name);
          }
          if (/[^a-z0-9\-#$%&'*+.^_`|~!]/i.test(name) || name === "") {
            throw new TypeError('Invalid character in header field name: "' + name + '"');
          }
          return name.toLowerCase();
        }
        function normalizeValue(value) {
          if (typeof value !== "string") {
            value = String(value);
          }
          return value;
        }
        function iteratorFor(items) {
          var iterator = {
            next: function() {
              var value = items.shift();
              return { done: value === void 0, value };
            }
          };
          if (support.iterable) {
            iterator[Symbol.iterator] = function() {
              return iterator;
            };
          }
          return iterator;
        }
        function Headers(headers) {
          this.map = {};
          if (headers instanceof Headers) {
            headers.forEach(function(value, name) {
              this.append(name, value);
            }, this);
          } else if (Array.isArray(headers)) {
            headers.forEach(function(header) {
              if (header.length != 2) {
                throw new TypeError("Headers constructor: expected name/value pair to be length 2, found" + header.length);
              }
              this.append(header[0], header[1]);
            }, this);
          } else if (headers) {
            Object.getOwnPropertyNames(headers).forEach(function(name) {
              this.append(name, headers[name]);
            }, this);
          }
        }
        Headers.prototype.append = function(name, value) {
          name = normalizeName(name);
          value = normalizeValue(value);
          var oldValue = this.map[name];
          this.map[name] = oldValue ? oldValue + ", " + value : value;
        };
        Headers.prototype["delete"] = function(name) {
          delete this.map[normalizeName(name)];
        };
        Headers.prototype.get = function(name) {
          name = normalizeName(name);
          return this.has(name) ? this.map[name] : null;
        };
        Headers.prototype.has = function(name) {
          return this.map.hasOwnProperty(normalizeName(name));
        };
        Headers.prototype.set = function(name, value) {
          this.map[normalizeName(name)] = normalizeValue(value);
        };
        Headers.prototype.forEach = function(callback, thisArg) {
          for (var name in this.map) {
            if (this.map.hasOwnProperty(name)) {
              callback.call(thisArg, this.map[name], name, this);
            }
          }
        };
        Headers.prototype.keys = function() {
          var items = [];
          this.forEach(function(value, name) {
            items.push(name);
          });
          return iteratorFor(items);
        };
        Headers.prototype.values = function() {
          var items = [];
          this.forEach(function(value) {
            items.push(value);
          });
          return iteratorFor(items);
        };
        Headers.prototype.entries = function() {
          var items = [];
          this.forEach(function(value, name) {
            items.push([name, value]);
          });
          return iteratorFor(items);
        };
        if (support.iterable) {
          Headers.prototype[Symbol.iterator] = Headers.prototype.entries;
        }
        function consumed(body) {
          if (body._noBody) return;
          if (body.bodyUsed) {
            return Promise.reject(new TypeError("Already read"));
          }
          body.bodyUsed = true;
        }
        function fileReaderReady(reader) {
          return new Promise(function(resolve, reject) {
            reader.onload = function() {
              resolve(reader.result);
            };
            reader.onerror = function() {
              reject(reader.error);
            };
          });
        }
        function readBlobAsArrayBuffer(blob) {
          var reader = new FileReader();
          var promise = fileReaderReady(reader);
          reader.readAsArrayBuffer(blob);
          return promise;
        }
        function readBlobAsText(blob) {
          var reader = new FileReader();
          var promise = fileReaderReady(reader);
          var match = /charset=([A-Za-z0-9_-]+)/.exec(blob.type);
          var encoding = match ? match[1] : "utf-8";
          reader.readAsText(blob, encoding);
          return promise;
        }
        function readArrayBufferAsText(buf) {
          var view = new Uint8Array(buf);
          var chars = new Array(view.length);
          for (var i3 = 0; i3 < view.length; i3++) {
            chars[i3] = String.fromCharCode(view[i3]);
          }
          return chars.join("");
        }
        function bufferClone(buf) {
          if (buf.slice) {
            return buf.slice(0);
          } else {
            var view = new Uint8Array(buf.byteLength);
            view.set(new Uint8Array(buf));
            return view.buffer;
          }
        }
        function Body() {
          this.bodyUsed = false;
          this._initBody = function(body) {
            this.bodyUsed = this.bodyUsed;
            this._bodyInit = body;
            if (!body) {
              this._noBody = true;
              this._bodyText = "";
            } else if (typeof body === "string") {
              this._bodyText = body;
            } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {
              this._bodyBlob = body;
            } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {
              this._bodyFormData = body;
            } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
              this._bodyText = body.toString();
            } else if (support.arrayBuffer && support.blob && isDataView(body)) {
              this._bodyArrayBuffer = bufferClone(body.buffer);
              this._bodyInit = new Blob([this._bodyArrayBuffer]);
            } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {
              this._bodyArrayBuffer = bufferClone(body);
            } else {
              this._bodyText = body = Object.prototype.toString.call(body);
            }
            if (!this.headers.get("content-type")) {
              if (typeof body === "string") {
                this.headers.set("content-type", "text/plain;charset=UTF-8");
              } else if (this._bodyBlob && this._bodyBlob.type) {
                this.headers.set("content-type", this._bodyBlob.type);
              } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
                this.headers.set("content-type", "application/x-www-form-urlencoded;charset=UTF-8");
              }
            }
          };
          if (support.blob) {
            this.blob = function() {
              var rejected = consumed(this);
              if (rejected) {
                return rejected;
              }
              if (this._bodyBlob) {
                return Promise.resolve(this._bodyBlob);
              } else if (this._bodyArrayBuffer) {
                return Promise.resolve(new Blob([this._bodyArrayBuffer]));
              } else if (this._bodyFormData) {
                throw new Error("could not read FormData body as blob");
              } else {
                return Promise.resolve(new Blob([this._bodyText]));
              }
            };
          }
          this.arrayBuffer = function() {
            if (this._bodyArrayBuffer) {
              var isConsumed = consumed(this);
              if (isConsumed) {
                return isConsumed;
              } else if (ArrayBuffer.isView(this._bodyArrayBuffer)) {
                return Promise.resolve(
                  this._bodyArrayBuffer.buffer.slice(
                    this._bodyArrayBuffer.byteOffset,
                    this._bodyArrayBuffer.byteOffset + this._bodyArrayBuffer.byteLength
                  )
                );
              } else {
                return Promise.resolve(this._bodyArrayBuffer);
              }
            } else if (support.blob) {
              return this.blob().then(readBlobAsArrayBuffer);
            } else {
              throw new Error("could not read as ArrayBuffer");
            }
          };
          this.text = function() {
            var rejected = consumed(this);
            if (rejected) {
              return rejected;
            }
            if (this._bodyBlob) {
              return readBlobAsText(this._bodyBlob);
            } else if (this._bodyArrayBuffer) {
              return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer));
            } else if (this._bodyFormData) {
              throw new Error("could not read FormData body as text");
            } else {
              return Promise.resolve(this._bodyText);
            }
          };
          if (support.formData) {
            this.formData = function() {
              return this.text().then(decode3);
            };
          }
          this.json = function() {
            return this.text().then(JSON.parse);
          };
          return this;
        }
        var methods = ["CONNECT", "DELETE", "GET", "HEAD", "OPTIONS", "PATCH", "POST", "PUT", "TRACE"];
        function normalizeMethod(method) {
          var upcased = method.toUpperCase();
          return methods.indexOf(upcased) > -1 ? upcased : method;
        }
        function Request2(input, options) {
          if (!(this instanceof Request2)) {
            throw new TypeError('Please use the "new" operator, this DOM object constructor cannot be called as a function.');
          }
          options = options || {};
          var body = options.body;
          if (input instanceof Request2) {
            if (input.bodyUsed) {
              throw new TypeError("Already read");
            }
            this.url = input.url;
            this.credentials = input.credentials;
            if (!options.headers) {
              this.headers = new Headers(input.headers);
            }
            this.method = input.method;
            this.mode = input.mode;
            this.signal = input.signal;
            if (!body && input._bodyInit != null) {
              body = input._bodyInit;
              input.bodyUsed = true;
            }
          } else {
            this.url = String(input);
          }
          this.credentials = options.credentials || this.credentials || "same-origin";
          if (options.headers || !this.headers) {
            this.headers = new Headers(options.headers);
          }
          this.method = normalizeMethod(options.method || this.method || "GET");
          this.mode = options.mode || this.mode || null;
          this.signal = options.signal || this.signal || function() {
            if ("AbortController" in g2) {
              var ctrl = new AbortController();
              return ctrl.signal;
            }
          }();
          this.referrer = null;
          if ((this.method === "GET" || this.method === "HEAD") && body) {
            throw new TypeError("Body not allowed for GET or HEAD requests");
          }
          this._initBody(body);
          if (this.method === "GET" || this.method === "HEAD") {
            if (options.cache === "no-store" || options.cache === "no-cache") {
              var reParamSearch = /([?&])_=[^&]*/;
              if (reParamSearch.test(this.url)) {
                this.url = this.url.replace(reParamSearch, "$1_=" + (/* @__PURE__ */ new Date()).getTime());
              } else {
                var reQueryString = /\?/;
                this.url += (reQueryString.test(this.url) ? "&" : "?") + "_=" + (/* @__PURE__ */ new Date()).getTime();
              }
            }
          }
        }
        Request2.prototype.clone = function() {
          return new Request2(this, { body: this._bodyInit });
        };
        function decode3(body) {
          var form = new FormData();
          body.trim().split("&").forEach(function(bytes) {
            if (bytes) {
              var split = bytes.split("=");
              var name = split.shift().replace(/\+/g, " ");
              var value = split.join("=").replace(/\+/g, " ");
              form.append(decodeURIComponent(name), decodeURIComponent(value));
            }
          });
          return form;
        }
        function parseHeaders(rawHeaders) {
          var headers = new Headers();
          var preProcessedHeaders = rawHeaders.replace(/\r?\n[\t ]+/g, " ");
          preProcessedHeaders.split("\r").map(function(header) {
            return header.indexOf("\n") === 0 ? header.substr(1, header.length) : header;
          }).forEach(function(line) {
            var parts = line.split(":");
            var key = parts.shift().trim();
            if (key) {
              var value = parts.join(":").trim();
              try {
                headers.append(key, value);
              } catch (error) {
                console.warn("Response " + error.message);
              }
            }
          });
          return headers;
        }
        Body.call(Request2.prototype);
        function Response(bodyInit, options) {
          if (!(this instanceof Response)) {
            throw new TypeError('Please use the "new" operator, this DOM object constructor cannot be called as a function.');
          }
          if (!options) {
            options = {};
          }
          this.type = "default";
          this.status = options.status === void 0 ? 200 : options.status;
          if (this.status < 200 || this.status > 599) {
            throw new RangeError("Failed to construct 'Response': The status provided (0) is outside the range [200, 599].");
          }
          this.ok = this.status >= 200 && this.status < 300;
          this.statusText = options.statusText === void 0 ? "" : "" + options.statusText;
          this.headers = new Headers(options.headers);
          this.url = options.url || "";
          this._initBody(bodyInit);
        }
        Body.call(Response.prototype);
        Response.prototype.clone = function() {
          return new Response(this._bodyInit, {
            status: this.status,
            statusText: this.statusText,
            headers: new Headers(this.headers),
            url: this.url
          });
        };
        Response.error = function() {
          var response = new Response(null, { status: 200, statusText: "" });
          response.ok = false;
          response.status = 0;
          response.type = "error";
          return response;
        };
        var redirectStatuses = [301, 302, 303, 307, 308];
        Response.redirect = function(url, status) {
          if (redirectStatuses.indexOf(status) === -1) {
            throw new RangeError("Invalid status code");
          }
          return new Response(null, { status, headers: { location: url } });
        };
        exports2.DOMException = g2.DOMException;
        try {
          new exports2.DOMException();
        } catch (err) {
          exports2.DOMException = function(message, name) {
            this.message = message;
            this.name = name;
            var error = Error(message);
            this.stack = error.stack;
          };
          exports2.DOMException.prototype = Object.create(Error.prototype);
          exports2.DOMException.prototype.constructor = exports2.DOMException;
        }
        function fetch2(input, init) {
          return new Promise(function(resolve, reject) {
            var request = new Request2(input, init);
            if (request.signal && request.signal.aborted) {
              return reject(new exports2.DOMException("Aborted", "AbortError"));
            }
            var xhr = new XMLHttpRequest();
            function abortXhr() {
              xhr.abort();
            }
            xhr.onload = function() {
              var options = {
                statusText: xhr.statusText,
                headers: parseHeaders(xhr.getAllResponseHeaders() || "")
              };
              if (request.url.indexOf("file://") === 0 && (xhr.status < 200 || xhr.status > 599)) {
                options.status = 200;
              } else {
                options.status = xhr.status;
              }
              options.url = "responseURL" in xhr ? xhr.responseURL : options.headers.get("X-Request-URL");
              var body = "response" in xhr ? xhr.response : xhr.responseText;
              setTimeout(function() {
                resolve(new Response(body, options));
              }, 0);
            };
            xhr.onerror = function() {
              setTimeout(function() {
                reject(new TypeError("Network request failed"));
              }, 0);
            };
            xhr.ontimeout = function() {
              setTimeout(function() {
                reject(new TypeError("Network request timed out"));
              }, 0);
            };
            xhr.onabort = function() {
              setTimeout(function() {
                reject(new exports2.DOMException("Aborted", "AbortError"));
              }, 0);
            };
            function fixUrl(url) {
              try {
                return url === "" && g2.location.href ? g2.location.href : url;
              } catch (e) {
                return url;
              }
            }
            xhr.open(request.method, fixUrl(request.url), true);
            if (request.credentials === "include") {
              xhr.withCredentials = true;
            } else if (request.credentials === "omit") {
              xhr.withCredentials = false;
            }
            if ("responseType" in xhr) {
              if (support.blob) {
                xhr.responseType = "blob";
              } else if (support.arrayBuffer) {
                xhr.responseType = "arraybuffer";
              }
            }
            if (init && typeof init.headers === "object" && !(init.headers instanceof Headers || g2.Headers && init.headers instanceof g2.Headers)) {
              var names = [];
              Object.getOwnPropertyNames(init.headers).forEach(function(name) {
                names.push(normalizeName(name));
                xhr.setRequestHeader(name, normalizeValue(init.headers[name]));
              });
              request.headers.forEach(function(value, name) {
                if (names.indexOf(name) === -1) {
                  xhr.setRequestHeader(name, value);
                }
              });
            } else {
              request.headers.forEach(function(value, name) {
                xhr.setRequestHeader(name, value);
              });
            }
            if (request.signal) {
              request.signal.addEventListener("abort", abortXhr);
              xhr.onreadystatechange = function() {
                if (xhr.readyState === 4) {
                  request.signal.removeEventListener("abort", abortXhr);
                }
              };
            }
            xhr.send(typeof request._bodyInit === "undefined" ? null : request._bodyInit);
          });
        }
        fetch2.polyfill = true;
        if (!g2.fetch) {
          g2.fetch = fetch2;
          g2.Headers = Headers;
          g2.Request = Request2;
          g2.Response = Response;
        }
        exports2.Headers = Headers;
        exports2.Request = Request2;
        exports2.Response = Response;
        exports2.fetch = fetch2;
        Object.defineProperty(exports2, "__esModule", { value: true });
        return exports2;
      }({});
    })(__globalThis__);
    __globalThis__.fetch.ponyfill = true;
    delete __globalThis__.fetch.polyfill;
    var ctx = __global__.fetch ? __global__ : __globalThis__;
    exports = ctx.fetch;
    exports.default = ctx.fetch;
    exports.fetch = ctx.fetch;
    exports.Headers = ctx.Headers;
    exports.Request = ctx.Request;
    exports.Response = ctx.Response;
    module.exports = exports;
  }
});

// node_modules/@walletconnect/universal-provider/node_modules/@walletconnect/core/dist/index.es.js
var import_events3 = __toESM(require_events());

// node_modules/@walletconnect/universal-provider/node_modules/@walletconnect/types/dist/index.es.js
var import_events2 = __toESM(require_events());
var a = Object.defineProperty;
var u = (e, s, r2) => s in e ? a(e, s, { enumerable: true, configurable: true, writable: true, value: r2 }) : e[s] = r2;
var c = (e, s, r2) => u(e, typeof s != "symbol" ? s + "" : s, r2);
var h2 = class extends IEvents {
  constructor(s) {
    super(), this.opts = s, c(this, "protocol", "wc"), c(this, "version", 2);
  }
};
var p = Object.defineProperty;
var b = (e, s, r2) => s in e ? p(e, s, { enumerable: true, configurable: true, writable: true, value: r2 }) : e[s] = r2;
var v = (e, s, r2) => b(e, typeof s != "symbol" ? s + "" : s, r2);
var I = class extends IEvents {
  constructor(s, r2) {
    super(), this.core = s, this.logger = r2, v(this, "records", /* @__PURE__ */ new Map());
  }
};
var y2 = class {
  constructor(s, r2) {
    this.logger = s, this.core = r2;
  }
};
var m = class extends IEvents {
  constructor(s, r2) {
    super(), this.relayer = s, this.logger = r2;
  }
};
var d = class extends IEvents {
  constructor(s) {
    super();
  }
};
var f2 = class {
  constructor(s, r2, t, q2) {
    this.core = s, this.logger = r2, this.name = t;
  }
};
var P = class extends IEvents {
  constructor(s, r2) {
    super(), this.relayer = s, this.logger = r2;
  }
};
var S = class extends IEvents {
  constructor(s, r2) {
    super(), this.core = s, this.logger = r2;
  }
};
var M = class {
  constructor(s, r2, t) {
    this.core = s, this.logger = r2, this.store = t;
  }
};
var O = class {
  constructor(s, r2) {
    this.projectId = s, this.logger = r2;
  }
};
var R = class {
  constructor(s, r2, t) {
    this.core = s, this.logger = r2, this.telemetryEnabled = t;
  }
};
var T = Object.defineProperty;
var k2 = (e, s, r2) => s in e ? T(e, s, { enumerable: true, configurable: true, writable: true, value: r2 }) : e[s] = r2;
var i2 = (e, s, r2) => k2(e, typeof s != "symbol" ? s + "" : s, r2);
var J = class {
  constructor(s) {
    this.opts = s, i2(this, "protocol", "wc"), i2(this, "version", 2);
  }
};
var V = class {
  constructor(s) {
    this.client = s;
  }
};

// node_modules/@walletconnect/universal-provider/node_modules/@walletconnect/core/dist/index.es.js
var import_time2 = __toESM(require_cjs());

// node_modules/@walletconnect/universal-provider/node_modules/@walletconnect/utils/dist/index.es.js
var import_time = __toESM(require_cjs());
var import_window_getters = __toESM(require_cjs2());
var import_window_metadata = __toESM(require_cjs3());

// node_modules/@walletconnect/universal-provider/node_modules/viem/_esm/accounts/utils/publicKeyToAddress.js
function publicKeyToAddress(publicKey) {
  const address = keccak256(`0x${publicKey.substring(4)}`).substring(26);
  return checksumAddress(`0x${address}`);
}

// node_modules/@walletconnect/universal-provider/node_modules/viem/_esm/utils/signature/recoverPublicKey.js
async function recoverPublicKey({ hash, signature }) {
  const hashHex = isHex(hash) ? hash : toHex(hash);
  const { secp256k1: secp256k12 } = await import("./secp256k1-CCWV5DPE.js");
  const signature_ = (() => {
    if (typeof signature === "object" && "r" in signature && "s" in signature) {
      const { r: r2, s, v: v4, yParity } = signature;
      const yParityOrV2 = Number(yParity ?? v4);
      const recoveryBit2 = toRecoveryBit(yParityOrV2);
      return new secp256k12.Signature(hexToBigInt(r2), hexToBigInt(s)).addRecoveryBit(recoveryBit2);
    }
    const signatureHex = isHex(signature) ? signature : toHex(signature);
    if (size(signatureHex) !== 65)
      throw new Error("invalid signature length");
    const yParityOrV = hexToNumber(`0x${signatureHex.slice(130)}`);
    const recoveryBit = toRecoveryBit(yParityOrV);
    return secp256k12.Signature.fromCompact(signatureHex.substring(2, 130)).addRecoveryBit(recoveryBit);
  })();
  const publicKey = signature_.recoverPublicKey(hashHex.substring(2)).toHex(false);
  return `0x${publicKey}`;
}
function toRecoveryBit(yParityOrV) {
  if (yParityOrV === 0 || yParityOrV === 1)
    return yParityOrV;
  if (yParityOrV === 27)
    return 0;
  if (yParityOrV === 28)
    return 1;
  throw new Error("Invalid yParityOrV value");
}

// node_modules/@walletconnect/universal-provider/node_modules/viem/_esm/utils/signature/recoverAddress.js
async function recoverAddress({ hash, signature }) {
  return publicKeyToAddress(await recoverPublicKey({ hash, signature }));
}

// node_modules/@walletconnect/universal-provider/node_modules/viem/_esm/utils/formatters/transaction.js
var transactionType = {
  "0x0": "legacy",
  "0x1": "eip2930",
  "0x2": "eip1559",
  "0x3": "eip4844",
  "0x4": "eip7702"
};
function formatTransaction(transaction) {
  const transaction_ = {
    ...transaction,
    blockHash: transaction.blockHash ? transaction.blockHash : null,
    blockNumber: transaction.blockNumber ? BigInt(transaction.blockNumber) : null,
    chainId: transaction.chainId ? hexToNumber(transaction.chainId) : void 0,
    gas: transaction.gas ? BigInt(transaction.gas) : void 0,
    gasPrice: transaction.gasPrice ? BigInt(transaction.gasPrice) : void 0,
    maxFeePerBlobGas: transaction.maxFeePerBlobGas ? BigInt(transaction.maxFeePerBlobGas) : void 0,
    maxFeePerGas: transaction.maxFeePerGas ? BigInt(transaction.maxFeePerGas) : void 0,
    maxPriorityFeePerGas: transaction.maxPriorityFeePerGas ? BigInt(transaction.maxPriorityFeePerGas) : void 0,
    nonce: transaction.nonce ? hexToNumber(transaction.nonce) : void 0,
    to: transaction.to ? transaction.to : null,
    transactionIndex: transaction.transactionIndex ? Number(transaction.transactionIndex) : null,
    type: transaction.type ? transactionType[transaction.type] : void 0,
    typeHex: transaction.type ? transaction.type : void 0,
    value: transaction.value ? BigInt(transaction.value) : void 0,
    v: transaction.v ? BigInt(transaction.v) : void 0
  };
  if (transaction.authorizationList)
    transaction_.authorizationList = formatAuthorizationList(transaction.authorizationList);
  transaction_.yParity = (() => {
    if (transaction.yParity)
      return Number(transaction.yParity);
    if (typeof transaction_.v === "bigint") {
      if (transaction_.v === 0n || transaction_.v === 27n)
        return 0;
      if (transaction_.v === 1n || transaction_.v === 28n)
        return 1;
      if (transaction_.v >= 35n)
        return transaction_.v % 2n === 0n ? 1 : 0;
    }
    return void 0;
  })();
  if (transaction_.type === "legacy") {
    delete transaction_.accessList;
    delete transaction_.maxFeePerBlobGas;
    delete transaction_.maxFeePerGas;
    delete transaction_.maxPriorityFeePerGas;
    delete transaction_.yParity;
  }
  if (transaction_.type === "eip2930") {
    delete transaction_.maxFeePerBlobGas;
    delete transaction_.maxFeePerGas;
    delete transaction_.maxPriorityFeePerGas;
  }
  if (transaction_.type === "eip1559") {
    delete transaction_.maxFeePerBlobGas;
  }
  return transaction_;
}
var defineTransaction = defineFormatter("transaction", formatTransaction);
function formatAuthorizationList(authorizationList) {
  return authorizationList.map((authorization) => ({
    address: authorization.address,
    chainId: Number(authorization.chainId),
    nonce: Number(authorization.nonce),
    r: authorization.r,
    s: authorization.s,
    yParity: Number(authorization.yParity)
  }));
}

// node_modules/@walletconnect/universal-provider/node_modules/viem/_esm/utils/formatters/block.js
function formatBlock(block) {
  const transactions = (block.transactions ?? []).map((transaction) => {
    if (typeof transaction === "string")
      return transaction;
    return formatTransaction(transaction);
  });
  return {
    ...block,
    baseFeePerGas: block.baseFeePerGas ? BigInt(block.baseFeePerGas) : null,
    blobGasUsed: block.blobGasUsed ? BigInt(block.blobGasUsed) : void 0,
    difficulty: block.difficulty ? BigInt(block.difficulty) : void 0,
    excessBlobGas: block.excessBlobGas ? BigInt(block.excessBlobGas) : void 0,
    gasLimit: block.gasLimit ? BigInt(block.gasLimit) : void 0,
    gasUsed: block.gasUsed ? BigInt(block.gasUsed) : void 0,
    hash: block.hash ? block.hash : null,
    logsBloom: block.logsBloom ? block.logsBloom : null,
    nonce: block.nonce ? block.nonce : null,
    number: block.number ? BigInt(block.number) : null,
    size: block.size ? BigInt(block.size) : void 0,
    timestamp: block.timestamp ? BigInt(block.timestamp) : void 0,
    transactions,
    totalDifficulty: block.totalDifficulty ? BigInt(block.totalDifficulty) : null
  };
}
var defineBlock = defineFormatter("block", formatBlock);

// node_modules/@walletconnect/universal-provider/node_modules/viem/_esm/actions/public/getTransactionCount.js
async function getTransactionCount(client, { address, blockTag = "latest", blockNumber }) {
  const count = await client.request({
    method: "eth_getTransactionCount",
    params: [
      address,
      typeof blockNumber === "bigint" ? numberToHex(blockNumber) : blockTag
    ]
  }, {
    dedupe: Boolean(blockNumber)
  });
  return hexToNumber(count);
}

// node_modules/@walletconnect/universal-provider/node_modules/viem/_esm/constants/blob.js
var blobsPerTransaction = 6;
var bytesPerFieldElement = 32;
var fieldElementsPerBlob = 4096;
var bytesPerBlob = bytesPerFieldElement * fieldElementsPerBlob;
var maxBytesPerTransaction = bytesPerBlob * blobsPerTransaction - // terminator byte (0x80).
1 - // zero byte (0x00) appended to each field element.
1 * fieldElementsPerBlob * blobsPerTransaction;

// node_modules/@walletconnect/universal-provider/node_modules/viem/_esm/utils/formatters/log.js
function formatLog(log, { args, eventName } = {}) {
  return {
    ...log,
    blockHash: log.blockHash ? log.blockHash : null,
    blockNumber: log.blockNumber ? BigInt(log.blockNumber) : null,
    logIndex: log.logIndex ? Number(log.logIndex) : null,
    transactionHash: log.transactionHash ? log.transactionHash : null,
    transactionIndex: log.transactionIndex ? Number(log.transactionIndex) : null,
    ...eventName ? { args, eventName } : {}
  };
}

// node_modules/@walletconnect/universal-provider/node_modules/viem/_esm/actions/wallet/sendTransaction.js
var supportsWalletNamespace = new LruMap(128);

// node_modules/@walletconnect/universal-provider/node_modules/viem/_esm/utils/formatters/transactionReceipt.js
var receiptStatuses = {
  "0x0": "reverted",
  "0x1": "success"
};
function formatTransactionReceipt(transactionReceipt) {
  const receipt = {
    ...transactionReceipt,
    blockNumber: transactionReceipt.blockNumber ? BigInt(transactionReceipt.blockNumber) : null,
    contractAddress: transactionReceipt.contractAddress ? transactionReceipt.contractAddress : null,
    cumulativeGasUsed: transactionReceipt.cumulativeGasUsed ? BigInt(transactionReceipt.cumulativeGasUsed) : null,
    effectiveGasPrice: transactionReceipt.effectiveGasPrice ? BigInt(transactionReceipt.effectiveGasPrice) : null,
    gasUsed: transactionReceipt.gasUsed ? BigInt(transactionReceipt.gasUsed) : null,
    logs: transactionReceipt.logs ? transactionReceipt.logs.map((log) => formatLog(log)) : null,
    to: transactionReceipt.to ? transactionReceipt.to : null,
    transactionIndex: transactionReceipt.transactionIndex ? hexToNumber(transactionReceipt.transactionIndex) : null,
    status: transactionReceipt.status ? receiptStatuses[transactionReceipt.status] : null,
    type: transactionReceipt.type ? transactionType[transactionReceipt.type] || transactionReceipt.type : null
  };
  if (transactionReceipt.blobGasPrice)
    receipt.blobGasPrice = BigInt(transactionReceipt.blobGasPrice);
  if (transactionReceipt.blobGasUsed)
    receipt.blobGasUsed = BigInt(transactionReceipt.blobGasUsed);
  return receipt;
}
var defineTransactionReceipt = defineFormatter("transactionReceipt", formatTransactionReceipt);

// node_modules/@walletconnect/universal-provider/node_modules/viem/_esm/actions/wallet/sendCalls.js
var fallbackTransactionErrorMagicIdentifier = numberToHex(0, {
  size: 32
});

// node_modules/@walletconnect/universal-provider/node_modules/viem/_esm/utils/promise/withDedupe.js
var promiseCache = new LruMap(8192);

// node_modules/@walletconnect/universal-provider/node_modules/viem/_esm/utils/rpc/id.js
function createIdStore() {
  return {
    current: 0,
    take() {
      return this.current++;
    },
    reset() {
      this.current = 0;
    }
  };
}
var idCache = createIdStore();

// node_modules/@walletconnect/universal-provider/node_modules/@noble/hashes/esm/legacy.js
var SHA1_IV = Uint32Array.from([
  1732584193,
  4023233417,
  2562383102,
  271733878,
  3285377520
]);
var SHA1_W = new Uint32Array(80);
var SHA1 = class extends HashMD {
  constructor() {
    super(64, 20, 8, false);
    this.A = SHA1_IV[0] | 0;
    this.B = SHA1_IV[1] | 0;
    this.C = SHA1_IV[2] | 0;
    this.D = SHA1_IV[3] | 0;
    this.E = SHA1_IV[4] | 0;
  }
  get() {
    const { A: A5, B: B3, C: C4, D: D2, E: E5 } = this;
    return [A5, B3, C4, D2, E5];
  }
  set(A5, B3, C4, D2, E5) {
    this.A = A5 | 0;
    this.B = B3 | 0;
    this.C = C4 | 0;
    this.D = D2 | 0;
    this.E = E5 | 0;
  }
  process(view, offset) {
    for (let i3 = 0; i3 < 16; i3++, offset += 4)
      SHA1_W[i3] = view.getUint32(offset, false);
    for (let i3 = 16; i3 < 80; i3++)
      SHA1_W[i3] = rotl(SHA1_W[i3 - 3] ^ SHA1_W[i3 - 8] ^ SHA1_W[i3 - 14] ^ SHA1_W[i3 - 16], 1);
    let { A: A5, B: B3, C: C4, D: D2, E: E5 } = this;
    for (let i3 = 0; i3 < 80; i3++) {
      let F3, K3;
      if (i3 < 20) {
        F3 = Chi(B3, C4, D2);
        K3 = 1518500249;
      } else if (i3 < 40) {
        F3 = B3 ^ C4 ^ D2;
        K3 = 1859775393;
      } else if (i3 < 60) {
        F3 = Maj(B3, C4, D2);
        K3 = 2400959708;
      } else {
        F3 = B3 ^ C4 ^ D2;
        K3 = 3395469782;
      }
      const T4 = rotl(A5, 5) + F3 + E5 + K3 + SHA1_W[i3] | 0;
      E5 = D2;
      D2 = C4;
      C4 = rotl(B3, 30);
      B3 = A5;
      A5 = T4;
    }
    A5 = A5 + this.A | 0;
    B3 = B3 + this.B | 0;
    C4 = C4 + this.C | 0;
    D2 = D2 + this.D | 0;
    E5 = E5 + this.E | 0;
    this.set(A5, B3, C4, D2, E5);
  }
  roundClean() {
    clean(SHA1_W);
  }
  destroy() {
    this.set(0, 0, 0, 0, 0);
    clean(this.buffer);
  }
};
var sha1 = createHasher(() => new SHA1());
var p32 = Math.pow(2, 32);
var K = Array.from({ length: 64 }, (_, i3) => Math.floor(p32 * Math.abs(Math.sin(i3 + 1))));
var MD5_IV = SHA1_IV.slice(0, 4);
var MD5_W = new Uint32Array(16);
var MD5 = class extends HashMD {
  constructor() {
    super(64, 16, 8, true);
    this.A = MD5_IV[0] | 0;
    this.B = MD5_IV[1] | 0;
    this.C = MD5_IV[2] | 0;
    this.D = MD5_IV[3] | 0;
  }
  get() {
    const { A: A5, B: B3, C: C4, D: D2 } = this;
    return [A5, B3, C4, D2];
  }
  set(A5, B3, C4, D2) {
    this.A = A5 | 0;
    this.B = B3 | 0;
    this.C = C4 | 0;
    this.D = D2 | 0;
  }
  process(view, offset) {
    for (let i3 = 0; i3 < 16; i3++, offset += 4)
      MD5_W[i3] = view.getUint32(offset, true);
    let { A: A5, B: B3, C: C4, D: D2 } = this;
    for (let i3 = 0; i3 < 64; i3++) {
      let F3, g2, s;
      if (i3 < 16) {
        F3 = Chi(B3, C4, D2);
        g2 = i3;
        s = [7, 12, 17, 22];
      } else if (i3 < 32) {
        F3 = Chi(D2, B3, C4);
        g2 = (5 * i3 + 1) % 16;
        s = [5, 9, 14, 20];
      } else if (i3 < 48) {
        F3 = B3 ^ C4 ^ D2;
        g2 = (3 * i3 + 5) % 16;
        s = [4, 11, 16, 23];
      } else {
        F3 = C4 ^ (B3 | ~D2);
        g2 = 7 * i3 % 16;
        s = [6, 10, 15, 21];
      }
      F3 = F3 + A5 + K[i3] + MD5_W[g2];
      A5 = D2;
      D2 = C4;
      C4 = B3;
      B3 = B3 + rotl(F3, s[i3 % 4]);
    }
    A5 = A5 + this.A | 0;
    B3 = B3 + this.B | 0;
    C4 = C4 + this.C | 0;
    D2 = D2 + this.D | 0;
    this.set(A5, B3, C4, D2);
  }
  roundClean() {
    clean(MD5_W);
  }
  destroy() {
    this.set(0, 0, 0, 0);
    clean(this.buffer);
  }
};
var md5 = createHasher(() => new MD5());
var Rho160 = Uint8Array.from([
  7,
  4,
  13,
  1,
  10,
  6,
  15,
  3,
  12,
  0,
  9,
  5,
  2,
  14,
  11,
  8
]);
var Id160 = (() => Uint8Array.from(new Array(16).fill(0).map((_, i3) => i3)))();
var Pi160 = (() => Id160.map((i3) => (9 * i3 + 5) % 16))();
var idxLR = (() => {
  const L4 = [Id160];
  const R4 = [Pi160];
  const res = [L4, R4];
  for (let i3 = 0; i3 < 4; i3++)
    for (let j3 of res)
      j3.push(j3[i3].map((k4) => Rho160[k4]));
  return res;
})();
var idxL = (() => idxLR[0])();
var idxR = (() => idxLR[1])();
var shifts160 = [
  [11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8],
  [12, 13, 11, 15, 6, 9, 9, 7, 12, 15, 11, 13, 7, 8, 7, 7],
  [13, 15, 14, 11, 7, 7, 6, 8, 13, 14, 13, 12, 5, 5, 6, 9],
  [14, 11, 12, 14, 8, 6, 5, 5, 15, 12, 15, 14, 9, 9, 8, 6],
  [15, 12, 13, 13, 9, 5, 8, 6, 14, 11, 12, 11, 8, 6, 5, 5]
].map((i3) => Uint8Array.from(i3));
var shiftsL160 = idxL.map((idx, i3) => idx.map((j3) => shifts160[i3][j3]));
var shiftsR160 = idxR.map((idx, i3) => idx.map((j3) => shifts160[i3][j3]));
var Kl160 = Uint32Array.from([
  0,
  1518500249,
  1859775393,
  2400959708,
  2840853838
]);
var Kr160 = Uint32Array.from([
  1352829926,
  1548603684,
  1836072691,
  2053994217,
  0
]);
function ripemd_f(group, x3, y5, z2) {
  if (group === 0)
    return x3 ^ y5 ^ z2;
  if (group === 1)
    return x3 & y5 | ~x3 & z2;
  if (group === 2)
    return (x3 | ~y5) ^ z2;
  if (group === 3)
    return x3 & z2 | y5 & ~z2;
  return x3 ^ (y5 | ~z2);
}
var BUF_160 = new Uint32Array(16);
var RIPEMD160 = class extends HashMD {
  constructor() {
    super(64, 20, 8, true);
    this.h0 = 1732584193 | 0;
    this.h1 = 4023233417 | 0;
    this.h2 = 2562383102 | 0;
    this.h3 = 271733878 | 0;
    this.h4 = 3285377520 | 0;
  }
  get() {
    const { h0, h1, h2: h22, h3: h32, h4 } = this;
    return [h0, h1, h22, h32, h4];
  }
  set(h0, h1, h22, h32, h4) {
    this.h0 = h0 | 0;
    this.h1 = h1 | 0;
    this.h2 = h22 | 0;
    this.h3 = h32 | 0;
    this.h4 = h4 | 0;
  }
  process(view, offset) {
    for (let i3 = 0; i3 < 16; i3++, offset += 4)
      BUF_160[i3] = view.getUint32(offset, true);
    let al = this.h0 | 0, ar2 = al, bl = this.h1 | 0, br3 = bl, cl = this.h2 | 0, cr3 = cl, dl = this.h3 | 0, dr3 = dl, el = this.h4 | 0, er2 = el;
    for (let group = 0; group < 5; group++) {
      const rGroup = 4 - group;
      const hbl = Kl160[group], hbr = Kr160[group];
      const rl = idxL[group], rr3 = idxR[group];
      const sl = shiftsL160[group], sr3 = shiftsR160[group];
      for (let i3 = 0; i3 < 16; i3++) {
        const tl = rotl(al + ripemd_f(group, bl, cl, dl) + BUF_160[rl[i3]] + hbl, sl[i3]) + el | 0;
        al = el, el = dl, dl = rotl(cl, 10) | 0, cl = bl, bl = tl;
      }
      for (let i3 = 0; i3 < 16; i3++) {
        const tr3 = rotl(ar2 + ripemd_f(rGroup, br3, cr3, dr3) + BUF_160[rr3[i3]] + hbr, sr3[i3]) + er2 | 0;
        ar2 = er2, er2 = dr3, dr3 = rotl(cr3, 10) | 0, cr3 = br3, br3 = tr3;
      }
    }
    this.set(this.h1 + cl + dr3 | 0, this.h2 + dl + er2 | 0, this.h3 + el + ar2 | 0, this.h4 + al + br3 | 0, this.h0 + bl + cr3 | 0);
  }
  roundClean() {
    clean(BUF_160);
  }
  destroy() {
    this.destroyed = true;
    clean(this.buffer);
    this.set(0, 0, 0, 0, 0);
  }
};
var ripemd160 = createHasher(() => new RIPEMD160());

// node_modules/@walletconnect/universal-provider/node_modules/viem/_esm/utils/nonceManager.js
function createNonceManager(parameters) {
  const { source } = parameters;
  const deltaMap = /* @__PURE__ */ new Map();
  const nonceMap = new LruMap(8192);
  const promiseMap = /* @__PURE__ */ new Map();
  const getKey = ({ address, chainId }) => `${address}.${chainId}`;
  return {
    async consume({ address, chainId, client }) {
      const key = getKey({ address, chainId });
      const promise = this.get({ address, chainId, client });
      this.increment({ address, chainId });
      const nonce = await promise;
      await source.set({ address, chainId }, nonce);
      nonceMap.set(key, nonce);
      return nonce;
    },
    async increment({ address, chainId }) {
      const key = getKey({ address, chainId });
      const delta = deltaMap.get(key) ?? 0;
      deltaMap.set(key, delta + 1);
    },
    async get({ address, chainId, client }) {
      const key = getKey({ address, chainId });
      let promise = promiseMap.get(key);
      if (!promise) {
        promise = (async () => {
          try {
            const nonce = await source.get({ address, chainId, client });
            const previousNonce = nonceMap.get(key) ?? 0;
            if (previousNonce > 0 && nonce <= previousNonce)
              return previousNonce + 1;
            nonceMap.delete(key);
            return nonce;
          } finally {
            this.reset({ address, chainId });
          }
        })();
        promiseMap.set(key, promise);
      }
      const delta = deltaMap.get(key) ?? 0;
      return delta + await promise;
    },
    reset({ address, chainId }) {
      const key = getKey({ address, chainId });
      deltaMap.delete(key);
      promiseMap.delete(key);
    }
  };
}
function jsonRpc() {
  return {
    async get(parameters) {
      const { address, client } = parameters;
      return getTransactionCount(client, {
        address,
        blockTag: "pending"
      });
    },
    set() {
    }
  };
}
var nonceManager = createNonceManager({
  source: jsonRpc()
});

// node_modules/@walletconnect/universal-provider/node_modules/ox/_esm/core/Hash.js
function keccak2562(value, options = {}) {
  const { as: as3 = typeof value === "string" ? "Hex" : "Bytes" } = options;
  const bytes = keccak_256(from(value));
  if (as3 === "Bytes")
    return bytes;
  return fromBytes(bytes);
}

// node_modules/@walletconnect/universal-provider/node_modules/ox/_esm/core/internal/lru.js
var LruMap2 = class extends Map {
  constructor(size4) {
    super();
    Object.defineProperty(this, "maxSize", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    this.maxSize = size4;
  }
  get(key) {
    const value = super.get(key);
    if (super.has(key) && value !== void 0) {
      this.delete(key);
      super.set(key, value);
    }
    return value;
  }
  set(key, value) {
    super.set(key, value);
    if (this.maxSize && this.size > this.maxSize) {
      const firstKey = this.keys().next().value;
      if (firstKey)
        this.delete(firstKey);
    }
    return this;
  }
};

// node_modules/@walletconnect/universal-provider/node_modules/ox/_esm/core/Caches.js
var caches = {
  checksum: new LruMap2(8192)
};
var checksum = caches.checksum;

// node_modules/@walletconnect/universal-provider/node_modules/ox/_esm/core/Address.js
var addressRegex = /^0x[a-fA-F0-9]{40}$/;
function assert(value, options = {}) {
  const { strict = true } = options;
  if (!addressRegex.test(value))
    throw new InvalidAddressError2({
      address: value,
      cause: new InvalidInputError()
    });
  if (strict) {
    if (value.toLowerCase() === value)
      return;
    if (checksum2(value) !== value)
      throw new InvalidAddressError2({
        address: value,
        cause: new InvalidChecksumError()
      });
  }
}
function checksum2(address) {
  if (checksum.has(address))
    return checksum.get(address);
  assert(address, { strict: false });
  const hexAddress = address.substring(2).toLowerCase();
  const hash = keccak2562(fromString(hexAddress), { as: "Bytes" });
  const characters = hexAddress.split("");
  for (let i3 = 0; i3 < 40; i3 += 2) {
    if (hash[i3 >> 1] >> 4 >= 8 && characters[i3]) {
      characters[i3] = characters[i3].toUpperCase();
    }
    if ((hash[i3 >> 1] & 15) >= 8 && characters[i3 + 1]) {
      characters[i3 + 1] = characters[i3 + 1].toUpperCase();
    }
  }
  const result = `0x${characters.join("")}`;
  checksum.set(address, result);
  return result;
}
var InvalidAddressError2 = class extends BaseError {
  constructor({ address, cause }) {
    super(`Address "${address}" is invalid.`, {
      cause
    });
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Address.InvalidAddressError"
    });
  }
};
var InvalidInputError = class extends BaseError {
  constructor() {
    super("Address is not a 20 byte (40 hexadecimal character) value.");
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Address.InvalidInputError"
    });
  }
};
var InvalidChecksumError = class extends BaseError {
  constructor() {
    super("Address does not match its checksum counterpart.");
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Address.InvalidChecksumError"
    });
  }
};

// node_modules/@walletconnect/universal-provider/node_modules/ox/_esm/core/Solidity.js
var arrayRegex2 = /^(.*)\[([0-9]*)\]$/;
var bytesRegex2 = /^bytes([1-9]|1[0-9]|2[0-9]|3[0-2])?$/;
var integerRegex2 = /^(u?int)(8|16|24|32|40|48|56|64|72|80|88|96|104|112|120|128|136|144|152|160|168|176|184|192|200|208|216|224|232|240|248|256)?$/;
var maxInt8 = 2n ** (8n - 1n) - 1n;
var maxInt16 = 2n ** (16n - 1n) - 1n;
var maxInt24 = 2n ** (24n - 1n) - 1n;
var maxInt32 = 2n ** (32n - 1n) - 1n;
var maxInt40 = 2n ** (40n - 1n) - 1n;
var maxInt48 = 2n ** (48n - 1n) - 1n;
var maxInt56 = 2n ** (56n - 1n) - 1n;
var maxInt64 = 2n ** (64n - 1n) - 1n;
var maxInt72 = 2n ** (72n - 1n) - 1n;
var maxInt80 = 2n ** (80n - 1n) - 1n;
var maxInt88 = 2n ** (88n - 1n) - 1n;
var maxInt96 = 2n ** (96n - 1n) - 1n;
var maxInt104 = 2n ** (104n - 1n) - 1n;
var maxInt112 = 2n ** (112n - 1n) - 1n;
var maxInt120 = 2n ** (120n - 1n) - 1n;
var maxInt128 = 2n ** (128n - 1n) - 1n;
var maxInt136 = 2n ** (136n - 1n) - 1n;
var maxInt144 = 2n ** (144n - 1n) - 1n;
var maxInt152 = 2n ** (152n - 1n) - 1n;
var maxInt160 = 2n ** (160n - 1n) - 1n;
var maxInt168 = 2n ** (168n - 1n) - 1n;
var maxInt176 = 2n ** (176n - 1n) - 1n;
var maxInt184 = 2n ** (184n - 1n) - 1n;
var maxInt192 = 2n ** (192n - 1n) - 1n;
var maxInt200 = 2n ** (200n - 1n) - 1n;
var maxInt208 = 2n ** (208n - 1n) - 1n;
var maxInt216 = 2n ** (216n - 1n) - 1n;
var maxInt224 = 2n ** (224n - 1n) - 1n;
var maxInt232 = 2n ** (232n - 1n) - 1n;
var maxInt240 = 2n ** (240n - 1n) - 1n;
var maxInt248 = 2n ** (248n - 1n) - 1n;
var maxInt256 = 2n ** (256n - 1n) - 1n;
var minInt8 = -(2n ** (8n - 1n));
var minInt16 = -(2n ** (16n - 1n));
var minInt24 = -(2n ** (24n - 1n));
var minInt32 = -(2n ** (32n - 1n));
var minInt40 = -(2n ** (40n - 1n));
var minInt48 = -(2n ** (48n - 1n));
var minInt56 = -(2n ** (56n - 1n));
var minInt64 = -(2n ** (64n - 1n));
var minInt72 = -(2n ** (72n - 1n));
var minInt80 = -(2n ** (80n - 1n));
var minInt88 = -(2n ** (88n - 1n));
var minInt96 = -(2n ** (96n - 1n));
var minInt104 = -(2n ** (104n - 1n));
var minInt112 = -(2n ** (112n - 1n));
var minInt120 = -(2n ** (120n - 1n));
var minInt128 = -(2n ** (128n - 1n));
var minInt136 = -(2n ** (136n - 1n));
var minInt144 = -(2n ** (144n - 1n));
var minInt152 = -(2n ** (152n - 1n));
var minInt160 = -(2n ** (160n - 1n));
var minInt168 = -(2n ** (168n - 1n));
var minInt176 = -(2n ** (176n - 1n));
var minInt184 = -(2n ** (184n - 1n));
var minInt192 = -(2n ** (192n - 1n));
var minInt200 = -(2n ** (200n - 1n));
var minInt208 = -(2n ** (208n - 1n));
var minInt216 = -(2n ** (216n - 1n));
var minInt224 = -(2n ** (224n - 1n));
var minInt232 = -(2n ** (232n - 1n));
var minInt240 = -(2n ** (240n - 1n));
var minInt248 = -(2n ** (248n - 1n));
var minInt256 = -(2n ** (256n - 1n));
var maxUint8 = 2n ** 8n - 1n;
var maxUint16 = 2n ** 16n - 1n;
var maxUint24 = 2n ** 24n - 1n;
var maxUint32 = 2n ** 32n - 1n;
var maxUint40 = 2n ** 40n - 1n;
var maxUint48 = 2n ** 48n - 1n;
var maxUint56 = 2n ** 56n - 1n;
var maxUint64 = 2n ** 64n - 1n;
var maxUint72 = 2n ** 72n - 1n;
var maxUint80 = 2n ** 80n - 1n;
var maxUint88 = 2n ** 88n - 1n;
var maxUint96 = 2n ** 96n - 1n;
var maxUint104 = 2n ** 104n - 1n;
var maxUint112 = 2n ** 112n - 1n;
var maxUint120 = 2n ** 120n - 1n;
var maxUint128 = 2n ** 128n - 1n;
var maxUint136 = 2n ** 136n - 1n;
var maxUint144 = 2n ** 144n - 1n;
var maxUint152 = 2n ** 152n - 1n;
var maxUint160 = 2n ** 160n - 1n;
var maxUint168 = 2n ** 168n - 1n;
var maxUint176 = 2n ** 176n - 1n;
var maxUint184 = 2n ** 184n - 1n;
var maxUint192 = 2n ** 192n - 1n;
var maxUint200 = 2n ** 200n - 1n;
var maxUint208 = 2n ** 208n - 1n;
var maxUint216 = 2n ** 216n - 1n;
var maxUint224 = 2n ** 224n - 1n;
var maxUint232 = 2n ** 232n - 1n;
var maxUint240 = 2n ** 240n - 1n;
var maxUint248 = 2n ** 248n - 1n;
var maxUint2562 = 2n ** 256n - 1n;

// node_modules/@walletconnect/universal-provider/node_modules/ox/_esm/core/internal/cursor.js
var staticCursor = {
  bytes: new Uint8Array(),
  dataView: new DataView(new ArrayBuffer(0)),
  position: 0,
  positionReadCount: /* @__PURE__ */ new Map(),
  recursiveReadCount: 0,
  recursiveReadLimit: Number.POSITIVE_INFINITY,
  assertReadLimit() {
    if (this.recursiveReadCount >= this.recursiveReadLimit)
      throw new RecursiveReadLimitExceededError({
        count: this.recursiveReadCount + 1,
        limit: this.recursiveReadLimit
      });
  },
  assertPosition(position) {
    if (position < 0 || position > this.bytes.length - 1)
      throw new PositionOutOfBoundsError2({
        length: this.bytes.length,
        position
      });
  },
  decrementPosition(offset) {
    if (offset < 0)
      throw new NegativeOffsetError({ offset });
    const position = this.position - offset;
    this.assertPosition(position);
    this.position = position;
  },
  getReadCount(position) {
    return this.positionReadCount.get(position || this.position) || 0;
  },
  incrementPosition(offset) {
    if (offset < 0)
      throw new NegativeOffsetError({ offset });
    const position = this.position + offset;
    this.assertPosition(position);
    this.position = position;
  },
  inspectByte(position_) {
    const position = position_ ?? this.position;
    this.assertPosition(position);
    return this.bytes[position];
  },
  inspectBytes(length, position_) {
    const position = position_ ?? this.position;
    this.assertPosition(position + length - 1);
    return this.bytes.subarray(position, position + length);
  },
  inspectUint8(position_) {
    const position = position_ ?? this.position;
    this.assertPosition(position);
    return this.bytes[position];
  },
  inspectUint16(position_) {
    const position = position_ ?? this.position;
    this.assertPosition(position + 1);
    return this.dataView.getUint16(position);
  },
  inspectUint24(position_) {
    const position = position_ ?? this.position;
    this.assertPosition(position + 2);
    return (this.dataView.getUint16(position) << 8) + this.dataView.getUint8(position + 2);
  },
  inspectUint32(position_) {
    const position = position_ ?? this.position;
    this.assertPosition(position + 3);
    return this.dataView.getUint32(position);
  },
  pushByte(byte) {
    this.assertPosition(this.position);
    this.bytes[this.position] = byte;
    this.position++;
  },
  pushBytes(bytes) {
    this.assertPosition(this.position + bytes.length - 1);
    this.bytes.set(bytes, this.position);
    this.position += bytes.length;
  },
  pushUint8(value) {
    this.assertPosition(this.position);
    this.bytes[this.position] = value;
    this.position++;
  },
  pushUint16(value) {
    this.assertPosition(this.position + 1);
    this.dataView.setUint16(this.position, value);
    this.position += 2;
  },
  pushUint24(value) {
    this.assertPosition(this.position + 2);
    this.dataView.setUint16(this.position, value >> 8);
    this.dataView.setUint8(this.position + 2, value & ~4294967040);
    this.position += 3;
  },
  pushUint32(value) {
    this.assertPosition(this.position + 3);
    this.dataView.setUint32(this.position, value);
    this.position += 4;
  },
  readByte() {
    this.assertReadLimit();
    this._touch();
    const value = this.inspectByte();
    this.position++;
    return value;
  },
  readBytes(length, size4) {
    this.assertReadLimit();
    this._touch();
    const value = this.inspectBytes(length);
    this.position += size4 ?? length;
    return value;
  },
  readUint8() {
    this.assertReadLimit();
    this._touch();
    const value = this.inspectUint8();
    this.position += 1;
    return value;
  },
  readUint16() {
    this.assertReadLimit();
    this._touch();
    const value = this.inspectUint16();
    this.position += 2;
    return value;
  },
  readUint24() {
    this.assertReadLimit();
    this._touch();
    const value = this.inspectUint24();
    this.position += 3;
    return value;
  },
  readUint32() {
    this.assertReadLimit();
    this._touch();
    const value = this.inspectUint32();
    this.position += 4;
    return value;
  },
  get remaining() {
    return this.bytes.length - this.position;
  },
  setPosition(position) {
    const oldPosition = this.position;
    this.assertPosition(position);
    this.position = position;
    return () => this.position = oldPosition;
  },
  _touch() {
    if (this.recursiveReadLimit === Number.POSITIVE_INFINITY)
      return;
    const count = this.getReadCount();
    this.positionReadCount.set(this.position, count + 1);
    if (count > 0)
      this.recursiveReadCount++;
  }
};
var NegativeOffsetError = class extends BaseError {
  constructor({ offset }) {
    super(`Offset \`${offset}\` cannot be negative.`);
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Cursor.NegativeOffsetError"
    });
  }
};
var PositionOutOfBoundsError2 = class extends BaseError {
  constructor({ length, position }) {
    super(`Position \`${position}\` is out of bounds (\`0 < position < ${length}\`).`);
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Cursor.PositionOutOfBoundsError"
    });
  }
};
var RecursiveReadLimitExceededError = class extends BaseError {
  constructor({ count, limit }) {
    super(`Recursive read limit of \`${limit}\` exceeded (recursive read count: \`${count}\`).`);
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Cursor.RecursiveReadLimitExceededError"
    });
  }
};

// node_modules/@walletconnect/universal-provider/node_modules/ox/_esm/core/AbiParameters.js
function encodePacked2(types, values) {
  if (types.length !== values.length)
    throw new LengthMismatchError({
      expectedLength: types.length,
      givenLength: values.length
    });
  const data = [];
  for (let i3 = 0; i3 < types.length; i3++) {
    const type = types[i3];
    const value = values[i3];
    data.push(encodePacked2.encode(type, value));
  }
  return concat(...data);
}
(function(encodePacked3) {
  function encode5(type, value, isArray = false) {
    if (type === "address") {
      const address = value;
      assert(address);
      return padLeft(address.toLowerCase(), isArray ? 32 : 0);
    }
    if (type === "string")
      return fromString2(value);
    if (type === "bytes")
      return value;
    if (type === "bool")
      return padLeft(fromBoolean(value), isArray ? 32 : 1);
    const intMatch = type.match(integerRegex2);
    if (intMatch) {
      const [_type, baseType, bits = "256"] = intMatch;
      const size4 = Number.parseInt(bits) / 8;
      return fromNumber(value, {
        size: isArray ? 32 : size4,
        signed: baseType === "int"
      });
    }
    const bytesMatch = type.match(bytesRegex2);
    if (bytesMatch) {
      const [_type, size4] = bytesMatch;
      if (Number.parseInt(size4) !== (value.length - 2) / 2)
        throw new BytesSizeMismatchError2({
          expectedSize: Number.parseInt(size4),
          value
        });
      return padRight(value, isArray ? 32 : 0);
    }
    const arrayMatch = type.match(arrayRegex2);
    if (arrayMatch && Array.isArray(value)) {
      const [_type, childType] = arrayMatch;
      const data = [];
      for (let i3 = 0; i3 < value.length; i3++) {
        data.push(encode5(childType, value[i3], true));
      }
      if (data.length === 0)
        return "0x";
      return concat(...data);
    }
    throw new InvalidTypeError(type);
  }
  encodePacked3.encode = encode5;
})(encodePacked2 || (encodePacked2 = {}));
var BytesSizeMismatchError2 = class extends BaseError {
  constructor({ expectedSize, value }) {
    super(`Size of bytes "${value}" (bytes${size2(value)}) does not match expected size (bytes${expectedSize}).`);
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "AbiParameters.BytesSizeMismatchError"
    });
  }
};
var LengthMismatchError = class extends BaseError {
  constructor({ expectedLength, givenLength }) {
    super([
      "ABI encoding parameters/values length mismatch.",
      `Expected length (parameters): ${expectedLength}`,
      `Given length (values): ${givenLength}`
    ].join("\n"));
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "AbiParameters.LengthMismatchError"
    });
  }
};
var InvalidTypeError = class extends BaseError {
  constructor(type) {
    super(`Type \`${type}\` is not a valid ABI Type.`);
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "AbiParameters.InvalidTypeError"
    });
  }
};

// node_modules/@msgpack/msgpack/dist.esm/utils/utf8.mjs
function utf8Count(str) {
  const strLength = str.length;
  let byteLength = 0;
  let pos = 0;
  while (pos < strLength) {
    let value = str.charCodeAt(pos++);
    if ((value & 4294967168) === 0) {
      byteLength++;
      continue;
    } else if ((value & 4294965248) === 0) {
      byteLength += 2;
    } else {
      if (value >= 55296 && value <= 56319) {
        if (pos < strLength) {
          const extra = str.charCodeAt(pos);
          if ((extra & 64512) === 56320) {
            ++pos;
            value = ((value & 1023) << 10) + (extra & 1023) + 65536;
          }
        }
      }
      if ((value & 4294901760) === 0) {
        byteLength += 3;
      } else {
        byteLength += 4;
      }
    }
  }
  return byteLength;
}
function utf8EncodeJs(str, output, outputOffset) {
  const strLength = str.length;
  let offset = outputOffset;
  let pos = 0;
  while (pos < strLength) {
    let value = str.charCodeAt(pos++);
    if ((value & 4294967168) === 0) {
      output[offset++] = value;
      continue;
    } else if ((value & 4294965248) === 0) {
      output[offset++] = value >> 6 & 31 | 192;
    } else {
      if (value >= 55296 && value <= 56319) {
        if (pos < strLength) {
          const extra = str.charCodeAt(pos);
          if ((extra & 64512) === 56320) {
            ++pos;
            value = ((value & 1023) << 10) + (extra & 1023) + 65536;
          }
        }
      }
      if ((value & 4294901760) === 0) {
        output[offset++] = value >> 12 & 15 | 224;
        output[offset++] = value >> 6 & 63 | 128;
      } else {
        output[offset++] = value >> 18 & 7 | 240;
        output[offset++] = value >> 12 & 63 | 128;
        output[offset++] = value >> 6 & 63 | 128;
      }
    }
    output[offset++] = value & 63 | 128;
  }
}
var sharedTextEncoder = new TextEncoder();
var TEXT_ENCODER_THRESHOLD = 50;
function utf8EncodeTE(str, output, outputOffset) {
  sharedTextEncoder.encodeInto(str, output.subarray(outputOffset));
}
function utf8Encode(str, output, outputOffset) {
  if (str.length > TEXT_ENCODER_THRESHOLD) {
    utf8EncodeTE(str, output, outputOffset);
  } else {
    utf8EncodeJs(str, output, outputOffset);
  }
}
var CHUNK_SIZE = 4096;
function utf8DecodeJs(bytes, inputOffset, byteLength) {
  let offset = inputOffset;
  const end = offset + byteLength;
  const units = [];
  let result = "";
  while (offset < end) {
    const byte1 = bytes[offset++];
    if ((byte1 & 128) === 0) {
      units.push(byte1);
    } else if ((byte1 & 224) === 192) {
      const byte2 = bytes[offset++] & 63;
      units.push((byte1 & 31) << 6 | byte2);
    } else if ((byte1 & 240) === 224) {
      const byte2 = bytes[offset++] & 63;
      const byte3 = bytes[offset++] & 63;
      units.push((byte1 & 31) << 12 | byte2 << 6 | byte3);
    } else if ((byte1 & 248) === 240) {
      const byte2 = bytes[offset++] & 63;
      const byte3 = bytes[offset++] & 63;
      const byte4 = bytes[offset++] & 63;
      let unit = (byte1 & 7) << 18 | byte2 << 12 | byte3 << 6 | byte4;
      if (unit > 65535) {
        unit -= 65536;
        units.push(unit >>> 10 & 1023 | 55296);
        unit = 56320 | unit & 1023;
      }
      units.push(unit);
    } else {
      units.push(byte1);
    }
    if (units.length >= CHUNK_SIZE) {
      result += String.fromCharCode(...units);
      units.length = 0;
    }
  }
  if (units.length > 0) {
    result += String.fromCharCode(...units);
  }
  return result;
}
var sharedTextDecoder = new TextDecoder();
var TEXT_DECODER_THRESHOLD = 200;
function utf8DecodeTD(bytes, inputOffset, byteLength) {
  const stringBytes = bytes.subarray(inputOffset, inputOffset + byteLength);
  return sharedTextDecoder.decode(stringBytes);
}
function utf8Decode(bytes, inputOffset, byteLength) {
  if (byteLength > TEXT_DECODER_THRESHOLD) {
    return utf8DecodeTD(bytes, inputOffset, byteLength);
  } else {
    return utf8DecodeJs(bytes, inputOffset, byteLength);
  }
}

// node_modules/@msgpack/msgpack/dist.esm/ExtData.mjs
var ExtData = class {
  constructor(type, data) {
    this.type = type;
    this.data = data;
  }
};

// node_modules/@msgpack/msgpack/dist.esm/DecodeError.mjs
var DecodeError = class _DecodeError extends Error {
  constructor(message) {
    super(message);
    const proto = Object.create(_DecodeError.prototype);
    Object.setPrototypeOf(this, proto);
    Object.defineProperty(this, "name", {
      configurable: true,
      enumerable: false,
      value: _DecodeError.name
    });
  }
};

// node_modules/@msgpack/msgpack/dist.esm/utils/int.mjs
var UINT32_MAX = 4294967295;
function setUint64(view, offset, value) {
  const high = value / 4294967296;
  const low = value;
  view.setUint32(offset, high);
  view.setUint32(offset + 4, low);
}
function setInt64(view, offset, value) {
  const high = Math.floor(value / 4294967296);
  const low = value;
  view.setUint32(offset, high);
  view.setUint32(offset + 4, low);
}
function getInt64(view, offset) {
  const high = view.getInt32(offset);
  const low = view.getUint32(offset + 4);
  return high * 4294967296 + low;
}
function getUint64(view, offset) {
  const high = view.getUint32(offset);
  const low = view.getUint32(offset + 4);
  return high * 4294967296 + low;
}

// node_modules/@msgpack/msgpack/dist.esm/timestamp.mjs
var EXT_TIMESTAMP = -1;
var TIMESTAMP32_MAX_SEC = 4294967296 - 1;
var TIMESTAMP64_MAX_SEC = 17179869184 - 1;
function encodeTimeSpecToTimestamp({ sec, nsec }) {
  if (sec >= 0 && nsec >= 0 && sec <= TIMESTAMP64_MAX_SEC) {
    if (nsec === 0 && sec <= TIMESTAMP32_MAX_SEC) {
      const rv = new Uint8Array(4);
      const view = new DataView(rv.buffer);
      view.setUint32(0, sec);
      return rv;
    } else {
      const secHigh = sec / 4294967296;
      const secLow = sec & 4294967295;
      const rv = new Uint8Array(8);
      const view = new DataView(rv.buffer);
      view.setUint32(0, nsec << 2 | secHigh & 3);
      view.setUint32(4, secLow);
      return rv;
    }
  } else {
    const rv = new Uint8Array(12);
    const view = new DataView(rv.buffer);
    view.setUint32(0, nsec);
    setInt64(view, 4, sec);
    return rv;
  }
}
function encodeDateToTimeSpec(date) {
  const msec = date.getTime();
  const sec = Math.floor(msec / 1e3);
  const nsec = (msec - sec * 1e3) * 1e6;
  const nsecInSec = Math.floor(nsec / 1e9);
  return {
    sec: sec + nsecInSec,
    nsec: nsec - nsecInSec * 1e9
  };
}
function encodeTimestampExtension(object) {
  if (object instanceof Date) {
    const timeSpec = encodeDateToTimeSpec(object);
    return encodeTimeSpecToTimestamp(timeSpec);
  } else {
    return null;
  }
}
function decodeTimestampToTimeSpec(data) {
  const view = new DataView(data.buffer, data.byteOffset, data.byteLength);
  switch (data.byteLength) {
    case 4: {
      const sec = view.getUint32(0);
      const nsec = 0;
      return { sec, nsec };
    }
    case 8: {
      const nsec30AndSecHigh2 = view.getUint32(0);
      const secLow32 = view.getUint32(4);
      const sec = (nsec30AndSecHigh2 & 3) * 4294967296 + secLow32;
      const nsec = nsec30AndSecHigh2 >>> 2;
      return { sec, nsec };
    }
    case 12: {
      const sec = getInt64(view, 4);
      const nsec = view.getUint32(0);
      return { sec, nsec };
    }
    default:
      throw new DecodeError(`Unrecognized data size for timestamp (expected 4, 8, or 12): ${data.length}`);
  }
}
function decodeTimestampExtension(data) {
  const timeSpec = decodeTimestampToTimeSpec(data);
  return new Date(timeSpec.sec * 1e3 + timeSpec.nsec / 1e6);
}
var timestampExtension = {
  type: EXT_TIMESTAMP,
  encode: encodeTimestampExtension,
  decode: decodeTimestampExtension
};

// node_modules/@msgpack/msgpack/dist.esm/ExtensionCodec.mjs
var ExtensionCodec = class {
  constructor() {
    this.builtInEncoders = [];
    this.builtInDecoders = [];
    this.encoders = [];
    this.decoders = [];
    this.register(timestampExtension);
  }
  register({ type, encode: encode5, decode: decode3 }) {
    if (type >= 0) {
      this.encoders[type] = encode5;
      this.decoders[type] = decode3;
    } else {
      const index = -1 - type;
      this.builtInEncoders[index] = encode5;
      this.builtInDecoders[index] = decode3;
    }
  }
  tryToEncode(object, context) {
    for (let i3 = 0; i3 < this.builtInEncoders.length; i3++) {
      const encodeExt = this.builtInEncoders[i3];
      if (encodeExt != null) {
        const data = encodeExt(object, context);
        if (data != null) {
          const type = -1 - i3;
          return new ExtData(type, data);
        }
      }
    }
    for (let i3 = 0; i3 < this.encoders.length; i3++) {
      const encodeExt = this.encoders[i3];
      if (encodeExt != null) {
        const data = encodeExt(object, context);
        if (data != null) {
          const type = i3;
          return new ExtData(type, data);
        }
      }
    }
    if (object instanceof ExtData) {
      return object;
    }
    return null;
  }
  decode(data, type, context) {
    const decodeExt = type < 0 ? this.builtInDecoders[-1 - type] : this.decoders[type];
    if (decodeExt) {
      return decodeExt(data, type, context);
    } else {
      return new ExtData(type, data);
    }
  }
};
ExtensionCodec.defaultCodec = new ExtensionCodec();

// node_modules/@msgpack/msgpack/dist.esm/utils/typedArrays.mjs
function isArrayBufferLike(buffer) {
  return buffer instanceof ArrayBuffer || typeof SharedArrayBuffer !== "undefined" && buffer instanceof SharedArrayBuffer;
}
function ensureUint8Array(buffer) {
  if (buffer instanceof Uint8Array) {
    return buffer;
  } else if (ArrayBuffer.isView(buffer)) {
    return new Uint8Array(buffer.buffer, buffer.byteOffset, buffer.byteLength);
  } else if (isArrayBufferLike(buffer)) {
    return new Uint8Array(buffer);
  } else {
    return Uint8Array.from(buffer);
  }
}

// node_modules/@msgpack/msgpack/dist.esm/Encoder.mjs
var DEFAULT_MAX_DEPTH = 100;
var DEFAULT_INITIAL_BUFFER_SIZE = 2048;
var Encoder = class _Encoder {
  constructor(options) {
    this.entered = false;
    this.extensionCodec = (options == null ? void 0 : options.extensionCodec) ?? ExtensionCodec.defaultCodec;
    this.context = options == null ? void 0 : options.context;
    this.useBigInt64 = (options == null ? void 0 : options.useBigInt64) ?? false;
    this.maxDepth = (options == null ? void 0 : options.maxDepth) ?? DEFAULT_MAX_DEPTH;
    this.initialBufferSize = (options == null ? void 0 : options.initialBufferSize) ?? DEFAULT_INITIAL_BUFFER_SIZE;
    this.sortKeys = (options == null ? void 0 : options.sortKeys) ?? false;
    this.forceFloat32 = (options == null ? void 0 : options.forceFloat32) ?? false;
    this.ignoreUndefined = (options == null ? void 0 : options.ignoreUndefined) ?? false;
    this.forceIntegerToFloat = (options == null ? void 0 : options.forceIntegerToFloat) ?? false;
    this.pos = 0;
    this.view = new DataView(new ArrayBuffer(this.initialBufferSize));
    this.bytes = new Uint8Array(this.view.buffer);
  }
  clone() {
    return new _Encoder({
      extensionCodec: this.extensionCodec,
      context: this.context,
      useBigInt64: this.useBigInt64,
      maxDepth: this.maxDepth,
      initialBufferSize: this.initialBufferSize,
      sortKeys: this.sortKeys,
      forceFloat32: this.forceFloat32,
      ignoreUndefined: this.ignoreUndefined,
      forceIntegerToFloat: this.forceIntegerToFloat
    });
  }
  reinitializeState() {
    this.pos = 0;
  }
  /**
   * This is almost equivalent to {@link Encoder#encode}, but it returns an reference of the encoder's internal buffer and thus much faster than {@link Encoder#encode}.
   *
   * @returns Encodes the object and returns a shared reference the encoder's internal buffer.
   */
  encodeSharedRef(object) {
    if (this.entered) {
      const instance = this.clone();
      return instance.encodeSharedRef(object);
    }
    try {
      this.entered = true;
      this.reinitializeState();
      this.doEncode(object, 1);
      return this.bytes.subarray(0, this.pos);
    } finally {
      this.entered = false;
    }
  }
  /**
   * @returns Encodes the object and returns a copy of the encoder's internal buffer.
   */
  encode(object) {
    if (this.entered) {
      const instance = this.clone();
      return instance.encode(object);
    }
    try {
      this.entered = true;
      this.reinitializeState();
      this.doEncode(object, 1);
      return this.bytes.slice(0, this.pos);
    } finally {
      this.entered = false;
    }
  }
  doEncode(object, depth) {
    if (depth > this.maxDepth) {
      throw new Error(`Too deep objects in depth ${depth}`);
    }
    if (object == null) {
      this.encodeNil();
    } else if (typeof object === "boolean") {
      this.encodeBoolean(object);
    } else if (typeof object === "number") {
      if (!this.forceIntegerToFloat) {
        this.encodeNumber(object);
      } else {
        this.encodeNumberAsFloat(object);
      }
    } else if (typeof object === "string") {
      this.encodeString(object);
    } else if (this.useBigInt64 && typeof object === "bigint") {
      this.encodeBigInt64(object);
    } else {
      this.encodeObject(object, depth);
    }
  }
  ensureBufferSizeToWrite(sizeToWrite) {
    const requiredSize = this.pos + sizeToWrite;
    if (this.view.byteLength < requiredSize) {
      this.resizeBuffer(requiredSize * 2);
    }
  }
  resizeBuffer(newSize) {
    const newBuffer = new ArrayBuffer(newSize);
    const newBytes = new Uint8Array(newBuffer);
    const newView = new DataView(newBuffer);
    newBytes.set(this.bytes);
    this.view = newView;
    this.bytes = newBytes;
  }
  encodeNil() {
    this.writeU8(192);
  }
  encodeBoolean(object) {
    if (object === false) {
      this.writeU8(194);
    } else {
      this.writeU8(195);
    }
  }
  encodeNumber(object) {
    if (!this.forceIntegerToFloat && Number.isSafeInteger(object)) {
      if (object >= 0) {
        if (object < 128) {
          this.writeU8(object);
        } else if (object < 256) {
          this.writeU8(204);
          this.writeU8(object);
        } else if (object < 65536) {
          this.writeU8(205);
          this.writeU16(object);
        } else if (object < 4294967296) {
          this.writeU8(206);
          this.writeU32(object);
        } else if (!this.useBigInt64) {
          this.writeU8(207);
          this.writeU64(object);
        } else {
          this.encodeNumberAsFloat(object);
        }
      } else {
        if (object >= -32) {
          this.writeU8(224 | object + 32);
        } else if (object >= -128) {
          this.writeU8(208);
          this.writeI8(object);
        } else if (object >= -32768) {
          this.writeU8(209);
          this.writeI16(object);
        } else if (object >= -2147483648) {
          this.writeU8(210);
          this.writeI32(object);
        } else if (!this.useBigInt64) {
          this.writeU8(211);
          this.writeI64(object);
        } else {
          this.encodeNumberAsFloat(object);
        }
      }
    } else {
      this.encodeNumberAsFloat(object);
    }
  }
  encodeNumberAsFloat(object) {
    if (this.forceFloat32) {
      this.writeU8(202);
      this.writeF32(object);
    } else {
      this.writeU8(203);
      this.writeF64(object);
    }
  }
  encodeBigInt64(object) {
    if (object >= BigInt(0)) {
      this.writeU8(207);
      this.writeBigUint64(object);
    } else {
      this.writeU8(211);
      this.writeBigInt64(object);
    }
  }
  writeStringHeader(byteLength) {
    if (byteLength < 32) {
      this.writeU8(160 + byteLength);
    } else if (byteLength < 256) {
      this.writeU8(217);
      this.writeU8(byteLength);
    } else if (byteLength < 65536) {
      this.writeU8(218);
      this.writeU16(byteLength);
    } else if (byteLength < 4294967296) {
      this.writeU8(219);
      this.writeU32(byteLength);
    } else {
      throw new Error(`Too long string: ${byteLength} bytes in UTF-8`);
    }
  }
  encodeString(object) {
    const maxHeaderSize = 1 + 4;
    const byteLength = utf8Count(object);
    this.ensureBufferSizeToWrite(maxHeaderSize + byteLength);
    this.writeStringHeader(byteLength);
    utf8Encode(object, this.bytes, this.pos);
    this.pos += byteLength;
  }
  encodeObject(object, depth) {
    const ext = this.extensionCodec.tryToEncode(object, this.context);
    if (ext != null) {
      this.encodeExtension(ext);
    } else if (Array.isArray(object)) {
      this.encodeArray(object, depth);
    } else if (ArrayBuffer.isView(object)) {
      this.encodeBinary(object);
    } else if (typeof object === "object") {
      this.encodeMap(object, depth);
    } else {
      throw new Error(`Unrecognized object: ${Object.prototype.toString.apply(object)}`);
    }
  }
  encodeBinary(object) {
    const size4 = object.byteLength;
    if (size4 < 256) {
      this.writeU8(196);
      this.writeU8(size4);
    } else if (size4 < 65536) {
      this.writeU8(197);
      this.writeU16(size4);
    } else if (size4 < 4294967296) {
      this.writeU8(198);
      this.writeU32(size4);
    } else {
      throw new Error(`Too large binary: ${size4}`);
    }
    const bytes = ensureUint8Array(object);
    this.writeU8a(bytes);
  }
  encodeArray(object, depth) {
    const size4 = object.length;
    if (size4 < 16) {
      this.writeU8(144 + size4);
    } else if (size4 < 65536) {
      this.writeU8(220);
      this.writeU16(size4);
    } else if (size4 < 4294967296) {
      this.writeU8(221);
      this.writeU32(size4);
    } else {
      throw new Error(`Too large array: ${size4}`);
    }
    for (const item of object) {
      this.doEncode(item, depth + 1);
    }
  }
  countWithoutUndefined(object, keys) {
    let count = 0;
    for (const key of keys) {
      if (object[key] !== void 0) {
        count++;
      }
    }
    return count;
  }
  encodeMap(object, depth) {
    const keys = Object.keys(object);
    if (this.sortKeys) {
      keys.sort();
    }
    const size4 = this.ignoreUndefined ? this.countWithoutUndefined(object, keys) : keys.length;
    if (size4 < 16) {
      this.writeU8(128 + size4);
    } else if (size4 < 65536) {
      this.writeU8(222);
      this.writeU16(size4);
    } else if (size4 < 4294967296) {
      this.writeU8(223);
      this.writeU32(size4);
    } else {
      throw new Error(`Too large map object: ${size4}`);
    }
    for (const key of keys) {
      const value = object[key];
      if (!(this.ignoreUndefined && value === void 0)) {
        this.encodeString(key);
        this.doEncode(value, depth + 1);
      }
    }
  }
  encodeExtension(ext) {
    if (typeof ext.data === "function") {
      const data = ext.data(this.pos + 6);
      const size5 = data.length;
      if (size5 >= 4294967296) {
        throw new Error(`Too large extension object: ${size5}`);
      }
      this.writeU8(201);
      this.writeU32(size5);
      this.writeI8(ext.type);
      this.writeU8a(data);
      return;
    }
    const size4 = ext.data.length;
    if (size4 === 1) {
      this.writeU8(212);
    } else if (size4 === 2) {
      this.writeU8(213);
    } else if (size4 === 4) {
      this.writeU8(214);
    } else if (size4 === 8) {
      this.writeU8(215);
    } else if (size4 === 16) {
      this.writeU8(216);
    } else if (size4 < 256) {
      this.writeU8(199);
      this.writeU8(size4);
    } else if (size4 < 65536) {
      this.writeU8(200);
      this.writeU16(size4);
    } else if (size4 < 4294967296) {
      this.writeU8(201);
      this.writeU32(size4);
    } else {
      throw new Error(`Too large extension object: ${size4}`);
    }
    this.writeI8(ext.type);
    this.writeU8a(ext.data);
  }
  writeU8(value) {
    this.ensureBufferSizeToWrite(1);
    this.view.setUint8(this.pos, value);
    this.pos++;
  }
  writeU8a(values) {
    const size4 = values.length;
    this.ensureBufferSizeToWrite(size4);
    this.bytes.set(values, this.pos);
    this.pos += size4;
  }
  writeI8(value) {
    this.ensureBufferSizeToWrite(1);
    this.view.setInt8(this.pos, value);
    this.pos++;
  }
  writeU16(value) {
    this.ensureBufferSizeToWrite(2);
    this.view.setUint16(this.pos, value);
    this.pos += 2;
  }
  writeI16(value) {
    this.ensureBufferSizeToWrite(2);
    this.view.setInt16(this.pos, value);
    this.pos += 2;
  }
  writeU32(value) {
    this.ensureBufferSizeToWrite(4);
    this.view.setUint32(this.pos, value);
    this.pos += 4;
  }
  writeI32(value) {
    this.ensureBufferSizeToWrite(4);
    this.view.setInt32(this.pos, value);
    this.pos += 4;
  }
  writeF32(value) {
    this.ensureBufferSizeToWrite(4);
    this.view.setFloat32(this.pos, value);
    this.pos += 4;
  }
  writeF64(value) {
    this.ensureBufferSizeToWrite(8);
    this.view.setFloat64(this.pos, value);
    this.pos += 8;
  }
  writeU64(value) {
    this.ensureBufferSizeToWrite(8);
    setUint64(this.view, this.pos, value);
    this.pos += 8;
  }
  writeI64(value) {
    this.ensureBufferSizeToWrite(8);
    setInt64(this.view, this.pos, value);
    this.pos += 8;
  }
  writeBigUint64(value) {
    this.ensureBufferSizeToWrite(8);
    this.view.setBigUint64(this.pos, value);
    this.pos += 8;
  }
  writeBigInt64(value) {
    this.ensureBufferSizeToWrite(8);
    this.view.setBigInt64(this.pos, value);
    this.pos += 8;
  }
};

// node_modules/@msgpack/msgpack/dist.esm/encode.mjs
function encode4(value, options) {
  const encoder = new Encoder(options);
  return encoder.encodeSharedRef(value);
}

// node_modules/@msgpack/msgpack/dist.esm/utils/prettyByte.mjs
function prettyByte(byte) {
  return `${byte < 0 ? "-" : ""}0x${Math.abs(byte).toString(16).padStart(2, "0")}`;
}

// node_modules/@msgpack/msgpack/dist.esm/CachedKeyDecoder.mjs
var DEFAULT_MAX_KEY_LENGTH = 16;
var DEFAULT_MAX_LENGTH_PER_KEY = 16;
var CachedKeyDecoder = class {
  constructor(maxKeyLength = DEFAULT_MAX_KEY_LENGTH, maxLengthPerKey = DEFAULT_MAX_LENGTH_PER_KEY) {
    this.hit = 0;
    this.miss = 0;
    this.maxKeyLength = maxKeyLength;
    this.maxLengthPerKey = maxLengthPerKey;
    this.caches = [];
    for (let i3 = 0; i3 < this.maxKeyLength; i3++) {
      this.caches.push([]);
    }
  }
  canBeCached(byteLength) {
    return byteLength > 0 && byteLength <= this.maxKeyLength;
  }
  find(bytes, inputOffset, byteLength) {
    const records = this.caches[byteLength - 1];
    FIND_CHUNK: for (const record of records) {
      const recordBytes = record.bytes;
      for (let j3 = 0; j3 < byteLength; j3++) {
        if (recordBytes[j3] !== bytes[inputOffset + j3]) {
          continue FIND_CHUNK;
        }
      }
      return record.str;
    }
    return null;
  }
  store(bytes, value) {
    const records = this.caches[bytes.length - 1];
    const record = { bytes, str: value };
    if (records.length >= this.maxLengthPerKey) {
      records[Math.random() * records.length | 0] = record;
    } else {
      records.push(record);
    }
  }
  decode(bytes, inputOffset, byteLength) {
    const cachedValue = this.find(bytes, inputOffset, byteLength);
    if (cachedValue != null) {
      this.hit++;
      return cachedValue;
    }
    this.miss++;
    const str = utf8DecodeJs(bytes, inputOffset, byteLength);
    const slicedCopyOfBytes = Uint8Array.prototype.slice.call(bytes, inputOffset, inputOffset + byteLength);
    this.store(slicedCopyOfBytes, str);
    return str;
  }
};

// node_modules/@msgpack/msgpack/dist.esm/Decoder.mjs
var STATE_ARRAY = "array";
var STATE_MAP_KEY = "map_key";
var STATE_MAP_VALUE = "map_value";
var mapKeyConverter = (key) => {
  if (typeof key === "string" || typeof key === "number") {
    return key;
  }
  throw new DecodeError("The type of key must be string or number but " + typeof key);
};
var StackPool = class {
  constructor() {
    this.stack = [];
    this.stackHeadPosition = -1;
  }
  get length() {
    return this.stackHeadPosition + 1;
  }
  top() {
    return this.stack[this.stackHeadPosition];
  }
  pushArrayState(size4) {
    const state = this.getUninitializedStateFromPool();
    state.type = STATE_ARRAY;
    state.position = 0;
    state.size = size4;
    state.array = new Array(size4);
  }
  pushMapState(size4) {
    const state = this.getUninitializedStateFromPool();
    state.type = STATE_MAP_KEY;
    state.readCount = 0;
    state.size = size4;
    state.map = {};
  }
  getUninitializedStateFromPool() {
    this.stackHeadPosition++;
    if (this.stackHeadPosition === this.stack.length) {
      const partialState = {
        type: void 0,
        size: 0,
        array: void 0,
        position: 0,
        readCount: 0,
        map: void 0,
        key: null
      };
      this.stack.push(partialState);
    }
    return this.stack[this.stackHeadPosition];
  }
  release(state) {
    const topStackState = this.stack[this.stackHeadPosition];
    if (topStackState !== state) {
      throw new Error("Invalid stack state. Released state is not on top of the stack.");
    }
    if (state.type === STATE_ARRAY) {
      const partialState = state;
      partialState.size = 0;
      partialState.array = void 0;
      partialState.position = 0;
      partialState.type = void 0;
    }
    if (state.type === STATE_MAP_KEY || state.type === STATE_MAP_VALUE) {
      const partialState = state;
      partialState.size = 0;
      partialState.map = void 0;
      partialState.readCount = 0;
      partialState.type = void 0;
    }
    this.stackHeadPosition--;
  }
  reset() {
    this.stack.length = 0;
    this.stackHeadPosition = -1;
  }
};
var HEAD_BYTE_REQUIRED = -1;
var EMPTY_VIEW = new DataView(new ArrayBuffer(0));
var EMPTY_BYTES = new Uint8Array(EMPTY_VIEW.buffer);
try {
  EMPTY_VIEW.getInt8(0);
} catch (e) {
  if (!(e instanceof RangeError)) {
    throw new Error("This module is not supported in the current JavaScript engine because DataView does not throw RangeError on out-of-bounds access");
  }
}
var MORE_DATA = new RangeError("Insufficient data");
var sharedCachedKeyDecoder = new CachedKeyDecoder();
var Decoder = class _Decoder {
  constructor(options) {
    this.totalPos = 0;
    this.pos = 0;
    this.view = EMPTY_VIEW;
    this.bytes = EMPTY_BYTES;
    this.headByte = HEAD_BYTE_REQUIRED;
    this.stack = new StackPool();
    this.entered = false;
    this.extensionCodec = (options == null ? void 0 : options.extensionCodec) ?? ExtensionCodec.defaultCodec;
    this.context = options == null ? void 0 : options.context;
    this.useBigInt64 = (options == null ? void 0 : options.useBigInt64) ?? false;
    this.rawStrings = (options == null ? void 0 : options.rawStrings) ?? false;
    this.maxStrLength = (options == null ? void 0 : options.maxStrLength) ?? UINT32_MAX;
    this.maxBinLength = (options == null ? void 0 : options.maxBinLength) ?? UINT32_MAX;
    this.maxArrayLength = (options == null ? void 0 : options.maxArrayLength) ?? UINT32_MAX;
    this.maxMapLength = (options == null ? void 0 : options.maxMapLength) ?? UINT32_MAX;
    this.maxExtLength = (options == null ? void 0 : options.maxExtLength) ?? UINT32_MAX;
    this.keyDecoder = (options == null ? void 0 : options.keyDecoder) !== void 0 ? options.keyDecoder : sharedCachedKeyDecoder;
    this.mapKeyConverter = (options == null ? void 0 : options.mapKeyConverter) ?? mapKeyConverter;
  }
  clone() {
    return new _Decoder({
      extensionCodec: this.extensionCodec,
      context: this.context,
      useBigInt64: this.useBigInt64,
      rawStrings: this.rawStrings,
      maxStrLength: this.maxStrLength,
      maxBinLength: this.maxBinLength,
      maxArrayLength: this.maxArrayLength,
      maxMapLength: this.maxMapLength,
      maxExtLength: this.maxExtLength,
      keyDecoder: this.keyDecoder
    });
  }
  reinitializeState() {
    this.totalPos = 0;
    this.headByte = HEAD_BYTE_REQUIRED;
    this.stack.reset();
  }
  setBuffer(buffer) {
    const bytes = ensureUint8Array(buffer);
    this.bytes = bytes;
    this.view = new DataView(bytes.buffer, bytes.byteOffset, bytes.byteLength);
    this.pos = 0;
  }
  appendBuffer(buffer) {
    if (this.headByte === HEAD_BYTE_REQUIRED && !this.hasRemaining(1)) {
      this.setBuffer(buffer);
    } else {
      const remainingData = this.bytes.subarray(this.pos);
      const newData = ensureUint8Array(buffer);
      const newBuffer = new Uint8Array(remainingData.length + newData.length);
      newBuffer.set(remainingData);
      newBuffer.set(newData, remainingData.length);
      this.setBuffer(newBuffer);
    }
  }
  hasRemaining(size4) {
    return this.view.byteLength - this.pos >= size4;
  }
  createExtraByteError(posToShow) {
    const { view, pos } = this;
    return new RangeError(`Extra ${view.byteLength - pos} of ${view.byteLength} byte(s) found at buffer[${posToShow}]`);
  }
  /**
   * @throws {@link DecodeError}
   * @throws {@link RangeError}
   */
  decode(buffer) {
    if (this.entered) {
      const instance = this.clone();
      return instance.decode(buffer);
    }
    try {
      this.entered = true;
      this.reinitializeState();
      this.setBuffer(buffer);
      const object = this.doDecodeSync();
      if (this.hasRemaining(1)) {
        throw this.createExtraByteError(this.pos);
      }
      return object;
    } finally {
      this.entered = false;
    }
  }
  *decodeMulti(buffer) {
    if (this.entered) {
      const instance = this.clone();
      yield* instance.decodeMulti(buffer);
      return;
    }
    try {
      this.entered = true;
      this.reinitializeState();
      this.setBuffer(buffer);
      while (this.hasRemaining(1)) {
        yield this.doDecodeSync();
      }
    } finally {
      this.entered = false;
    }
  }
  async decodeAsync(stream) {
    if (this.entered) {
      const instance = this.clone();
      return instance.decodeAsync(stream);
    }
    try {
      this.entered = true;
      let decoded = false;
      let object;
      for await (const buffer of stream) {
        if (decoded) {
          this.entered = false;
          throw this.createExtraByteError(this.totalPos);
        }
        this.appendBuffer(buffer);
        try {
          object = this.doDecodeSync();
          decoded = true;
        } catch (e) {
          if (!(e instanceof RangeError)) {
            throw e;
          }
        }
        this.totalPos += this.pos;
      }
      if (decoded) {
        if (this.hasRemaining(1)) {
          throw this.createExtraByteError(this.totalPos);
        }
        return object;
      }
      const { headByte, pos, totalPos } = this;
      throw new RangeError(`Insufficient data in parsing ${prettyByte(headByte)} at ${totalPos} (${pos} in the current buffer)`);
    } finally {
      this.entered = false;
    }
  }
  decodeArrayStream(stream) {
    return this.decodeMultiAsync(stream, true);
  }
  decodeStream(stream) {
    return this.decodeMultiAsync(stream, false);
  }
  async *decodeMultiAsync(stream, isArray) {
    if (this.entered) {
      const instance = this.clone();
      yield* instance.decodeMultiAsync(stream, isArray);
      return;
    }
    try {
      this.entered = true;
      let isArrayHeaderRequired = isArray;
      let arrayItemsLeft = -1;
      for await (const buffer of stream) {
        if (isArray && arrayItemsLeft === 0) {
          throw this.createExtraByteError(this.totalPos);
        }
        this.appendBuffer(buffer);
        if (isArrayHeaderRequired) {
          arrayItemsLeft = this.readArraySize();
          isArrayHeaderRequired = false;
          this.complete();
        }
        try {
          while (true) {
            yield this.doDecodeSync();
            if (--arrayItemsLeft === 0) {
              break;
            }
          }
        } catch (e) {
          if (!(e instanceof RangeError)) {
            throw e;
          }
        }
        this.totalPos += this.pos;
      }
    } finally {
      this.entered = false;
    }
  }
  doDecodeSync() {
    DECODE: while (true) {
      const headByte = this.readHeadByte();
      let object;
      if (headByte >= 224) {
        object = headByte - 256;
      } else if (headByte < 192) {
        if (headByte < 128) {
          object = headByte;
        } else if (headByte < 144) {
          const size4 = headByte - 128;
          if (size4 !== 0) {
            this.pushMapState(size4);
            this.complete();
            continue DECODE;
          } else {
            object = {};
          }
        } else if (headByte < 160) {
          const size4 = headByte - 144;
          if (size4 !== 0) {
            this.pushArrayState(size4);
            this.complete();
            continue DECODE;
          } else {
            object = [];
          }
        } else {
          const byteLength = headByte - 160;
          object = this.decodeString(byteLength, 0);
        }
      } else if (headByte === 192) {
        object = null;
      } else if (headByte === 194) {
        object = false;
      } else if (headByte === 195) {
        object = true;
      } else if (headByte === 202) {
        object = this.readF32();
      } else if (headByte === 203) {
        object = this.readF64();
      } else if (headByte === 204) {
        object = this.readU8();
      } else if (headByte === 205) {
        object = this.readU16();
      } else if (headByte === 206) {
        object = this.readU32();
      } else if (headByte === 207) {
        if (this.useBigInt64) {
          object = this.readU64AsBigInt();
        } else {
          object = this.readU64();
        }
      } else if (headByte === 208) {
        object = this.readI8();
      } else if (headByte === 209) {
        object = this.readI16();
      } else if (headByte === 210) {
        object = this.readI32();
      } else if (headByte === 211) {
        if (this.useBigInt64) {
          object = this.readI64AsBigInt();
        } else {
          object = this.readI64();
        }
      } else if (headByte === 217) {
        const byteLength = this.lookU8();
        object = this.decodeString(byteLength, 1);
      } else if (headByte === 218) {
        const byteLength = this.lookU16();
        object = this.decodeString(byteLength, 2);
      } else if (headByte === 219) {
        const byteLength = this.lookU32();
        object = this.decodeString(byteLength, 4);
      } else if (headByte === 220) {
        const size4 = this.readU16();
        if (size4 !== 0) {
          this.pushArrayState(size4);
          this.complete();
          continue DECODE;
        } else {
          object = [];
        }
      } else if (headByte === 221) {
        const size4 = this.readU32();
        if (size4 !== 0) {
          this.pushArrayState(size4);
          this.complete();
          continue DECODE;
        } else {
          object = [];
        }
      } else if (headByte === 222) {
        const size4 = this.readU16();
        if (size4 !== 0) {
          this.pushMapState(size4);
          this.complete();
          continue DECODE;
        } else {
          object = {};
        }
      } else if (headByte === 223) {
        const size4 = this.readU32();
        if (size4 !== 0) {
          this.pushMapState(size4);
          this.complete();
          continue DECODE;
        } else {
          object = {};
        }
      } else if (headByte === 196) {
        const size4 = this.lookU8();
        object = this.decodeBinary(size4, 1);
      } else if (headByte === 197) {
        const size4 = this.lookU16();
        object = this.decodeBinary(size4, 2);
      } else if (headByte === 198) {
        const size4 = this.lookU32();
        object = this.decodeBinary(size4, 4);
      } else if (headByte === 212) {
        object = this.decodeExtension(1, 0);
      } else if (headByte === 213) {
        object = this.decodeExtension(2, 0);
      } else if (headByte === 214) {
        object = this.decodeExtension(4, 0);
      } else if (headByte === 215) {
        object = this.decodeExtension(8, 0);
      } else if (headByte === 216) {
        object = this.decodeExtension(16, 0);
      } else if (headByte === 199) {
        const size4 = this.lookU8();
        object = this.decodeExtension(size4, 1);
      } else if (headByte === 200) {
        const size4 = this.lookU16();
        object = this.decodeExtension(size4, 2);
      } else if (headByte === 201) {
        const size4 = this.lookU32();
        object = this.decodeExtension(size4, 4);
      } else {
        throw new DecodeError(`Unrecognized type byte: ${prettyByte(headByte)}`);
      }
      this.complete();
      const stack = this.stack;
      while (stack.length > 0) {
        const state = stack.top();
        if (state.type === STATE_ARRAY) {
          state.array[state.position] = object;
          state.position++;
          if (state.position === state.size) {
            object = state.array;
            stack.release(state);
          } else {
            continue DECODE;
          }
        } else if (state.type === STATE_MAP_KEY) {
          if (object === "__proto__") {
            throw new DecodeError("The key __proto__ is not allowed");
          }
          state.key = this.mapKeyConverter(object);
          state.type = STATE_MAP_VALUE;
          continue DECODE;
        } else {
          state.map[state.key] = object;
          state.readCount++;
          if (state.readCount === state.size) {
            object = state.map;
            stack.release(state);
          } else {
            state.key = null;
            state.type = STATE_MAP_KEY;
            continue DECODE;
          }
        }
      }
      return object;
    }
  }
  readHeadByte() {
    if (this.headByte === HEAD_BYTE_REQUIRED) {
      this.headByte = this.readU8();
    }
    return this.headByte;
  }
  complete() {
    this.headByte = HEAD_BYTE_REQUIRED;
  }
  readArraySize() {
    const headByte = this.readHeadByte();
    switch (headByte) {
      case 220:
        return this.readU16();
      case 221:
        return this.readU32();
      default: {
        if (headByte < 160) {
          return headByte - 144;
        } else {
          throw new DecodeError(`Unrecognized array type byte: ${prettyByte(headByte)}`);
        }
      }
    }
  }
  pushMapState(size4) {
    if (size4 > this.maxMapLength) {
      throw new DecodeError(`Max length exceeded: map length (${size4}) > maxMapLengthLength (${this.maxMapLength})`);
    }
    this.stack.pushMapState(size4);
  }
  pushArrayState(size4) {
    if (size4 > this.maxArrayLength) {
      throw new DecodeError(`Max length exceeded: array length (${size4}) > maxArrayLength (${this.maxArrayLength})`);
    }
    this.stack.pushArrayState(size4);
  }
  decodeString(byteLength, headerOffset) {
    if (!this.rawStrings || this.stateIsMapKey()) {
      return this.decodeUtf8String(byteLength, headerOffset);
    }
    return this.decodeBinary(byteLength, headerOffset);
  }
  /**
   * @throws {@link RangeError}
   */
  decodeUtf8String(byteLength, headerOffset) {
    var _a2;
    if (byteLength > this.maxStrLength) {
      throw new DecodeError(`Max length exceeded: UTF-8 byte length (${byteLength}) > maxStrLength (${this.maxStrLength})`);
    }
    if (this.bytes.byteLength < this.pos + headerOffset + byteLength) {
      throw MORE_DATA;
    }
    const offset = this.pos + headerOffset;
    let object;
    if (this.stateIsMapKey() && ((_a2 = this.keyDecoder) == null ? void 0 : _a2.canBeCached(byteLength))) {
      object = this.keyDecoder.decode(this.bytes, offset, byteLength);
    } else {
      object = utf8Decode(this.bytes, offset, byteLength);
    }
    this.pos += headerOffset + byteLength;
    return object;
  }
  stateIsMapKey() {
    if (this.stack.length > 0) {
      const state = this.stack.top();
      return state.type === STATE_MAP_KEY;
    }
    return false;
  }
  /**
   * @throws {@link RangeError}
   */
  decodeBinary(byteLength, headOffset) {
    if (byteLength > this.maxBinLength) {
      throw new DecodeError(`Max length exceeded: bin length (${byteLength}) > maxBinLength (${this.maxBinLength})`);
    }
    if (!this.hasRemaining(byteLength + headOffset)) {
      throw MORE_DATA;
    }
    const offset = this.pos + headOffset;
    const object = this.bytes.subarray(offset, offset + byteLength);
    this.pos += headOffset + byteLength;
    return object;
  }
  decodeExtension(size4, headOffset) {
    if (size4 > this.maxExtLength) {
      throw new DecodeError(`Max length exceeded: ext length (${size4}) > maxExtLength (${this.maxExtLength})`);
    }
    const extType = this.view.getInt8(this.pos + headOffset);
    const data = this.decodeBinary(
      size4,
      headOffset + 1
      /* extType */
    );
    return this.extensionCodec.decode(data, extType, this.context);
  }
  lookU8() {
    return this.view.getUint8(this.pos);
  }
  lookU16() {
    return this.view.getUint16(this.pos);
  }
  lookU32() {
    return this.view.getUint32(this.pos);
  }
  readU8() {
    const value = this.view.getUint8(this.pos);
    this.pos++;
    return value;
  }
  readI8() {
    const value = this.view.getInt8(this.pos);
    this.pos++;
    return value;
  }
  readU16() {
    const value = this.view.getUint16(this.pos);
    this.pos += 2;
    return value;
  }
  readI16() {
    const value = this.view.getInt16(this.pos);
    this.pos += 2;
    return value;
  }
  readU32() {
    const value = this.view.getUint32(this.pos);
    this.pos += 4;
    return value;
  }
  readI32() {
    const value = this.view.getInt32(this.pos);
    this.pos += 4;
    return value;
  }
  readU64() {
    const value = getUint64(this.view, this.pos);
    this.pos += 8;
    return value;
  }
  readI64() {
    const value = getInt64(this.view, this.pos);
    this.pos += 8;
    return value;
  }
  readU64AsBigInt() {
    const value = this.view.getBigUint64(this.pos);
    this.pos += 8;
    return value;
  }
  readI64AsBigInt() {
    const value = this.view.getBigInt64(this.pos);
    this.pos += 8;
    return value;
  }
  readF32() {
    const value = this.view.getFloat32(this.pos);
    this.pos += 4;
    return value;
  }
  readF64() {
    const value = this.view.getFloat64(this.pos);
    this.pos += 8;
    return value;
  }
};

// node_modules/@msgpack/msgpack/dist.esm/decode.mjs
function decode2(buffer, options) {
  const decoder = new Decoder(options);
  return decoder.decode(buffer);
}

// node_modules/@walletconnect/universal-provider/node_modules/uint8arrays/esm/src/util/as-uint8array.js
function asUint8Array(buf) {
  if (globalThis.Buffer != null) {
    return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength);
  }
  return buf;
}

// node_modules/@walletconnect/universal-provider/node_modules/uint8arrays/esm/src/alloc.js
function allocUnsafe(size4 = 0) {
  if (globalThis.Buffer != null && globalThis.Buffer.allocUnsafe != null) {
    return asUint8Array(globalThis.Buffer.allocUnsafe(size4));
  }
  return new Uint8Array(size4);
}

// node_modules/@walletconnect/universal-provider/node_modules/uint8arrays/esm/src/concat.js
function concat3(arrays, length) {
  if (!length) {
    length = arrays.reduce((acc, curr) => acc + curr.length, 0);
  }
  const output = allocUnsafe(length);
  let offset = 0;
  for (const arr of arrays) {
    output.set(arr, offset);
    offset += arr.length;
  }
  return asUint8Array(output);
}

// node_modules/@walletconnect/universal-provider/node_modules/uint8arrays/esm/src/util/bases.js
function createCodec(name, prefix, encode5, decode3) {
  return {
    name,
    prefix,
    encoder: {
      name,
      prefix,
      encode: encode5
    },
    decoder: { decode: decode3 }
  };
}
var string = createCodec("utf8", "u", (buf) => {
  const decoder = new TextDecoder("utf8");
  return "u" + decoder.decode(buf);
}, (str) => {
  const encoder = new TextEncoder();
  return encoder.encode(str.substring(1));
});
var ascii = createCodec("ascii", "a", (buf) => {
  let string2 = "a";
  for (let i3 = 0; i3 < buf.length; i3++) {
    string2 += String.fromCharCode(buf[i3]);
  }
  return string2;
}, (str) => {
  str = str.substring(1);
  const buf = allocUnsafe(str.length);
  for (let i3 = 0; i3 < str.length; i3++) {
    buf[i3] = str.charCodeAt(i3);
  }
  return buf;
});
var BASES = {
  utf8: string,
  "utf-8": string,
  hex: bases.base16,
  latin1: ascii,
  ascii,
  binary: ascii,
  ...bases
};
var bases_default = BASES;

// node_modules/@walletconnect/universal-provider/node_modules/uint8arrays/esm/src/from-string.js
function fromString3(string2, encoding = "utf8") {
  const base = bases_default[encoding];
  if (!base) {
    throw new Error(`Unsupported encoding "${encoding}"`);
  }
  if ((encoding === "utf8" || encoding === "utf-8") && globalThis.Buffer != null && globalThis.Buffer.from != null) {
    return asUint8Array(globalThis.Buffer.from(string2, "utf-8"));
  }
  return base.decoder.decode(`${base.prefix}${string2}`);
}

// node_modules/@walletconnect/universal-provider/node_modules/uint8arrays/esm/src/to-string.js
function toString2(array, encoding = "utf8") {
  const base = bases_default[encoding];
  if (!base) {
    throw new Error(`Unsupported encoding "${encoding}"`);
  }
  if ((encoding === "utf8" || encoding === "utf-8") && globalThis.Buffer != null && globalThis.Buffer.from != null) {
    return globalThis.Buffer.from(array.buffer, array.byteOffset, array.byteLength).toString("utf8");
  }
  return base.encoder.encode(array).substring(1);
}

// node_modules/@walletconnect/universal-provider/node_modules/@walletconnect/utils/dist/index.es.js
var import_blakejs = __toESM(require_blakejs());
var xe = ":";
function Fe(t) {
  const [e, n2] = t.split(xe);
  return { namespace: e, reference: n2 };
}
function ve(t, e) {
  return t.includes(":") ? [t] : e.chains || [];
}
var $s = Object.defineProperty;
var Cs = Object.defineProperties;
var Ls = Object.getOwnPropertyDescriptors;
var Jn = Object.getOwnPropertySymbols;
var js = Object.prototype.hasOwnProperty;
var ks = Object.prototype.propertyIsEnumerable;
var Ze = (t, e, n2) => e in t ? $s(t, e, { enumerable: true, configurable: true, writable: true, value: n2 }) : t[e] = n2;
var Qn = (t, e) => {
  for (var n2 in e || (e = {})) js.call(e, n2) && Ze(t, n2, e[n2]);
  if (Jn) for (var n2 of Jn(e)) ks.call(e, n2) && Ze(t, n2, e[n2]);
  return t;
};
var Ps = (t, e) => Cs(t, Ls(e));
var tr = (t, e, n2) => Ze(t, typeof e != "symbol" ? e + "" : e, n2);
var er = "ReactNative";
var J2 = { reactNative: "react-native", node: "node", browser: "browser", unknown: "unknown" };
var rr = "js";
function Ye() {
  return typeof process < "u" && typeof process.versions < "u" && typeof process.versions.node < "u";
}
function Bt() {
  return !(0, import_window_getters.getDocument)() && !!(0, import_window_getters.getNavigator)() && navigator.product === er;
}
function Ms() {
  return Bt() && typeof global < "u" && typeof (global == null ? void 0 : global.Platform) < "u" && (global == null ? void 0 : global.Platform.OS) === "android";
}
function Vs() {
  return Bt() && typeof global < "u" && typeof (global == null ? void 0 : global.Platform) < "u" && (global == null ? void 0 : global.Platform.OS) === "ios";
}
function zt() {
  return !Ye() && !!(0, import_window_getters.getNavigator)() && !!(0, import_window_getters.getDocument)();
}
function Pt() {
  return Bt() ? J2.reactNative : Ye() ? J2.node : zt() ? J2.browser : J2.unknown;
}
function qs() {
  var t;
  try {
    return Bt() && typeof global < "u" && typeof (global == null ? void 0 : global.Application) < "u" ? (t = global.Application) == null ? void 0 : t.applicationId : void 0;
  } catch {
    return;
  }
}
function or(t, e) {
  const n2 = new URLSearchParams(t);
  for (const r2 of Object.keys(e).sort()) if (e.hasOwnProperty(r2)) {
    const o3 = e[r2];
    o3 !== void 0 && n2.set(r2, o3);
  }
  return n2.toString();
}
function Ks(t) {
  var e, n2;
  const r2 = sr();
  try {
    return t != null && t.url && r2.url && new URL(t.url).host !== new URL(r2.url).host && (console.warn(`The configured WalletConnect 'metadata.url':${t.url} differs from the actual page url:${r2.url}. This is probably unintended and can lead to issues.`), t.url = r2.url), (e = t == null ? void 0 : t.icons) != null && e.length && t.icons.length > 0 && (t.icons = t.icons.filter((o3) => o3 !== "")), Ps(Qn(Qn({}, r2), t), { url: (t == null ? void 0 : t.url) || r2.url, name: (t == null ? void 0 : t.name) || r2.name, description: (t == null ? void 0 : t.description) || r2.description, icons: (n2 = t == null ? void 0 : t.icons) != null && n2.length && t.icons.length > 0 ? t.icons : r2.icons });
  } catch (o3) {
    return console.warn("Error populating app metadata", o3), t || r2;
  }
}
function sr() {
  return (0, import_window_metadata.getWindowMetadata)() || { name: "", description: "", url: "", icons: [""] };
}
function ir() {
  if (Pt() === J2.reactNative && typeof global < "u" && typeof (global == null ? void 0 : global.Platform) < "u") {
    const { OS: n2, Version: r2 } = global.Platform;
    return [n2, r2].join("-");
  }
  const t = detect();
  if (t === null) return "unknown";
  const e = t.os ? t.os.replace(" ", "").toLowerCase() : "unknown";
  return t.type === "browser" ? [e, t.name, t.version].join("-") : [e, t.version].join("-");
}
function fr() {
  var t;
  const e = Pt();
  return e === J2.browser ? [e, ((t = (0, import_window_getters.getLocation)()) == null ? void 0 : t.host) || "unknown"].join(":") : e;
}
function cr(t, e, n2) {
  const r2 = ir(), o3 = fr();
  return [[t, e].join("-"), [rr, n2].join("-"), r2, o3].join("/");
}
function zs({ protocol: t, version: e, relayUrl: n2, sdkVersion: r2, auth: o3, projectId: s, useOnCloseEvent: i3, bundleId: f7, packageName: c4 }) {
  const u3 = n2.split("?"), a2 = cr(t, e, r2), l4 = { auth: o3, ua: a2, projectId: s, useOnCloseEvent: i3 || void 0, packageName: c4 || void 0, bundleId: f7 || void 0 }, h4 = or(u3[1] || "", l4);
  return u3[0] + "?" + h4;
}
function It(t, e) {
  return t.filter((n2) => e.includes(n2)).length === t.length;
}
function Ys(t) {
  return Object.fromEntries(t.entries());
}
function Xs(t) {
  return new Map(Object.entries(t));
}
function ei(t = import_time.FIVE_MINUTES, e) {
  const n2 = (0, import_time.toMiliseconds)(t || import_time.FIVE_MINUTES);
  let r2, o3, s, i3;
  return { resolve: (f7) => {
    s && r2 && (clearTimeout(s), r2(f7), i3 = Promise.resolve(f7));
  }, reject: (f7) => {
    s && o3 && (clearTimeout(s), o3(f7));
  }, done: () => new Promise((f7, c4) => {
    if (i3) return f7(i3);
    s = setTimeout(() => {
      const u3 = new Error(e);
      i3 = Promise.reject(u3), c4(u3);
    }, n2), r2 = f7, o3 = c4;
  }) };
}
function ni(t, e, n2) {
  return new Promise(async (r2, o3) => {
    const s = setTimeout(() => o3(new Error(n2)), e);
    try {
      const i3 = await t;
      r2(i3);
    } catch (i3) {
      o3(i3);
    }
    clearTimeout(s);
  });
}
function Xe(t, e) {
  if (typeof e == "string" && e.startsWith(`${t}:`)) return e;
  if (t.toLowerCase() === "topic") {
    if (typeof e != "string") throw new Error('Value must be "string" for expirer target type: topic');
    return `topic:${e}`;
  } else if (t.toLowerCase() === "id") {
    if (typeof e != "number") throw new Error('Value must be "number" for expirer target type: id');
    return `id:${e}`;
  }
  throw new Error(`Unknown expirer target type: ${t}`);
}
function ri(t) {
  return Xe("topic", t);
}
function oi(t) {
  return Xe("id", t);
}
function si(t) {
  const [e, n2] = t.split(":"), r2 = { id: void 0, topic: void 0 };
  if (e === "topic" && typeof n2 == "string") r2.topic = n2;
  else if (e === "id" && Number.isInteger(Number(n2))) r2.id = Number(n2);
  else throw new Error(`Invalid target, expected id:number or topic:string, got ${e}:${n2}`);
  return r2;
}
function ii(t, e) {
  return (0, import_time.fromMiliseconds)((e || Date.now()) + (0, import_time.toMiliseconds)(t));
}
function fi(t) {
  return Date.now() >= (0, import_time.toMiliseconds)(t);
}
function ci(t, e) {
  return `${t}${e ? `:${e}` : ""}`;
}
function ct(t = [], e = []) {
  return [.../* @__PURE__ */ new Set([...t, ...e])];
}
async function ai({ id: t, topic: e, wcDeepLink: n2 }) {
  var r2;
  try {
    if (!n2) return;
    const o3 = typeof n2 == "string" ? JSON.parse(n2) : n2, s = o3 == null ? void 0 : o3.href;
    if (typeof s != "string") return;
    const i3 = dr(s, t, e), f7 = Pt();
    if (f7 === J2.browser) {
      if (!((r2 = (0, import_window_getters.getDocument)()) != null && r2.hasFocus())) {
        console.warn("Document does not have focus, skipping deeplink.");
        return;
      }
      hr(i3);
    } else f7 === J2.reactNative && typeof (global == null ? void 0 : global.Linking) < "u" && await global.Linking.openURL(i3);
  } catch (o3) {
    console.error(o3);
  }
}
function dr(t, e, n2) {
  const r2 = `requestId=${e}&sessionTopic=${n2}`;
  t.endsWith("/") && (t = t.slice(0, -1));
  let o3 = `${t}`;
  if (t.startsWith("https://t.me")) {
    const s = t.includes("?") ? "&startapp=" : "?startapp=";
    o3 = `${o3}${s}${br(r2, true)}`;
  } else o3 = `${o3}/wc?${r2}`;
  return o3;
}
function hr(t) {
  let e = "_self";
  gr() ? e = "_top" : (pr() || t.startsWith("https://") || t.startsWith("http://")) && (e = "_blank"), window.open(t, e, "noreferrer noopener");
}
async function ui(t, e) {
  let n2 = "";
  try {
    if (zt() && (n2 = localStorage.getItem(e), n2)) return n2;
    n2 = await t.getItem(e);
  } catch (r2) {
    console.error(r2);
  }
  return n2;
}
function li(t, e) {
  if (!t.includes(e)) return null;
  const n2 = t.split(/([&,?,=])/), r2 = n2.indexOf(e);
  return n2[r2 + 2];
}
function di() {
  return typeof crypto < "u" && crypto != null && crypto.randomUUID ? crypto.randomUUID() : "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/gu, (t) => {
    const e = Math.random() * 16 | 0;
    return (t === "x" ? e : e & 3 | 8).toString(16);
  });
}
function hi() {
  return typeof process < "u" && process.env.IS_VITEST === "true";
}
function pr() {
  return typeof window < "u" && (!!window.TelegramWebviewProxy || !!window.Telegram || !!window.TelegramWebviewProxyProto);
}
function gr() {
  try {
    return window.self !== window.top;
  } catch {
    return false;
  }
}
function br(t, e = false) {
  const n2 = Buffer.from(t).toString("base64");
  return e ? n2.replace(/[=]/g, "") : n2;
}
function Qe2(t) {
  return Buffer.from(t, "base64").toString("utf-8");
}
function pi(t) {
  return new Promise((e) => setTimeout(e, t));
}
var gi = class {
  constructor({ limit: e }) {
    tr(this, "limit"), tr(this, "set"), this.limit = e, this.set = /* @__PURE__ */ new Set();
  }
  add(e) {
    if (!this.set.has(e)) {
      if (this.set.size >= this.limit) {
        const n2 = this.set.values().next().value;
        n2 && this.set.delete(n2);
      }
      this.set.add(e);
    }
  }
  has(e) {
    return this.set.has(e);
  }
};
var Be = BigInt(2 ** 32 - 1);
var yr = BigInt(32);
function mr(t, e = false) {
  return e ? { h: Number(t & Be), l: Number(t >> yr & Be) } : { h: Number(t >> yr & Be) | 0, l: Number(t & Be) | 0 };
}
function wr(t, e = false) {
  const n2 = t.length;
  let r2 = new Uint32Array(n2), o3 = new Uint32Array(n2);
  for (let s = 0; s < n2; s++) {
    const { h: i3, l: f7 } = mr(t[s], e);
    [r2[s], o3[s]] = [i3, f7];
  }
  return [r2, o3];
}
var xr = (t, e, n2) => t >>> n2;
var vr = (t, e, n2) => t << 32 - n2 | e >>> n2;
var At = (t, e, n2) => t >>> n2 | e << 32 - n2;
var St = (t, e, n2) => t << 32 - n2 | e >>> n2;
var se = (t, e, n2) => t << 64 - n2 | e >>> n2 - 32;
var ie = (t, e, n2) => t >>> n2 - 32 | e << 64 - n2;
var bi = (t, e) => e;
var yi = (t, e) => t;
var mi = (t, e, n2) => t << n2 | e >>> 32 - n2;
var wi = (t, e, n2) => e << n2 | t >>> 32 - n2;
var xi = (t, e, n2) => e << n2 - 32 | t >>> 64 - n2;
var vi = (t, e, n2) => t << n2 - 32 | e >>> 64 - n2;
function dt(t, e, n2, r2) {
  const o3 = (e >>> 0) + (r2 >>> 0);
  return { h: t + n2 + (o3 / 2 ** 32 | 0) | 0, l: o3 | 0 };
}
var tn = (t, e, n2) => (t >>> 0) + (e >>> 0) + (n2 >>> 0);
var en = (t, e, n2, r2) => e + n2 + r2 + (t / 2 ** 32 | 0) | 0;
var Ei = (t, e, n2, r2) => (t >>> 0) + (e >>> 0) + (n2 >>> 0) + (r2 >>> 0);
var Bi = (t, e, n2, r2, o3) => e + n2 + r2 + o3 + (t / 2 ** 32 | 0) | 0;
var Ii = (t, e, n2, r2, o3) => (t >>> 0) + (e >>> 0) + (n2 >>> 0) + (r2 >>> 0) + (o3 >>> 0);
var Ai = (t, e, n2, r2, o3, s) => e + n2 + r2 + o3 + s + (t / 2 ** 32 | 0) | 0;
var Gt = typeof globalThis == "object" && "crypto" in globalThis ? globalThis.crypto : void 0;
function nn(t) {
  return t instanceof Uint8Array || ArrayBuffer.isView(t) && t.constructor.name === "Uint8Array";
}
function mt(t) {
  if (!Number.isSafeInteger(t) || t < 0) throw new Error("positive integer expected, got " + t);
}
function at(t, ...e) {
  if (!nn(t)) throw new Error("Uint8Array expected");
  if (e.length > 0 && !e.includes(t.length)) throw new Error("Uint8Array expected of length " + e + ", got length=" + t.length);
}
function rn(t) {
  if (typeof t != "function" || typeof t.create != "function") throw new Error("Hash should be wrapped by utils.createHasher");
  mt(t.outputLen), mt(t.blockLen);
}
function Nt(t, e = true) {
  if (t.destroyed) throw new Error("Hash instance has been destroyed");
  if (e && t.finished) throw new Error("Hash#digest() has already been called");
}
function on(t, e) {
  at(t);
  const n2 = e.outputLen;
  if (t.length < n2) throw new Error("digestInto() expects output buffer of length at least " + n2);
}
function fe(t) {
  return new Uint32Array(t.buffer, t.byteOffset, Math.floor(t.byteLength / 4));
}
function ut(...t) {
  for (let e = 0; e < t.length; e++) t[e].fill(0);
}
function sn2(t) {
  return new DataView(t.buffer, t.byteOffset, t.byteLength);
}
function gt(t, e) {
  return t << 32 - e | t >>> e;
}
var Er = new Uint8Array(new Uint32Array([287454020]).buffer)[0] === 68;
function Br(t) {
  return t << 24 & 4278190080 | t << 8 & 16711680 | t >>> 8 & 65280 | t >>> 24 & 255;
}
var wt = Er ? (t) => t : (t) => Br(t);
function Si(t) {
  for (let e = 0; e < t.length; e++) t[e] = Br(t[e]);
  return t;
}
var Ot = Er ? (t) => t : Si;
var Ir = typeof Uint8Array.from([]).toHex == "function" && typeof Uint8Array.fromHex == "function";
var Ni = Array.from({ length: 256 }, (t, e) => e.toString(16).padStart(2, "0"));
function ce(t) {
  if (at(t), Ir) return t.toHex();
  let e = "";
  for (let n2 = 0; n2 < t.length; n2++) e += Ni[t[n2]];
  return e;
}
var xt = { _0: 48, _9: 57, A: 65, F: 70, a: 97, f: 102 };
function Ar(t) {
  if (t >= xt._0 && t <= xt._9) return t - xt._0;
  if (t >= xt.A && t <= xt.F) return t - (xt.A - 10);
  if (t >= xt.a && t <= xt.f) return t - (xt.a - 10);
}
function fn(t) {
  if (typeof t != "string") throw new Error("hex string expected, got " + typeof t);
  if (Ir) return Uint8Array.fromHex(t);
  const e = t.length, n2 = e / 2;
  if (e % 2) throw new Error("hex string expected, got unpadded hex of length " + e);
  const r2 = new Uint8Array(n2);
  for (let o3 = 0, s = 0; o3 < n2; o3++, s += 2) {
    const i3 = Ar(t.charCodeAt(s)), f7 = Ar(t.charCodeAt(s + 1));
    if (i3 === void 0 || f7 === void 0) {
      const c4 = t[s] + t[s + 1];
      throw new Error('hex string expected, got non-hex character "' + c4 + '" at index ' + s);
    }
    r2[o3] = i3 * 16 + f7;
  }
  return r2;
}
function Oi(t) {
  if (typeof t != "string") throw new Error("string expected");
  return new Uint8Array(new TextEncoder().encode(t));
}
function ht(t) {
  return typeof t == "string" && (t = Oi(t)), at(t), t;
}
function Ht(...t) {
  let e = 0;
  for (let r2 = 0; r2 < t.length; r2++) {
    const o3 = t[r2];
    at(o3), e += o3.length;
  }
  const n2 = new Uint8Array(e);
  for (let r2 = 0, o3 = 0; r2 < t.length; r2++) {
    const s = t[r2];
    n2.set(s, o3), o3 += s.length;
  }
  return n2;
}
var Ie = class {
};
function ae(t) {
  const e = (r2) => t().update(ht(r2)).digest(), n2 = t();
  return e.outputLen = n2.outputLen, e.blockLen = n2.blockLen, e.create = () => t(), e;
}
function Ui(t) {
  const e = (r2, o3) => t(o3).update(ht(r2)).digest(), n2 = t({});
  return e.outputLen = n2.outputLen, e.blockLen = n2.blockLen, e.create = (r2) => t(r2), e;
}
function Zt(t = 32) {
  if (Gt && typeof Gt.getRandomValues == "function") return Gt.getRandomValues(new Uint8Array(t));
  if (Gt && typeof Gt.randomBytes == "function") return Uint8Array.from(Gt.randomBytes(t));
  throw new Error("crypto.getRandomValues must be defined");
}
var _i = BigInt(0);
var ue = BigInt(1);
var Ti = BigInt(2);
var Ri = BigInt(7);
var $i = BigInt(256);
var Ci = BigInt(113);
var Sr = [];
var Nr = [];
var Or = [];
for (let t = 0, e = ue, n2 = 1, r2 = 0; t < 24; t++) {
  [n2, r2] = [r2, (2 * n2 + 3 * r2) % 5], Sr.push(2 * (5 * r2 + n2)), Nr.push((t + 1) * (t + 2) / 2 % 64);
  let o3 = _i;
  for (let s = 0; s < 7; s++) e = (e << ue ^ (e >> Ri) * Ci) % $i, e & Ti && (o3 ^= ue << (ue << BigInt(s)) - ue);
  Or.push(o3);
}
var Ur = wr(Or, true);
var Li = Ur[0];
var ji = Ur[1];
var _r = (t, e, n2) => n2 > 32 ? xi(t, e, n2) : mi(t, e, n2);
var Tr = (t, e, n2) => n2 > 32 ? vi(t, e, n2) : wi(t, e, n2);
function ki(t, e = 24) {
  const n2 = new Uint32Array(10);
  for (let r2 = 24 - e; r2 < 24; r2++) {
    for (let i3 = 0; i3 < 10; i3++) n2[i3] = t[i3] ^ t[i3 + 10] ^ t[i3 + 20] ^ t[i3 + 30] ^ t[i3 + 40];
    for (let i3 = 0; i3 < 10; i3 += 2) {
      const f7 = (i3 + 8) % 10, c4 = (i3 + 2) % 10, u3 = n2[c4], a2 = n2[c4 + 1], l4 = _r(u3, a2, 1) ^ n2[f7], h4 = Tr(u3, a2, 1) ^ n2[f7 + 1];
      for (let g2 = 0; g2 < 50; g2 += 10) t[i3 + g2] ^= l4, t[i3 + g2 + 1] ^= h4;
    }
    let o3 = t[2], s = t[3];
    for (let i3 = 0; i3 < 24; i3++) {
      const f7 = Nr[i3], c4 = _r(o3, s, f7), u3 = Tr(o3, s, f7), a2 = Sr[i3];
      o3 = t[a2], s = t[a2 + 1], t[a2] = c4, t[a2 + 1] = u3;
    }
    for (let i3 = 0; i3 < 50; i3 += 10) {
      for (let f7 = 0; f7 < 10; f7++) n2[f7] = t[i3 + f7];
      for (let f7 = 0; f7 < 10; f7++) t[i3 + f7] ^= ~n2[(f7 + 2) % 10] & n2[(f7 + 4) % 10];
    }
    t[0] ^= Li[r2], t[1] ^= ji[r2];
  }
  ut(n2);
}
var qn = class _qn extends Ie {
  constructor(e, n2, r2, o3 = false, s = 24) {
    if (super(), this.pos = 0, this.posOut = 0, this.finished = false, this.destroyed = false, this.enableXOF = false, this.blockLen = e, this.suffix = n2, this.outputLen = r2, this.enableXOF = o3, this.rounds = s, mt(r2), !(0 < e && e < 200)) throw new Error("only keccak-f1600 function is supported");
    this.state = new Uint8Array(200), this.state32 = fe(this.state);
  }
  clone() {
    return this._cloneInto();
  }
  keccak() {
    Ot(this.state32), ki(this.state32, this.rounds), Ot(this.state32), this.posOut = 0, this.pos = 0;
  }
  update(e) {
    Nt(this), e = ht(e), at(e);
    const { blockLen: n2, state: r2 } = this, o3 = e.length;
    for (let s = 0; s < o3; ) {
      const i3 = Math.min(n2 - this.pos, o3 - s);
      for (let f7 = 0; f7 < i3; f7++) r2[this.pos++] ^= e[s++];
      this.pos === n2 && this.keccak();
    }
    return this;
  }
  finish() {
    if (this.finished) return;
    this.finished = true;
    const { state: e, suffix: n2, pos: r2, blockLen: o3 } = this;
    e[r2] ^= n2, (n2 & 128) !== 0 && r2 === o3 - 1 && this.keccak(), e[o3 - 1] ^= 128, this.keccak();
  }
  writeInto(e) {
    Nt(this, false), at(e), this.finish();
    const n2 = this.state, { blockLen: r2 } = this;
    for (let o3 = 0, s = e.length; o3 < s; ) {
      this.posOut >= r2 && this.keccak();
      const i3 = Math.min(r2 - this.posOut, s - o3);
      e.set(n2.subarray(this.posOut, this.posOut + i3), o3), this.posOut += i3, o3 += i3;
    }
    return e;
  }
  xofInto(e) {
    if (!this.enableXOF) throw new Error("XOF is not possible for this instance");
    return this.writeInto(e);
  }
  xof(e) {
    return mt(e), this.xofInto(new Uint8Array(e));
  }
  digestInto(e) {
    if (on(e, this), this.finished) throw new Error("digest() was already called");
    return this.writeInto(e), this.destroy(), e;
  }
  digest() {
    return this.digestInto(new Uint8Array(this.outputLen));
  }
  destroy() {
    this.destroyed = true, ut(this.state);
  }
  _cloneInto(e) {
    const { blockLen: n2, suffix: r2, outputLen: o3, rounds: s, enableXOF: i3 } = this;
    return e || (e = new _qn(n2, r2, o3, i3, s)), e.state32.set(this.state32), e.pos = this.pos, e.posOut = this.posOut, e.finished = this.finished, e.rounds = s, e.suffix = r2, e.outputLen = o3, e.enableXOF = i3, e.destroyed = this.destroyed, e;
  }
};
var Pi = (t, e, n2) => ae(() => new qn(e, t, n2));
var Hi = Pi(1, 136, 256 / 8);
function Di(t, e, n2, r2) {
  if (typeof t.setBigUint64 == "function") return t.setBigUint64(e, n2, r2);
  const o3 = BigInt(32), s = BigInt(4294967295), i3 = Number(n2 >> o3 & s), f7 = Number(n2 & s), c4 = r2 ? 4 : 0, u3 = r2 ? 0 : 4;
  t.setUint32(e + c4, i3, r2), t.setUint32(e + u3, f7, r2);
}
function Mi(t, e, n2) {
  return t & e ^ ~t & n2;
}
function Vi(t, e, n2) {
  return t & e ^ t & n2 ^ e & n2;
}
var Rr = class extends Ie {
  constructor(e, n2, r2, o3) {
    super(), this.finished = false, this.length = 0, this.pos = 0, this.destroyed = false, this.blockLen = e, this.outputLen = n2, this.padOffset = r2, this.isLE = o3, this.buffer = new Uint8Array(e), this.view = sn2(this.buffer);
  }
  update(e) {
    Nt(this), e = ht(e), at(e);
    const { view: n2, buffer: r2, blockLen: o3 } = this, s = e.length;
    for (let i3 = 0; i3 < s; ) {
      const f7 = Math.min(o3 - this.pos, s - i3);
      if (f7 === o3) {
        const c4 = sn2(e);
        for (; o3 <= s - i3; i3 += o3) this.process(c4, i3);
        continue;
      }
      r2.set(e.subarray(i3, i3 + f7), this.pos), this.pos += f7, i3 += f7, this.pos === o3 && (this.process(n2, 0), this.pos = 0);
    }
    return this.length += e.length, this.roundClean(), this;
  }
  digestInto(e) {
    Nt(this), on(e, this), this.finished = true;
    const { buffer: n2, view: r2, blockLen: o3, isLE: s } = this;
    let { pos: i3 } = this;
    n2[i3++] = 128, ut(this.buffer.subarray(i3)), this.padOffset > o3 - i3 && (this.process(r2, 0), i3 = 0);
    for (let l4 = i3; l4 < o3; l4++) n2[l4] = 0;
    Di(r2, o3 - 8, BigInt(this.length * 8), s), this.process(r2, 0);
    const f7 = sn2(e), c4 = this.outputLen;
    if (c4 % 4) throw new Error("_sha2: outputLen should be aligned to 32bit");
    const u3 = c4 / 4, a2 = this.get();
    if (u3 > a2.length) throw new Error("_sha2: outputLen bigger than state");
    for (let l4 = 0; l4 < u3; l4++) f7.setUint32(4 * l4, a2[l4], s);
  }
  digest() {
    const { buffer: e, outputLen: n2 } = this;
    this.digestInto(e);
    const r2 = e.slice(0, n2);
    return this.destroy(), r2;
  }
  _cloneInto(e) {
    e || (e = new this.constructor()), e.set(...this.get());
    const { blockLen: n2, buffer: r2, length: o3, finished: s, destroyed: i3, pos: f7 } = this;
    return e.destroyed = i3, e.finished = s, e.length = o3, e.pos = f7, o3 % n2 && e.buffer.set(r2), e;
  }
  clone() {
    return this._cloneInto();
  }
};
var Ut = Uint32Array.from([1779033703, 3144134277, 1013904242, 2773480762, 1359893119, 2600822924, 528734635, 1541459225]);
var W = Uint32Array.from([3418070365, 3238371032, 1654270250, 914150663, 2438529370, 812702999, 355462360, 4144912697, 1731405415, 4290775857, 2394180231, 1750603025, 3675008525, 1694076839, 1203062813, 3204075428]);
var Y = Uint32Array.from([1779033703, 4089235720, 3144134277, 2227873595, 1013904242, 4271175723, 2773480762, 1595750129, 1359893119, 2917565137, 2600822924, 725511199, 528734635, 4215389547, 1541459225, 327033209]);
var qi = Uint32Array.from([1116352408, 1899447441, 3049323471, 3921009573, 961987163, 1508970993, 2453635748, 2870763221, 3624381080, 310598401, 607225278, 1426881987, 1925078388, 2162078206, 2614888103, 3248222580, 3835390401, 4022224774, 264347078, 604807628, 770255983, 1249150122, 1555081692, 1996064986, 2554220882, 2821834349, 2952996808, 3210313671, 3336571891, 3584528711, 113926993, 338241895, 666307205, 773529912, 1294757372, 1396182291, 1695183700, 1986661051, 2177026350, 2456956037, 2730485921, 2820302411, 3259730800, 3345764771, 3516065817, 3600352804, 4094571909, 275423344, 430227734, 506948616, 659060556, 883997877, 958139571, 1322822218, 1537002063, 1747873779, 1955562222, 2024104815, 2227730452, 2361852424, 2428436474, 2756734187, 3204031479, 3329325298]);
var _t = new Uint32Array(64);
var Ki = class extends Rr {
  constructor(e = 32) {
    super(64, e, 8, false), this.A = Ut[0] | 0, this.B = Ut[1] | 0, this.C = Ut[2] | 0, this.D = Ut[3] | 0, this.E = Ut[4] | 0, this.F = Ut[5] | 0, this.G = Ut[6] | 0, this.H = Ut[7] | 0;
  }
  get() {
    const { A: e, B: n2, C: r2, D: o3, E: s, F: i3, G: f7, H: c4 } = this;
    return [e, n2, r2, o3, s, i3, f7, c4];
  }
  set(e, n2, r2, o3, s, i3, f7, c4) {
    this.A = e | 0, this.B = n2 | 0, this.C = r2 | 0, this.D = o3 | 0, this.E = s | 0, this.F = i3 | 0, this.G = f7 | 0, this.H = c4 | 0;
  }
  process(e, n2) {
    for (let l4 = 0; l4 < 16; l4++, n2 += 4) _t[l4] = e.getUint32(n2, false);
    for (let l4 = 16; l4 < 64; l4++) {
      const h4 = _t[l4 - 15], g2 = _t[l4 - 2], m3 = gt(h4, 7) ^ gt(h4, 18) ^ h4 >>> 3, b3 = gt(g2, 17) ^ gt(g2, 19) ^ g2 >>> 10;
      _t[l4] = b3 + _t[l4 - 7] + m3 + _t[l4 - 16] | 0;
    }
    let { A: r2, B: o3, C: s, D: i3, E: f7, F: c4, G: u3, H: a2 } = this;
    for (let l4 = 0; l4 < 64; l4++) {
      const h4 = gt(f7, 6) ^ gt(f7, 11) ^ gt(f7, 25), g2 = a2 + h4 + Mi(f7, c4, u3) + qi[l4] + _t[l4] | 0, b3 = (gt(r2, 2) ^ gt(r2, 13) ^ gt(r2, 22)) + Vi(r2, o3, s) | 0;
      a2 = u3, u3 = c4, c4 = f7, f7 = i3 + g2 | 0, i3 = s, s = o3, o3 = r2, r2 = g2 + b3 | 0;
    }
    r2 = r2 + this.A | 0, o3 = o3 + this.B | 0, s = s + this.C | 0, i3 = i3 + this.D | 0, f7 = f7 + this.E | 0, c4 = c4 + this.F | 0, u3 = u3 + this.G | 0, a2 = a2 + this.H | 0, this.set(r2, o3, s, i3, f7, c4, u3, a2);
  }
  roundClean() {
    ut(_t);
  }
  destroy() {
    this.set(0, 0, 0, 0, 0, 0, 0, 0), ut(this.buffer);
  }
};
var $r = wr(["0x428a2f98d728ae22", "0x7137449123ef65cd", "0xb5c0fbcfec4d3b2f", "0xe9b5dba58189dbbc", "0x3956c25bf348b538", "0x59f111f1b605d019", "0x923f82a4af194f9b", "0xab1c5ed5da6d8118", "0xd807aa98a3030242", "0x12835b0145706fbe", "0x243185be4ee4b28c", "0x550c7dc3d5ffb4e2", "0x72be5d74f27b896f", "0x80deb1fe3b1696b1", "0x9bdc06a725c71235", "0xc19bf174cf692694", "0xe49b69c19ef14ad2", "0xefbe4786384f25e3", "0x0fc19dc68b8cd5b5", "0x240ca1cc77ac9c65", "0x2de92c6f592b0275", "0x4a7484aa6ea6e483", "0x5cb0a9dcbd41fbd4", "0x76f988da831153b5", "0x983e5152ee66dfab", "0xa831c66d2db43210", "0xb00327c898fb213f", "0xbf597fc7beef0ee4", "0xc6e00bf33da88fc2", "0xd5a79147930aa725", "0x06ca6351e003826f", "0x142929670a0e6e70", "0x27b70a8546d22ffc", "0x2e1b21385c26c926", "0x4d2c6dfc5ac42aed", "0x53380d139d95b3df", "0x650a73548baf63de", "0x766a0abb3c77b2a8", "0x81c2c92e47edaee6", "0x92722c851482353b", "0xa2bfe8a14cf10364", "0xa81a664bbc423001", "0xc24b8b70d0f89791", "0xc76c51a30654be30", "0xd192e819d6ef5218", "0xd69906245565a910", "0xf40e35855771202a", "0x106aa07032bbd1b8", "0x19a4c116b8d2d0c8", "0x1e376c085141ab53", "0x2748774cdf8eeb99", "0x34b0bcb5e19b48a8", "0x391c0cb3c5c95a63", "0x4ed8aa4ae3418acb", "0x5b9cca4f7763e373", "0x682e6ff3d6b2b8a3", "0x748f82ee5defb2fc", "0x78a5636f43172f60", "0x84c87814a1f0ab72", "0x8cc702081a6439ec", "0x90befffa23631e28", "0xa4506cebde82bde9", "0xbef9a3f7b2c67915", "0xc67178f2e372532b", "0xca273eceea26619c", "0xd186b8c721c0c207", "0xeada7dd6cde0eb1e", "0xf57d4f7fee6ed178", "0x06f067aa72176fba", "0x0a637dc5a2c898a6", "0x113f9804bef90dae", "0x1b710b35131c471b", "0x28db77f523047d84", "0x32caab7b40c72493", "0x3c9ebe0a15c9bebc", "0x431d67c49c100d4c", "0x4cc5d4becb3e42b6", "0x597f299cfc657e2a", "0x5fcb6fab3ad6faec", "0x6c44198c4a475817"].map((t) => BigInt(t)));
var Fi = $r[0];
var zi = $r[1];
var Tt = new Uint32Array(80);
var Rt = new Uint32Array(80);
var cn = class extends Rr {
  constructor(e = 64) {
    super(128, e, 16, false), this.Ah = Y[0] | 0, this.Al = Y[1] | 0, this.Bh = Y[2] | 0, this.Bl = Y[3] | 0, this.Ch = Y[4] | 0, this.Cl = Y[5] | 0, this.Dh = Y[6] | 0, this.Dl = Y[7] | 0, this.Eh = Y[8] | 0, this.El = Y[9] | 0, this.Fh = Y[10] | 0, this.Fl = Y[11] | 0, this.Gh = Y[12] | 0, this.Gl = Y[13] | 0, this.Hh = Y[14] | 0, this.Hl = Y[15] | 0;
  }
  get() {
    const { Ah: e, Al: n2, Bh: r2, Bl: o3, Ch: s, Cl: i3, Dh: f7, Dl: c4, Eh: u3, El: a2, Fh: l4, Fl: h4, Gh: g2, Gl: m3, Hh: b3, Hl: v4 } = this;
    return [e, n2, r2, o3, s, i3, f7, c4, u3, a2, l4, h4, g2, m3, b3, v4];
  }
  set(e, n2, r2, o3, s, i3, f7, c4, u3, a2, l4, h4, g2, m3, b3, v4) {
    this.Ah = e | 0, this.Al = n2 | 0, this.Bh = r2 | 0, this.Bl = o3 | 0, this.Ch = s | 0, this.Cl = i3 | 0, this.Dh = f7 | 0, this.Dl = c4 | 0, this.Eh = u3 | 0, this.El = a2 | 0, this.Fh = l4 | 0, this.Fl = h4 | 0, this.Gh = g2 | 0, this.Gl = m3 | 0, this.Hh = b3 | 0, this.Hl = v4 | 0;
  }
  process(e, n2) {
    for (let C4 = 0; C4 < 16; C4++, n2 += 4) Tt[C4] = e.getUint32(n2), Rt[C4] = e.getUint32(n2 += 4);
    for (let C4 = 16; C4 < 80; C4++) {
      const H2 = Tt[C4 - 15] | 0, _ = Rt[C4 - 15] | 0, k4 = At(H2, _, 1) ^ At(H2, _, 8) ^ xr(H2, _, 7), P4 = St(H2, _, 1) ^ St(H2, _, 8) ^ vr(H2, _, 7), R4 = Tt[C4 - 2] | 0, d3 = Rt[C4 - 2] | 0, w3 = At(R4, d3, 19) ^ se(R4, d3, 61) ^ xr(R4, d3, 6), p4 = St(R4, d3, 19) ^ ie(R4, d3, 61) ^ vr(R4, d3, 6), y5 = Ei(P4, p4, Rt[C4 - 7], Rt[C4 - 16]), x3 = Bi(y5, k4, w3, Tt[C4 - 7], Tt[C4 - 16]);
      Tt[C4] = x3 | 0, Rt[C4] = y5 | 0;
    }
    let { Ah: r2, Al: o3, Bh: s, Bl: i3, Ch: f7, Cl: c4, Dh: u3, Dl: a2, Eh: l4, El: h4, Fh: g2, Fl: m3, Gh: b3, Gl: v4, Hh: L4, Hl: V4 } = this;
    for (let C4 = 0; C4 < 80; C4++) {
      const H2 = At(l4, h4, 14) ^ At(l4, h4, 18) ^ se(l4, h4, 41), _ = St(l4, h4, 14) ^ St(l4, h4, 18) ^ ie(l4, h4, 41), k4 = l4 & g2 ^ ~l4 & b3, P4 = h4 & m3 ^ ~h4 & v4, R4 = Ii(V4, _, P4, zi[C4], Rt[C4]), d3 = Ai(R4, L4, H2, k4, Fi[C4], Tt[C4]), w3 = R4 | 0, p4 = At(r2, o3, 28) ^ se(r2, o3, 34) ^ se(r2, o3, 39), y5 = St(r2, o3, 28) ^ ie(r2, o3, 34) ^ ie(r2, o3, 39), x3 = r2 & s ^ r2 & f7 ^ s & f7, B3 = o3 & i3 ^ o3 & c4 ^ i3 & c4;
      L4 = b3 | 0, V4 = v4 | 0, b3 = g2 | 0, v4 = m3 | 0, g2 = l4 | 0, m3 = h4 | 0, { h: l4, l: h4 } = dt(u3 | 0, a2 | 0, d3 | 0, w3 | 0), u3 = f7 | 0, a2 = c4 | 0, f7 = s | 0, c4 = i3 | 0, s = r2 | 0, i3 = o3 | 0;
      const E5 = tn(w3, y5, B3);
      r2 = en(E5, d3, p4, x3), o3 = E5 | 0;
    }
    ({ h: r2, l: o3 } = dt(this.Ah | 0, this.Al | 0, r2 | 0, o3 | 0)), { h: s, l: i3 } = dt(this.Bh | 0, this.Bl | 0, s | 0, i3 | 0), { h: f7, l: c4 } = dt(this.Ch | 0, this.Cl | 0, f7 | 0, c4 | 0), { h: u3, l: a2 } = dt(this.Dh | 0, this.Dl | 0, u3 | 0, a2 | 0), { h: l4, l: h4 } = dt(this.Eh | 0, this.El | 0, l4 | 0, h4 | 0), { h: g2, l: m3 } = dt(this.Fh | 0, this.Fl | 0, g2 | 0, m3 | 0), { h: b3, l: v4 } = dt(this.Gh | 0, this.Gl | 0, b3 | 0, v4 | 0), { h: L4, l: V4 } = dt(this.Hh | 0, this.Hl | 0, L4 | 0, V4 | 0), this.set(r2, o3, s, i3, f7, c4, u3, a2, l4, h4, g2, m3, b3, v4, L4, V4);
  }
  roundClean() {
    ut(Tt, Rt);
  }
  destroy() {
    ut(this.buffer), this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
  }
};
var Gi = class extends cn {
  constructor() {
    super(48), this.Ah = W[0] | 0, this.Al = W[1] | 0, this.Bh = W[2] | 0, this.Bl = W[3] | 0, this.Ch = W[4] | 0, this.Cl = W[5] | 0, this.Dh = W[6] | 0, this.Dl = W[7] | 0, this.Eh = W[8] | 0, this.El = W[9] | 0, this.Fh = W[10] | 0, this.Fl = W[11] | 0, this.Gh = W[12] | 0, this.Gl = W[13] | 0, this.Hh = W[14] | 0, this.Hl = W[15] | 0;
  }
};
var X = Uint32Array.from([573645204, 4230739756, 2673172387, 3360449730, 596883563, 1867755857, 2520282905, 1497426621, 2519219938, 2827943907, 3193839141, 1401305490, 721525244, 746961066, 246885852, 2177182882]);
var Zi = class extends cn {
  constructor() {
    super(32), this.Ah = X[0] | 0, this.Al = X[1] | 0, this.Bh = X[2] | 0, this.Bl = X[3] | 0, this.Ch = X[4] | 0, this.Cl = X[5] | 0, this.Dh = X[6] | 0, this.Dl = X[7] | 0, this.Eh = X[8] | 0, this.El = X[9] | 0, this.Fh = X[10] | 0, this.Fl = X[11] | 0, this.Gh = X[12] | 0, this.Gl = X[13] | 0, this.Hh = X[14] | 0, this.Hl = X[15] | 0;
  }
};
var Ae = ae(() => new Ki());
var Wi = ae(() => new cn());
var Yi = ae(() => new Gi());
var Xi = ae(() => new Zi());
var Ji = Uint8Array.from([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 14, 10, 4, 8, 9, 15, 13, 6, 1, 12, 0, 2, 11, 7, 5, 3, 11, 8, 12, 0, 5, 2, 15, 13, 10, 14, 3, 6, 7, 1, 9, 4, 7, 9, 3, 1, 13, 12, 11, 14, 2, 6, 5, 10, 4, 0, 15, 8, 9, 0, 5, 7, 2, 4, 10, 15, 14, 1, 11, 12, 6, 8, 3, 13, 2, 12, 6, 10, 0, 11, 8, 3, 4, 13, 7, 5, 15, 14, 1, 9, 12, 5, 1, 15, 14, 13, 4, 10, 0, 7, 6, 3, 9, 2, 8, 11, 13, 11, 7, 14, 12, 1, 3, 9, 5, 0, 15, 4, 8, 6, 2, 10, 6, 15, 14, 9, 11, 3, 0, 8, 12, 2, 13, 7, 1, 4, 10, 5, 10, 2, 8, 4, 7, 6, 1, 5, 15, 11, 9, 14, 3, 12, 13, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 14, 10, 4, 8, 9, 15, 13, 6, 1, 12, 0, 2, 11, 7, 5, 3, 11, 8, 12, 0, 5, 2, 15, 13, 10, 14, 3, 6, 7, 1, 9, 4, 7, 9, 3, 1, 13, 12, 11, 14, 2, 6, 5, 10, 4, 0, 15, 8, 9, 0, 5, 7, 2, 4, 10, 15, 14, 1, 11, 12, 6, 8, 3, 13, 2, 12, 6, 10, 0, 11, 8, 3, 4, 13, 7, 5, 15, 14, 1, 9]);
var F = Uint32Array.from([4089235720, 1779033703, 2227873595, 3144134277, 4271175723, 1013904242, 1595750129, 2773480762, 2917565137, 1359893119, 725511199, 2600822924, 4215389547, 528734635, 327033209, 1541459225]);
var N = new Uint32Array(32);
function $t(t, e, n2, r2, o3, s) {
  const i3 = o3[s], f7 = o3[s + 1];
  let c4 = N[2 * t], u3 = N[2 * t + 1], a2 = N[2 * e], l4 = N[2 * e + 1], h4 = N[2 * n2], g2 = N[2 * n2 + 1], m3 = N[2 * r2], b3 = N[2 * r2 + 1], v4 = tn(c4, a2, i3);
  u3 = en(v4, u3, l4, f7), c4 = v4 | 0, { Dh: b3, Dl: m3 } = { Dh: b3 ^ u3, Dl: m3 ^ c4 }, { Dh: b3, Dl: m3 } = { Dh: bi(b3, m3), Dl: yi(b3) }, { h: g2, l: h4 } = dt(g2, h4, b3, m3), { Bh: l4, Bl: a2 } = { Bh: l4 ^ g2, Bl: a2 ^ h4 }, { Bh: l4, Bl: a2 } = { Bh: At(l4, a2, 24), Bl: St(l4, a2, 24) }, N[2 * t] = c4, N[2 * t + 1] = u3, N[2 * e] = a2, N[2 * e + 1] = l4, N[2 * n2] = h4, N[2 * n2 + 1] = g2, N[2 * r2] = m3, N[2 * r2 + 1] = b3;
}
function Ct(t, e, n2, r2, o3, s) {
  const i3 = o3[s], f7 = o3[s + 1];
  let c4 = N[2 * t], u3 = N[2 * t + 1], a2 = N[2 * e], l4 = N[2 * e + 1], h4 = N[2 * n2], g2 = N[2 * n2 + 1], m3 = N[2 * r2], b3 = N[2 * r2 + 1], v4 = tn(c4, a2, i3);
  u3 = en(v4, u3, l4, f7), c4 = v4 | 0, { Dh: b3, Dl: m3 } = { Dh: b3 ^ u3, Dl: m3 ^ c4 }, { Dh: b3, Dl: m3 } = { Dh: At(b3, m3, 16), Dl: St(b3, m3, 16) }, { h: g2, l: h4 } = dt(g2, h4, b3, m3), { Bh: l4, Bl: a2 } = { Bh: l4 ^ g2, Bl: a2 ^ h4 }, { Bh: l4, Bl: a2 } = { Bh: se(l4, a2, 63), Bl: ie(l4, a2, 63) }, N[2 * t] = c4, N[2 * t + 1] = u3, N[2 * e] = a2, N[2 * e + 1] = l4, N[2 * n2] = h4, N[2 * n2 + 1] = g2, N[2 * r2] = m3, N[2 * r2 + 1] = b3;
}
function Qi(t, e = {}, n2, r2, o3) {
  if (mt(n2), t < 0 || t > n2) throw new Error("outputLen bigger than keyLen");
  const { key: s, salt: i3, personalization: f7 } = e;
  if (s !== void 0 && (s.length < 1 || s.length > n2)) throw new Error("key length must be undefined or 1.." + n2);
  if (i3 !== void 0 && i3.length !== r2) throw new Error("salt must be undefined or " + r2);
  if (f7 !== void 0 && f7.length !== o3) throw new Error("personalization must be undefined or " + o3);
}
var tf = class extends Ie {
  constructor(e, n2) {
    super(), this.finished = false, this.destroyed = false, this.length = 0, this.pos = 0, mt(e), mt(n2), this.blockLen = e, this.outputLen = n2, this.buffer = new Uint8Array(e), this.buffer32 = fe(this.buffer);
  }
  update(e) {
    Nt(this), e = ht(e), at(e);
    const { blockLen: n2, buffer: r2, buffer32: o3 } = this, s = e.length, i3 = e.byteOffset, f7 = e.buffer;
    for (let c4 = 0; c4 < s; ) {
      this.pos === n2 && (Ot(o3), this.compress(o3, 0, false), Ot(o3), this.pos = 0);
      const u3 = Math.min(n2 - this.pos, s - c4), a2 = i3 + c4;
      if (u3 === n2 && !(a2 % 4) && c4 + u3 < s) {
        const l4 = new Uint32Array(f7, a2, Math.floor((s - c4) / 4));
        Ot(l4);
        for (let h4 = 0; c4 + n2 < s; h4 += o3.length, c4 += n2) this.length += n2, this.compress(l4, h4, false);
        Ot(l4);
        continue;
      }
      r2.set(e.subarray(c4, c4 + u3), this.pos), this.pos += u3, this.length += u3, c4 += u3;
    }
    return this;
  }
  digestInto(e) {
    Nt(this), on(e, this);
    const { pos: n2, buffer32: r2 } = this;
    this.finished = true, ut(this.buffer.subarray(n2)), Ot(r2), this.compress(r2, 0, true), Ot(r2);
    const o3 = fe(e);
    this.get().forEach((s, i3) => o3[i3] = wt(s));
  }
  digest() {
    const { buffer: e, outputLen: n2 } = this;
    this.digestInto(e);
    const r2 = e.slice(0, n2);
    return this.destroy(), r2;
  }
  _cloneInto(e) {
    const { buffer: n2, length: r2, finished: o3, destroyed: s, outputLen: i3, pos: f7 } = this;
    return e || (e = new this.constructor({ dkLen: i3 })), e.set(...this.get()), e.buffer.set(n2), e.destroyed = s, e.finished = o3, e.length = r2, e.pos = f7, e.outputLen = i3, e;
  }
  clone() {
    return this._cloneInto();
  }
};
var ef = class extends tf {
  constructor(e = {}) {
    const n2 = e.dkLen === void 0 ? 64 : e.dkLen;
    super(128, n2), this.v0l = F[0] | 0, this.v0h = F[1] | 0, this.v1l = F[2] | 0, this.v1h = F[3] | 0, this.v2l = F[4] | 0, this.v2h = F[5] | 0, this.v3l = F[6] | 0, this.v3h = F[7] | 0, this.v4l = F[8] | 0, this.v4h = F[9] | 0, this.v5l = F[10] | 0, this.v5h = F[11] | 0, this.v6l = F[12] | 0, this.v6h = F[13] | 0, this.v7l = F[14] | 0, this.v7h = F[15] | 0, Qi(n2, e, 64, 16, 16);
    let { key: r2, personalization: o3, salt: s } = e, i3 = 0;
    if (r2 !== void 0 && (r2 = ht(r2), i3 = r2.length), this.v0l ^= this.outputLen | i3 << 8 | 65536 | 1 << 24, s !== void 0) {
      s = ht(s);
      const f7 = fe(s);
      this.v4l ^= wt(f7[0]), this.v4h ^= wt(f7[1]), this.v5l ^= wt(f7[2]), this.v5h ^= wt(f7[3]);
    }
    if (o3 !== void 0) {
      o3 = ht(o3);
      const f7 = fe(o3);
      this.v6l ^= wt(f7[0]), this.v6h ^= wt(f7[1]), this.v7l ^= wt(f7[2]), this.v7h ^= wt(f7[3]);
    }
    if (r2 !== void 0) {
      const f7 = new Uint8Array(this.blockLen);
      f7.set(r2), this.update(f7);
    }
  }
  get() {
    let { v0l: e, v0h: n2, v1l: r2, v1h: o3, v2l: s, v2h: i3, v3l: f7, v3h: c4, v4l: u3, v4h: a2, v5l: l4, v5h: h4, v6l: g2, v6h: m3, v7l: b3, v7h: v4 } = this;
    return [e, n2, r2, o3, s, i3, f7, c4, u3, a2, l4, h4, g2, m3, b3, v4];
  }
  set(e, n2, r2, o3, s, i3, f7, c4, u3, a2, l4, h4, g2, m3, b3, v4) {
    this.v0l = e | 0, this.v0h = n2 | 0, this.v1l = r2 | 0, this.v1h = o3 | 0, this.v2l = s | 0, this.v2h = i3 | 0, this.v3l = f7 | 0, this.v3h = c4 | 0, this.v4l = u3 | 0, this.v4h = a2 | 0, this.v5l = l4 | 0, this.v5h = h4 | 0, this.v6l = g2 | 0, this.v6h = m3 | 0, this.v7l = b3 | 0, this.v7h = v4 | 0;
  }
  compress(e, n2, r2) {
    this.get().forEach((c4, u3) => N[u3] = c4), N.set(F, 16);
    let { h: o3, l: s } = mr(BigInt(this.length));
    N[24] = F[8] ^ s, N[25] = F[9] ^ o3, r2 && (N[28] = ~N[28], N[29] = ~N[29]);
    let i3 = 0;
    const f7 = Ji;
    for (let c4 = 0; c4 < 12; c4++) $t(0, 4, 8, 12, e, n2 + 2 * f7[i3++]), Ct(0, 4, 8, 12, e, n2 + 2 * f7[i3++]), $t(1, 5, 9, 13, e, n2 + 2 * f7[i3++]), Ct(1, 5, 9, 13, e, n2 + 2 * f7[i3++]), $t(2, 6, 10, 14, e, n2 + 2 * f7[i3++]), Ct(2, 6, 10, 14, e, n2 + 2 * f7[i3++]), $t(3, 7, 11, 15, e, n2 + 2 * f7[i3++]), Ct(3, 7, 11, 15, e, n2 + 2 * f7[i3++]), $t(0, 5, 10, 15, e, n2 + 2 * f7[i3++]), Ct(0, 5, 10, 15, e, n2 + 2 * f7[i3++]), $t(1, 6, 11, 12, e, n2 + 2 * f7[i3++]), Ct(1, 6, 11, 12, e, n2 + 2 * f7[i3++]), $t(2, 7, 8, 13, e, n2 + 2 * f7[i3++]), Ct(2, 7, 8, 13, e, n2 + 2 * f7[i3++]), $t(3, 4, 9, 14, e, n2 + 2 * f7[i3++]), Ct(3, 4, 9, 14, e, n2 + 2 * f7[i3++]);
    this.v0l ^= N[0] ^ N[16], this.v0h ^= N[1] ^ N[17], this.v1l ^= N[2] ^ N[18], this.v1h ^= N[3] ^ N[19], this.v2l ^= N[4] ^ N[20], this.v2h ^= N[5] ^ N[21], this.v3l ^= N[6] ^ N[22], this.v3h ^= N[7] ^ N[23], this.v4l ^= N[8] ^ N[24], this.v4h ^= N[9] ^ N[25], this.v5l ^= N[10] ^ N[26], this.v5h ^= N[11] ^ N[27], this.v6l ^= N[12] ^ N[28], this.v6h ^= N[13] ^ N[29], this.v7l ^= N[14] ^ N[30], this.v7h ^= N[15] ^ N[31], ut(N);
  }
  destroy() {
    this.destroyed = true, ut(this.buffer32), this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
  }
};
var nf = Ui((t) => new ef(t));
var rf = "https://rpc.walletconnect.org/v1";
function an(t) {
  const e = `Ethereum Signed Message:
${t.length}`, n2 = new TextEncoder().encode(e + t);
  return "0x" + Buffer.from(Hi(n2)).toString("hex");
}
async function Cr(t, e, n2, r2, o3, s) {
  switch (n2.t) {
    case "eip191":
      return await Lr(t, e, n2.s);
    case "eip1271":
      return await jr(t, e, n2.s, r2, o3, s);
    default:
      throw new Error(`verifySignature failed: Attempted to verify CacaoSignature with unknown type: ${n2.t}`);
  }
}
async function Lr(t, e, n2) {
  return (await recoverAddress({ hash: an(e), signature: n2 })).toLowerCase() === t.toLowerCase();
}
async function jr(t, e, n2, r2, o3, s) {
  const i3 = Fe(r2);
  if (!i3.namespace || !i3.reference) throw new Error(`isValidEip1271Signature failed: chainId must be in CAIP-2 format, received: ${r2}`);
  try {
    const f7 = "0x1626ba7e", c4 = "0000000000000000000000000000000000000000000000000000000000000040", u3 = n2.substring(2), a2 = (u3.length / 2).toString(16).padStart(64, "0"), l4 = (e.startsWith("0x") ? e : an(e)).substring(2), h4 = f7 + l4 + c4 + a2 + u3, g2 = await fetch(`${s || rf}/?chainId=${r2}&projectId=${o3}`, { headers: { "Content-Type": "application/json" }, method: "POST", body: JSON.stringify({ id: of(), jsonrpc: "2.0", method: "eth_call", params: [{ to: t, data: h4 }, "latest"] }) }), { result: m3 } = await g2.json();
    return m3 ? m3.slice(0, f7.length).toLowerCase() === f7.toLowerCase() : false;
  } catch (f7) {
    return console.error("isValidEip1271Signature: ", f7), false;
  }
}
function of() {
  return Date.now() + Math.floor(Math.random() * 1e3);
}
function sf(t) {
  const e = atob(t), n2 = new Uint8Array(e.length);
  for (let i3 = 0; i3 < e.length; i3++) n2[i3] = e.charCodeAt(i3);
  const r2 = n2[0];
  if (r2 === 0) throw new Error("No signatures found");
  const o3 = 1 + r2 * 64;
  if (n2.length < o3) throw new Error("Transaction data too short for claimed signature count");
  if (n2.length < 100) throw new Error("Transaction too short");
  const s = Buffer.from(t, "base64").slice(1, 65);
  return esm_default.encode(s);
}
function ff(t) {
  const e = new Uint8Array(Buffer.from(t, "base64")), n2 = Array.from("TransactionData::").map((s) => s.charCodeAt(0)), r2 = new Uint8Array(n2.length + e.length);
  r2.set(n2), r2.set(e, n2.length);
  const o3 = nf(r2, { dkLen: 32 });
  return esm_default.encode(o3);
}
function cf(t) {
  const e = new Uint8Array(Ae(kr(t)));
  return esm_default.encode(e);
}
function kr(t) {
  if (t instanceof Uint8Array) return t;
  if (Array.isArray(t)) return new Uint8Array(t);
  if (typeof t == "object" && t != null && t.data) return new Uint8Array(Object.values(t.data));
  if (typeof t == "object" && t) return new Uint8Array(Object.values(t));
  throw new Error("getNearUint8ArrayFromBytes: Unexpected result type from bytes array");
}
function af(t) {
  const e = Buffer.from(t, "base64"), n2 = decode2(e).txn;
  if (!n2) throw new Error("Invalid signed transaction: missing 'txn' field");
  const r2 = encode4(n2), o3 = Buffer.from("TX"), s = Buffer.concat([o3, Buffer.from(r2)]), i3 = Xi(s);
  return base32.encode(i3).replace(/=+$/, "");
}
function un(t) {
  const e = [];
  let n2 = BigInt(t);
  for (; n2 >= BigInt(128); ) e.push(Number(n2 & BigInt(127) | BigInt(128))), n2 >>= BigInt(7);
  return e.push(Number(n2)), Buffer.from(e);
}
function uf(t) {
  const e = Buffer.from(t.signed.bodyBytes, "base64"), n2 = Buffer.from(t.signed.authInfoBytes, "base64"), r2 = Buffer.from(t.signature.signature, "base64"), o3 = [];
  o3.push(Buffer.from([10])), o3.push(un(e.length)), o3.push(e), o3.push(Buffer.from([18])), o3.push(un(n2.length)), o3.push(n2), o3.push(Buffer.from([26])), o3.push(un(r2.length)), o3.push(r2);
  const s = Buffer.concat(o3), i3 = Ae(s);
  return Buffer.from(i3).toString("hex").toUpperCase();
}
var lf = Object.defineProperty;
var df = Object.defineProperties;
var hf = Object.getOwnPropertyDescriptors;
var Pr = Object.getOwnPropertySymbols;
var pf = Object.prototype.hasOwnProperty;
var gf = Object.prototype.propertyIsEnumerable;
var Hr = (t, e, n2) => e in t ? lf(t, e, { enumerable: true, configurable: true, writable: true, value: n2 }) : t[e] = n2;
var ln = (t, e) => {
  for (var n2 in e || (e = {})) pf.call(e, n2) && Hr(t, n2, e[n2]);
  if (Pr) for (var n2 of Pr(e)) gf.call(e, n2) && Hr(t, n2, e[n2]);
  return t;
};
var Dr = (t, e) => df(t, hf(e));
var bf = "did:pkh:";
var Se = (t) => t == null ? void 0 : t.split(":");
var Mr = (t) => {
  const e = t && Se(t);
  if (e) return t.includes(bf) ? e[3] : e[1];
};
var Vr = (t) => {
  const e = t && Se(t);
  if (e) return e[2] + ":" + e[3];
};
var dn = (t) => {
  const e = t && Se(t);
  if (e) return e.pop();
};
async function yf(t) {
  const { cacao: e, projectId: n2 } = t, { s: r2, p: o3 } = e, s = qr(o3, o3.iss), i3 = dn(o3.iss);
  return await Cr(i3, s, r2, Vr(o3.iss), n2);
}
var qr = (t, e) => {
  const n2 = `${t.domain} wants you to sign in with your Ethereum account:`, r2 = dn(e);
  if (!t.aud && !t.uri) throw new Error("Either `aud` or `uri` is required to construct the message");
  let o3 = t.statement || void 0;
  const s = `URI: ${t.aud || t.uri}`, i3 = `Version: ${t.version}`, f7 = `Chain ID: ${Mr(e)}`, c4 = `Nonce: ${t.nonce}`, u3 = `Issued At: ${t.iat}`, a2 = t.exp ? `Expiration Time: ${t.exp}` : void 0, l4 = t.nbf ? `Not Before: ${t.nbf}` : void 0, h4 = t.requestId ? `Request ID: ${t.requestId}` : void 0, g2 = t.resources ? `Resources:${t.resources.map((b3) => `
- ${b3}`).join("")}` : void 0, m3 = Oe(t.resources);
  if (m3) {
    const b3 = Lt(m3);
    o3 = gn(o3, b3);
  }
  return [n2, r2, "", o3, "", s, i3, f7, c4, u3, a2, l4, h4, g2].filter((b3) => b3 != null).join(`
`);
};
function Gr(t) {
  return Buffer.from(JSON.stringify(t)).toString("base64");
}
function Zr(t) {
  return JSON.parse(Buffer.from(t, "base64").toString("utf-8"));
}
function bt(t) {
  if (!t) throw new Error("No recap provided, value is undefined");
  if (!t.att) throw new Error("No `att` property found");
  const e = Object.keys(t.att);
  if (!(e != null && e.length)) throw new Error("No resources found in `att` property");
  e.forEach((n2) => {
    const r2 = t.att[n2];
    if (Array.isArray(r2)) throw new Error(`Resource must be an object: ${n2}`);
    if (typeof r2 != "object") throw new Error(`Resource must be an object: ${n2}`);
    if (!Object.keys(r2).length) throw new Error(`Resource object is empty: ${n2}`);
    Object.keys(r2).forEach((o3) => {
      const s = r2[o3];
      if (!Array.isArray(s)) throw new Error(`Ability limits ${o3} must be an array of objects, found: ${s}`);
      if (!s.length) throw new Error(`Value of ${o3} is empty array, must be an array with objects`);
      s.forEach((i3) => {
        if (typeof i3 != "object") throw new Error(`Ability limits (${o3}) must be an array of objects, found: ${i3}`);
      });
    });
  });
}
function Wr(t, e, n2, r2 = {}) {
  return n2 == null ? void 0 : n2.sort((o3, s) => o3.localeCompare(s)), { att: { [t]: hn(e, n2, r2) } };
}
function hn(t, e, n2 = {}) {
  e = e == null ? void 0 : e.sort((o3, s) => o3.localeCompare(s));
  const r2 = e.map((o3) => ({ [`${t}/${o3}`]: [n2] }));
  return Object.assign({}, ...r2);
}
function Ne(t) {
  return bt(t), `urn:recap:${Gr(t).replace(/=/g, "")}`;
}
function Lt(t) {
  const e = Zr(t.replace("urn:recap:", ""));
  return bt(e), e;
}
function Ef(t, e, n2) {
  const r2 = Wr(t, e, n2);
  return Ne(r2);
}
function pn(t) {
  return t && t.includes("urn:recap:");
}
function Bf(t, e) {
  const n2 = Lt(t), r2 = Lt(e), o3 = Xr(n2, r2);
  return Ne(o3);
}
function Xr(t, e) {
  bt(t), bt(e);
  const n2 = Object.keys(t.att).concat(Object.keys(e.att)).sort((o3, s) => o3.localeCompare(s)), r2 = { att: {} };
  return n2.forEach((o3) => {
    var s, i3;
    Object.keys(((s = t.att) == null ? void 0 : s[o3]) || {}).concat(Object.keys(((i3 = e.att) == null ? void 0 : i3[o3]) || {})).sort((f7, c4) => f7.localeCompare(c4)).forEach((f7) => {
      var c4, u3;
      r2.att[o3] = Dr(ln({}, r2.att[o3]), { [f7]: ((c4 = t.att[o3]) == null ? void 0 : c4[f7]) || ((u3 = e.att[o3]) == null ? void 0 : u3[f7]) });
    });
  }), r2;
}
function gn(t = "", e) {
  bt(e);
  const n2 = "I further authorize the stated URI to perform the following actions on my behalf: ";
  if (t.includes(n2)) return t;
  const r2 = [];
  let o3 = 0;
  Object.keys(e.att).forEach((f7) => {
    const c4 = Object.keys(e.att[f7]).map((l4) => ({ ability: l4.split("/")[0], action: l4.split("/")[1] }));
    c4.sort((l4, h4) => l4.action.localeCompare(h4.action));
    const u3 = {};
    c4.forEach((l4) => {
      u3[l4.ability] || (u3[l4.ability] = []), u3[l4.ability].push(l4.action);
    });
    const a2 = Object.keys(u3).map((l4) => (o3++, `(${o3}) '${l4}': '${u3[l4].join("', '")}' for '${f7}'.`));
    r2.push(a2.join(", ").replace(".,", "."));
  });
  const s = r2.join(" "), i3 = `${n2}${s}`;
  return `${t ? t + " " : ""}${i3}`;
}
function If(t) {
  var e;
  const n2 = Lt(t);
  bt(n2);
  const r2 = (e = n2.att) == null ? void 0 : e.eip155;
  return r2 ? Object.keys(r2).map((o3) => o3.split("/")[1]) : [];
}
function Af(t) {
  const e = Lt(t);
  bt(e);
  const n2 = [];
  return Object.values(e.att).forEach((r2) => {
    Object.values(r2).forEach((o3) => {
      var s;
      (s = o3 == null ? void 0 : o3[0]) != null && s.chains && n2.push(o3[0].chains);
    });
  }), [...new Set(n2.flat())];
}
function Oe(t) {
  if (!t) return;
  const e = t == null ? void 0 : t[t.length - 1];
  return pn(e) ? e : void 0;
}
function Qr(t) {
  return t instanceof Uint8Array || ArrayBuffer.isView(t) && t.constructor.name === "Uint8Array";
}
function bn(t) {
  if (typeof t != "boolean") throw new Error(`boolean expected, not ${t}`);
}
function yn(t) {
  if (!Number.isSafeInteger(t) || t < 0) throw new Error("positive integer expected, got " + t);
}
function nt(t, ...e) {
  if (!Qr(t)) throw new Error("Uint8Array expected");
  if (e.length > 0 && !e.includes(t.length)) throw new Error("Uint8Array expected of length " + e + ", got length=" + t.length);
}
function to(t, e = true) {
  if (t.destroyed) throw new Error("Hash instance has been destroyed");
  if (e && t.finished) throw new Error("Hash#digest() has already been called");
}
function Sf(t, e) {
  nt(t);
  const n2 = e.outputLen;
  if (t.length < n2) throw new Error("digestInto() expects output buffer of length at least " + n2);
}
function jt(t) {
  return new Uint32Array(t.buffer, t.byteOffset, Math.floor(t.byteLength / 4));
}
function Wt(...t) {
  for (let e = 0; e < t.length; e++) t[e].fill(0);
}
function Nf(t) {
  return new DataView(t.buffer, t.byteOffset, t.byteLength);
}
var Of = new Uint8Array(new Uint32Array([287454020]).buffer)[0] === 68;
function Uf(t) {
  if (typeof t != "string") throw new Error("string expected");
  return new Uint8Array(new TextEncoder().encode(t));
}
function mn(t) {
  if (typeof t == "string") t = Uf(t);
  else if (Qr(t)) t = wn(t);
  else throw new Error("Uint8Array expected, got " + typeof t);
  return t;
}
function _f(t, e) {
  if (e == null || typeof e != "object") throw new Error("options must be defined");
  return Object.assign(t, e);
}
function Tf(t, e) {
  if (t.length !== e.length) return false;
  let n2 = 0;
  for (let r2 = 0; r2 < t.length; r2++) n2 |= t[r2] ^ e[r2];
  return n2 === 0;
}
var Rf = (t, e) => {
  function n2(r2, ...o3) {
    if (nt(r2), !Of) throw new Error("Non little-endian hardware is not yet supported");
    if (t.nonceLength !== void 0) {
      const a2 = o3[0];
      if (!a2) throw new Error("nonce / iv required");
      t.varSizeNonce ? nt(a2) : nt(a2, t.nonceLength);
    }
    const s = t.tagLength;
    s && o3[1] !== void 0 && nt(o3[1]);
    const i3 = e(r2, ...o3), f7 = (a2, l4) => {
      if (l4 !== void 0) {
        if (a2 !== 2) throw new Error("cipher output not supported");
        nt(l4);
      }
    };
    let c4 = false;
    return { encrypt(a2, l4) {
      if (c4) throw new Error("cannot encrypt() twice with same key + nonce");
      return c4 = true, nt(a2), f7(i3.encrypt.length, l4), i3.encrypt(a2, l4);
    }, decrypt(a2, l4) {
      if (nt(a2), s && a2.length < s) throw new Error("invalid ciphertext length: smaller than tagLength=" + s);
      return f7(i3.decrypt.length, l4), i3.decrypt(a2, l4);
    } };
  }
  return Object.assign(n2, t), n2;
};
function eo(t, e, n2 = true) {
  if (e === void 0) return new Uint8Array(t);
  if (e.length !== t) throw new Error("invalid output length, expected " + t + ", got: " + e.length);
  if (n2 && !Cf(e)) throw new Error("invalid output, must be aligned");
  return e;
}
function no(t, e, n2, r2) {
  if (typeof t.setBigUint64 == "function") return t.setBigUint64(e, n2, r2);
  const o3 = BigInt(32), s = BigInt(4294967295), i3 = Number(n2 >> o3 & s), f7 = Number(n2 & s), c4 = r2 ? 4 : 0, u3 = r2 ? 0 : 4;
  t.setUint32(e + c4, i3, r2), t.setUint32(e + u3, f7, r2);
}
function $f(t, e, n2) {
  bn(n2);
  const r2 = new Uint8Array(16), o3 = Nf(r2);
  return no(o3, 0, BigInt(e), n2), no(o3, 8, BigInt(t), n2), r2;
}
function Cf(t) {
  return t.byteOffset % 4 === 0;
}
function wn(t) {
  return Uint8Array.from(t);
}
var ro = (t) => Uint8Array.from(t.split("").map((e) => e.charCodeAt(0)));
var Lf = ro("expand 16-byte k");
var jf = ro("expand 32-byte k");
var kf = jt(Lf);
var Pf = jt(jf);
function M2(t, e) {
  return t << e | t >>> 32 - e;
}
function xn(t) {
  return t.byteOffset % 4 === 0;
}
var Ue = 64;
var Hf = 16;
var oo = 2 ** 32 - 1;
var so = new Uint32Array();
function Df(t, e, n2, r2, o3, s, i3, f7) {
  const c4 = o3.length, u3 = new Uint8Array(Ue), a2 = jt(u3), l4 = xn(o3) && xn(s), h4 = l4 ? jt(o3) : so, g2 = l4 ? jt(s) : so;
  for (let m3 = 0; m3 < c4; i3++) {
    if (t(e, n2, r2, a2, i3, f7), i3 >= oo) throw new Error("arx: counter overflow");
    const b3 = Math.min(Ue, c4 - m3);
    if (l4 && b3 === Ue) {
      const v4 = m3 / 4;
      if (m3 % 4 !== 0) throw new Error("arx: invalid block position");
      for (let L4 = 0, V4; L4 < Hf; L4++) V4 = v4 + L4, g2[V4] = h4[V4] ^ a2[L4];
      m3 += Ue;
      continue;
    }
    for (let v4 = 0, L4; v4 < b3; v4++) L4 = m3 + v4, s[L4] = o3[L4] ^ u3[v4];
    m3 += b3;
  }
}
function Mf(t, e) {
  const { allowShortKeys: n2, extendNonceFn: r2, counterLength: o3, counterRight: s, rounds: i3 } = _f({ allowShortKeys: false, counterLength: 8, counterRight: false, rounds: 20 }, e);
  if (typeof t != "function") throw new Error("core must be a function");
  return yn(o3), yn(i3), bn(s), bn(n2), (f7, c4, u3, a2, l4 = 0) => {
    nt(f7), nt(c4), nt(u3);
    const h4 = u3.length;
    if (a2 === void 0 && (a2 = new Uint8Array(h4)), nt(a2), yn(l4), l4 < 0 || l4 >= oo) throw new Error("arx: counter overflow");
    if (a2.length < h4) throw new Error(`arx: output (${a2.length}) is shorter than data (${h4})`);
    const g2 = [];
    let m3 = f7.length, b3, v4;
    if (m3 === 32) g2.push(b3 = wn(f7)), v4 = Pf;
    else if (m3 === 16 && n2) b3 = new Uint8Array(32), b3.set(f7), b3.set(f7, 16), v4 = kf, g2.push(b3);
    else throw new Error(`arx: invalid 32-byte key, got length=${m3}`);
    xn(c4) || g2.push(c4 = wn(c4));
    const L4 = jt(b3);
    if (r2) {
      if (c4.length !== 24) throw new Error("arx: extended nonce must be 24 bytes");
      r2(v4, L4, jt(c4.subarray(0, 16)), L4), c4 = c4.subarray(16);
    }
    const V4 = 16 - o3;
    if (V4 !== c4.length) throw new Error(`arx: nonce must be ${V4} or 16 bytes`);
    if (V4 !== 12) {
      const H2 = new Uint8Array(12);
      H2.set(c4, s ? 0 : 12 - c4.length), c4 = H2, g2.push(c4);
    }
    const C4 = jt(c4);
    return Df(t, v4, L4, C4, u3, a2, l4, i3), Wt(...g2), a2;
  };
}
var G = (t, e) => t[e++] & 255 | (t[e++] & 255) << 8;
var Vf = class {
  constructor(e) {
    this.blockLen = 16, this.outputLen = 16, this.buffer = new Uint8Array(16), this.r = new Uint16Array(10), this.h = new Uint16Array(10), this.pad = new Uint16Array(8), this.pos = 0, this.finished = false, e = mn(e), nt(e, 32);
    const n2 = G(e, 0), r2 = G(e, 2), o3 = G(e, 4), s = G(e, 6), i3 = G(e, 8), f7 = G(e, 10), c4 = G(e, 12), u3 = G(e, 14);
    this.r[0] = n2 & 8191, this.r[1] = (n2 >>> 13 | r2 << 3) & 8191, this.r[2] = (r2 >>> 10 | o3 << 6) & 7939, this.r[3] = (o3 >>> 7 | s << 9) & 8191, this.r[4] = (s >>> 4 | i3 << 12) & 255, this.r[5] = i3 >>> 1 & 8190, this.r[6] = (i3 >>> 14 | f7 << 2) & 8191, this.r[7] = (f7 >>> 11 | c4 << 5) & 8065, this.r[8] = (c4 >>> 8 | u3 << 8) & 8191, this.r[9] = u3 >>> 5 & 127;
    for (let a2 = 0; a2 < 8; a2++) this.pad[a2] = G(e, 16 + 2 * a2);
  }
  process(e, n2, r2 = false) {
    const o3 = r2 ? 0 : 2048, { h: s, r: i3 } = this, f7 = i3[0], c4 = i3[1], u3 = i3[2], a2 = i3[3], l4 = i3[4], h4 = i3[5], g2 = i3[6], m3 = i3[7], b3 = i3[8], v4 = i3[9], L4 = G(e, n2 + 0), V4 = G(e, n2 + 2), C4 = G(e, n2 + 4), H2 = G(e, n2 + 6), _ = G(e, n2 + 8), k4 = G(e, n2 + 10), P4 = G(e, n2 + 12), R4 = G(e, n2 + 14);
    let d3 = s[0] + (L4 & 8191), w3 = s[1] + ((L4 >>> 13 | V4 << 3) & 8191), p4 = s[2] + ((V4 >>> 10 | C4 << 6) & 8191), y5 = s[3] + ((C4 >>> 7 | H2 << 9) & 8191), x3 = s[4] + ((H2 >>> 4 | _ << 12) & 8191), B3 = s[5] + (_ >>> 1 & 8191), E5 = s[6] + ((_ >>> 14 | k4 << 2) & 8191), I4 = s[7] + ((k4 >>> 11 | P4 << 5) & 8191), S4 = s[8] + ((P4 >>> 8 | R4 << 8) & 8191), O5 = s[9] + (R4 >>> 5 | o3), A5 = 0, T4 = A5 + d3 * f7 + w3 * (5 * v4) + p4 * (5 * b3) + y5 * (5 * m3) + x3 * (5 * g2);
    A5 = T4 >>> 13, T4 &= 8191, T4 += B3 * (5 * h4) + E5 * (5 * l4) + I4 * (5 * a2) + S4 * (5 * u3) + O5 * (5 * c4), A5 += T4 >>> 13, T4 &= 8191;
    let U4 = A5 + d3 * c4 + w3 * f7 + p4 * (5 * v4) + y5 * (5 * b3) + x3 * (5 * m3);
    A5 = U4 >>> 13, U4 &= 8191, U4 += B3 * (5 * g2) + E5 * (5 * h4) + I4 * (5 * l4) + S4 * (5 * a2) + O5 * (5 * u3), A5 += U4 >>> 13, U4 &= 8191;
    let $4 = A5 + d3 * u3 + w3 * c4 + p4 * f7 + y5 * (5 * v4) + x3 * (5 * b3);
    A5 = $4 >>> 13, $4 &= 8191, $4 += B3 * (5 * m3) + E5 * (5 * g2) + I4 * (5 * h4) + S4 * (5 * l4) + O5 * (5 * a2), A5 += $4 >>> 13, $4 &= 8191;
    let D2 = A5 + d3 * a2 + w3 * u3 + p4 * c4 + y5 * f7 + x3 * (5 * v4);
    A5 = D2 >>> 13, D2 &= 8191, D2 += B3 * (5 * b3) + E5 * (5 * m3) + I4 * (5 * g2) + S4 * (5 * h4) + O5 * (5 * l4), A5 += D2 >>> 13, D2 &= 8191;
    let q2 = A5 + d3 * l4 + w3 * a2 + p4 * u3 + y5 * c4 + x3 * f7;
    A5 = q2 >>> 13, q2 &= 8191, q2 += B3 * (5 * v4) + E5 * (5 * b3) + I4 * (5 * m3) + S4 * (5 * g2) + O5 * (5 * h4), A5 += q2 >>> 13, q2 &= 8191;
    let j3 = A5 + d3 * h4 + w3 * l4 + p4 * a2 + y5 * u3 + x3 * c4;
    A5 = j3 >>> 13, j3 &= 8191, j3 += B3 * f7 + E5 * (5 * v4) + I4 * (5 * b3) + S4 * (5 * m3) + O5 * (5 * g2), A5 += j3 >>> 13, j3 &= 8191;
    let K3 = A5 + d3 * g2 + w3 * h4 + p4 * l4 + y5 * a2 + x3 * u3;
    A5 = K3 >>> 13, K3 &= 8191, K3 += B3 * c4 + E5 * f7 + I4 * (5 * v4) + S4 * (5 * b3) + O5 * (5 * m3), A5 += K3 >>> 13, K3 &= 8191;
    let et = A5 + d3 * m3 + w3 * g2 + p4 * h4 + y5 * l4 + x3 * a2;
    A5 = et >>> 13, et &= 8191, et += B3 * u3 + E5 * c4 + I4 * f7 + S4 * (5 * v4) + O5 * (5 * b3), A5 += et >>> 13, et &= 8191;
    let Z3 = A5 + d3 * b3 + w3 * m3 + p4 * g2 + y5 * h4 + x3 * l4;
    A5 = Z3 >>> 13, Z3 &= 8191, Z3 += B3 * a2 + E5 * u3 + I4 * c4 + S4 * f7 + O5 * (5 * v4), A5 += Z3 >>> 13, Z3 &= 8191;
    let z2 = A5 + d3 * v4 + w3 * b3 + p4 * m3 + y5 * g2 + x3 * h4;
    A5 = z2 >>> 13, z2 &= 8191, z2 += B3 * l4 + E5 * a2 + I4 * u3 + S4 * c4 + O5 * f7, A5 += z2 >>> 13, z2 &= 8191, A5 = (A5 << 2) + A5 | 0, A5 = A5 + T4 | 0, T4 = A5 & 8191, A5 = A5 >>> 13, U4 += A5, s[0] = T4, s[1] = U4, s[2] = $4, s[3] = D2, s[4] = q2, s[5] = j3, s[6] = K3, s[7] = et, s[8] = Z3, s[9] = z2;
  }
  finalize() {
    const { h: e, pad: n2 } = this, r2 = new Uint16Array(10);
    let o3 = e[1] >>> 13;
    e[1] &= 8191;
    for (let f7 = 2; f7 < 10; f7++) e[f7] += o3, o3 = e[f7] >>> 13, e[f7] &= 8191;
    e[0] += o3 * 5, o3 = e[0] >>> 13, e[0] &= 8191, e[1] += o3, o3 = e[1] >>> 13, e[1] &= 8191, e[2] += o3, r2[0] = e[0] + 5, o3 = r2[0] >>> 13, r2[0] &= 8191;
    for (let f7 = 1; f7 < 10; f7++) r2[f7] = e[f7] + o3, o3 = r2[f7] >>> 13, r2[f7] &= 8191;
    r2[9] -= 8192;
    let s = (o3 ^ 1) - 1;
    for (let f7 = 0; f7 < 10; f7++) r2[f7] &= s;
    s = ~s;
    for (let f7 = 0; f7 < 10; f7++) e[f7] = e[f7] & s | r2[f7];
    e[0] = (e[0] | e[1] << 13) & 65535, e[1] = (e[1] >>> 3 | e[2] << 10) & 65535, e[2] = (e[2] >>> 6 | e[3] << 7) & 65535, e[3] = (e[3] >>> 9 | e[4] << 4) & 65535, e[4] = (e[4] >>> 12 | e[5] << 1 | e[6] << 14) & 65535, e[5] = (e[6] >>> 2 | e[7] << 11) & 65535, e[6] = (e[7] >>> 5 | e[8] << 8) & 65535, e[7] = (e[8] >>> 8 | e[9] << 5) & 65535;
    let i3 = e[0] + n2[0];
    e[0] = i3 & 65535;
    for (let f7 = 1; f7 < 8; f7++) i3 = (e[f7] + n2[f7] | 0) + (i3 >>> 16) | 0, e[f7] = i3 & 65535;
    Wt(r2);
  }
  update(e) {
    to(this), e = mn(e), nt(e);
    const { buffer: n2, blockLen: r2 } = this, o3 = e.length;
    for (let s = 0; s < o3; ) {
      const i3 = Math.min(r2 - this.pos, o3 - s);
      if (i3 === r2) {
        for (; r2 <= o3 - s; s += r2) this.process(e, s);
        continue;
      }
      n2.set(e.subarray(s, s + i3), this.pos), this.pos += i3, s += i3, this.pos === r2 && (this.process(n2, 0, false), this.pos = 0);
    }
    return this;
  }
  destroy() {
    Wt(this.h, this.r, this.buffer, this.pad);
  }
  digestInto(e) {
    to(this), Sf(e, this), this.finished = true;
    const { buffer: n2, h: r2 } = this;
    let { pos: o3 } = this;
    if (o3) {
      for (n2[o3++] = 1; o3 < 16; o3++) n2[o3] = 0;
      this.process(n2, 0, true);
    }
    this.finalize();
    let s = 0;
    for (let i3 = 0; i3 < 8; i3++) e[s++] = r2[i3] >>> 0, e[s++] = r2[i3] >>> 8;
    return e;
  }
  digest() {
    const { buffer: e, outputLen: n2 } = this;
    this.digestInto(e);
    const r2 = e.slice(0, n2);
    return this.destroy(), r2;
  }
};
function qf(t) {
  const e = (r2, o3) => t(o3).update(mn(r2)).digest(), n2 = t(new Uint8Array(32));
  return e.outputLen = n2.outputLen, e.blockLen = n2.blockLen, e.create = (r2) => t(r2), e;
}
var Kf = qf((t) => new Vf(t));
function Ff(t, e, n2, r2, o3, s = 20) {
  let i3 = t[0], f7 = t[1], c4 = t[2], u3 = t[3], a2 = e[0], l4 = e[1], h4 = e[2], g2 = e[3], m3 = e[4], b3 = e[5], v4 = e[6], L4 = e[7], V4 = o3, C4 = n2[0], H2 = n2[1], _ = n2[2], k4 = i3, P4 = f7, R4 = c4, d3 = u3, w3 = a2, p4 = l4, y5 = h4, x3 = g2, B3 = m3, E5 = b3, I4 = v4, S4 = L4, O5 = V4, A5 = C4, T4 = H2, U4 = _;
  for (let D2 = 0; D2 < s; D2 += 2) k4 = k4 + w3 | 0, O5 = M2(O5 ^ k4, 16), B3 = B3 + O5 | 0, w3 = M2(w3 ^ B3, 12), k4 = k4 + w3 | 0, O5 = M2(O5 ^ k4, 8), B3 = B3 + O5 | 0, w3 = M2(w3 ^ B3, 7), P4 = P4 + p4 | 0, A5 = M2(A5 ^ P4, 16), E5 = E5 + A5 | 0, p4 = M2(p4 ^ E5, 12), P4 = P4 + p4 | 0, A5 = M2(A5 ^ P4, 8), E5 = E5 + A5 | 0, p4 = M2(p4 ^ E5, 7), R4 = R4 + y5 | 0, T4 = M2(T4 ^ R4, 16), I4 = I4 + T4 | 0, y5 = M2(y5 ^ I4, 12), R4 = R4 + y5 | 0, T4 = M2(T4 ^ R4, 8), I4 = I4 + T4 | 0, y5 = M2(y5 ^ I4, 7), d3 = d3 + x3 | 0, U4 = M2(U4 ^ d3, 16), S4 = S4 + U4 | 0, x3 = M2(x3 ^ S4, 12), d3 = d3 + x3 | 0, U4 = M2(U4 ^ d3, 8), S4 = S4 + U4 | 0, x3 = M2(x3 ^ S4, 7), k4 = k4 + p4 | 0, U4 = M2(U4 ^ k4, 16), I4 = I4 + U4 | 0, p4 = M2(p4 ^ I4, 12), k4 = k4 + p4 | 0, U4 = M2(U4 ^ k4, 8), I4 = I4 + U4 | 0, p4 = M2(p4 ^ I4, 7), P4 = P4 + y5 | 0, O5 = M2(O5 ^ P4, 16), S4 = S4 + O5 | 0, y5 = M2(y5 ^ S4, 12), P4 = P4 + y5 | 0, O5 = M2(O5 ^ P4, 8), S4 = S4 + O5 | 0, y5 = M2(y5 ^ S4, 7), R4 = R4 + x3 | 0, A5 = M2(A5 ^ R4, 16), B3 = B3 + A5 | 0, x3 = M2(x3 ^ B3, 12), R4 = R4 + x3 | 0, A5 = M2(A5 ^ R4, 8), B3 = B3 + A5 | 0, x3 = M2(x3 ^ B3, 7), d3 = d3 + w3 | 0, T4 = M2(T4 ^ d3, 16), E5 = E5 + T4 | 0, w3 = M2(w3 ^ E5, 12), d3 = d3 + w3 | 0, T4 = M2(T4 ^ d3, 8), E5 = E5 + T4 | 0, w3 = M2(w3 ^ E5, 7);
  let $4 = 0;
  r2[$4++] = i3 + k4 | 0, r2[$4++] = f7 + P4 | 0, r2[$4++] = c4 + R4 | 0, r2[$4++] = u3 + d3 | 0, r2[$4++] = a2 + w3 | 0, r2[$4++] = l4 + p4 | 0, r2[$4++] = h4 + y5 | 0, r2[$4++] = g2 + x3 | 0, r2[$4++] = m3 + B3 | 0, r2[$4++] = b3 + E5 | 0, r2[$4++] = v4 + I4 | 0, r2[$4++] = L4 + S4 | 0, r2[$4++] = V4 + O5 | 0, r2[$4++] = C4 + A5 | 0, r2[$4++] = H2 + T4 | 0, r2[$4++] = _ + U4 | 0;
}
var zf = Mf(Ff, { counterRight: false, counterLength: 4, allowShortKeys: false });
var Gf = new Uint8Array(16);
var io = (t, e) => {
  t.update(e);
  const n2 = e.length % 16;
  n2 && t.update(Gf.subarray(n2));
};
var Zf = new Uint8Array(32);
function fo(t, e, n2, r2, o3) {
  const s = t(e, n2, Zf), i3 = Kf.create(s);
  o3 && io(i3, o3), io(i3, r2);
  const f7 = $f(r2.length, o3 ? o3.length : 0, true);
  i3.update(f7);
  const c4 = i3.digest();
  return Wt(s, f7), c4;
}
var Wf = (t) => (e, n2, r2) => ({ encrypt(s, i3) {
  const f7 = s.length;
  i3 = eo(f7 + 16, i3, false), i3.set(s);
  const c4 = i3.subarray(0, -16);
  t(e, n2, c4, c4, 1);
  const u3 = fo(t, e, n2, c4, r2);
  return i3.set(u3, f7), Wt(u3), i3;
}, decrypt(s, i3) {
  i3 = eo(s.length - 16, i3, false);
  const f7 = s.subarray(0, -16), c4 = s.subarray(-16), u3 = fo(t, e, n2, f7, r2);
  if (!Tf(c4, u3)) throw new Error("invalid tag");
  return i3.set(s.subarray(0, -16)), t(e, n2, i3, i3, 1), Wt(u3), i3;
} });
var co = Rf({ blockSize: 64, nonceLength: 12, tagLength: 16 }, Wf(zf));
var ao = class extends Ie {
  constructor(e, n2) {
    super(), this.finished = false, this.destroyed = false, rn(e);
    const r2 = ht(n2);
    if (this.iHash = e.create(), typeof this.iHash.update != "function") throw new Error("Expected instance of class which extends utils.Hash");
    this.blockLen = this.iHash.blockLen, this.outputLen = this.iHash.outputLen;
    const o3 = this.blockLen, s = new Uint8Array(o3);
    s.set(r2.length > o3 ? e.create().update(r2).digest() : r2);
    for (let i3 = 0; i3 < s.length; i3++) s[i3] ^= 54;
    this.iHash.update(s), this.oHash = e.create();
    for (let i3 = 0; i3 < s.length; i3++) s[i3] ^= 106;
    this.oHash.update(s), ut(s);
  }
  update(e) {
    return Nt(this), this.iHash.update(e), this;
  }
  digestInto(e) {
    Nt(this), at(e, this.outputLen), this.finished = true, this.iHash.digestInto(e), this.oHash.update(e), this.oHash.digestInto(e), this.destroy();
  }
  digest() {
    const e = new Uint8Array(this.oHash.outputLen);
    return this.digestInto(e), e;
  }
  _cloneInto(e) {
    e || (e = Object.create(Object.getPrototypeOf(this), {}));
    const { oHash: n2, iHash: r2, finished: o3, destroyed: s, blockLen: i3, outputLen: f7 } = this;
    return e = e, e.finished = o3, e.destroyed = s, e.blockLen = i3, e.outputLen = f7, e.oHash = n2._cloneInto(e.oHash), e.iHash = r2._cloneInto(e.iHash), e;
  }
  clone() {
    return this._cloneInto();
  }
  destroy() {
    this.destroyed = true, this.oHash.destroy(), this.iHash.destroy();
  }
};
var _e = (t, e, n2) => new ao(t, e).update(n2).digest();
_e.create = (t, e) => new ao(t, e);
function Yf(t, e, n2) {
  return rn(t), n2 === void 0 && (n2 = new Uint8Array(t.outputLen)), _e(t, ht(n2), ht(e));
}
var vn = Uint8Array.from([0]);
var uo = Uint8Array.of();
function Xf(t, e, n2, r2 = 32) {
  rn(t), mt(r2);
  const o3 = t.outputLen;
  if (r2 > 255 * o3) throw new Error("Length should be <= 255*HashLen");
  const s = Math.ceil(r2 / o3);
  n2 === void 0 && (n2 = uo);
  const i3 = new Uint8Array(s * o3), f7 = _e.create(t, e), c4 = f7._cloneInto(), u3 = new Uint8Array(f7.outputLen);
  for (let a2 = 0; a2 < s; a2++) vn[0] = a2 + 1, c4.update(a2 === 0 ? uo : u3).update(n2).update(vn).digestInto(u3), i3.set(u3, o3 * a2), f7._cloneInto(c4);
  return f7.destroy(), c4.destroy(), ut(u3, vn), i3.slice(0, r2);
}
var Jf = (t, e, n2, r2, o3) => Xf(t, Yf(t, e, n2), r2, o3);
var Te = Ae;
var En = BigInt(0);
var Bn = BigInt(1);
function Re(t, e) {
  if (typeof e != "boolean") throw new Error(t + " boolean expected, got " + e);
}
function $e(t) {
  const e = t.toString(16);
  return e.length & 1 ? "0" + e : e;
}
function lo(t) {
  if (typeof t != "string") throw new Error("hex string expected, got " + typeof t);
  return t === "" ? En : BigInt("0x" + t);
}
function Ce(t) {
  return lo(ce(t));
}
function Le(t) {
  return at(t), lo(ce(Uint8Array.from(t).reverse()));
}
function In(t, e) {
  return fn(t.toString(16).padStart(e * 2, "0"));
}
function An(t, e) {
  return In(t, e).reverse();
}
function rt(t, e, n2) {
  let r2;
  if (typeof e == "string") try {
    r2 = fn(e);
  } catch (s) {
    throw new Error(t + " must be hex string or Uint8Array, cause: " + s);
  }
  else if (nn(e)) r2 = Uint8Array.from(e);
  else throw new Error(t + " must be hex string or Uint8Array");
  const o3 = r2.length;
  if (typeof n2 == "number" && o3 !== n2) throw new Error(t + " of length " + n2 + " expected, got " + o3);
  return r2;
}
var Sn = (t) => typeof t == "bigint" && En <= t;
function Qf(t, e, n2) {
  return Sn(t) && Sn(e) && Sn(n2) && e <= t && t < n2;
}
function Nn(t, e, n2, r2) {
  if (!Qf(e, n2, r2)) throw new Error("expected valid " + t + ": " + n2 + " <= n < " + r2 + ", got " + e);
}
function tc(t) {
  let e;
  for (e = 0; t > En; t >>= Bn, e += 1) ;
  return e;
}
var je = (t) => (Bn << BigInt(t)) - Bn;
function ec(t, e, n2) {
  if (typeof t != "number" || t < 2) throw new Error("hashLen must be a number");
  if (typeof e != "number" || e < 2) throw new Error("qByteLen must be a number");
  if (typeof n2 != "function") throw new Error("hmacFn must be a function");
  const r2 = (g2) => new Uint8Array(g2), o3 = (g2) => Uint8Array.of(g2);
  let s = r2(t), i3 = r2(t), f7 = 0;
  const c4 = () => {
    s.fill(1), i3.fill(0), f7 = 0;
  }, u3 = (...g2) => n2(i3, s, ...g2), a2 = (g2 = r2(0)) => {
    i3 = u3(o3(0), g2), s = u3(), g2.length !== 0 && (i3 = u3(o3(1), g2), s = u3());
  }, l4 = () => {
    if (f7++ >= 1e3) throw new Error("drbg: tried 1000 values");
    let g2 = 0;
    const m3 = [];
    for (; g2 < e; ) {
      s = u3();
      const b3 = s.slice();
      m3.push(b3), g2 += s.length;
    }
    return Ht(...m3);
  };
  return (g2, m3) => {
    c4(), a2(g2);
    let b3;
    for (; !(b3 = m3(l4())); ) a2();
    return c4(), b3;
  };
}
function ke(t, e, n2 = {}) {
  if (!t || typeof t != "object") throw new Error("expected valid options object");
  function r2(o3, s, i3) {
    const f7 = t[o3];
    if (i3 && f7 === void 0) return;
    const c4 = typeof f7;
    if (c4 !== s || f7 === null) throw new Error(`param "${o3}" is invalid: expected ${s}, got ${c4}`);
  }
  Object.entries(e).forEach(([o3, s]) => r2(o3, s, false)), Object.entries(n2).forEach(([o3, s]) => r2(o3, s, true));
}
function ho(t) {
  const e = /* @__PURE__ */ new WeakMap();
  return (n2, ...r2) => {
    const o3 = e.get(n2);
    if (o3 !== void 0) return o3;
    const s = t(n2, ...r2);
    return e.set(n2, s), s;
  };
}
var ot = BigInt(0);
var Q = BigInt(1);
var Dt = BigInt(2);
var nc = BigInt(3);
var po = BigInt(4);
var go = BigInt(5);
var bo = BigInt(8);
function lt(t, e) {
  const n2 = t % e;
  return n2 >= ot ? n2 : e + n2;
}
function pt(t, e, n2) {
  let r2 = t;
  for (; e-- > ot; ) r2 *= r2, r2 %= n2;
  return r2;
}
function yo(t, e) {
  if (t === ot) throw new Error("invert: expected non-zero number");
  if (e <= ot) throw new Error("invert: expected positive modulus, got " + e);
  let n2 = lt(t, e), r2 = e, o3 = ot, s = Q;
  for (; n2 !== ot; ) {
    const f7 = r2 / n2, c4 = r2 % n2, u3 = o3 - s * f7;
    r2 = n2, n2 = c4, o3 = s, s = u3;
  }
  if (r2 !== Q) throw new Error("invert: does not exist");
  return lt(o3, e);
}
function mo(t, e) {
  const n2 = (t.ORDER + Q) / po, r2 = t.pow(e, n2);
  if (!t.eql(t.sqr(r2), e)) throw new Error("Cannot find square root");
  return r2;
}
function rc(t, e) {
  const n2 = (t.ORDER - go) / bo, r2 = t.mul(e, Dt), o3 = t.pow(r2, n2), s = t.mul(e, o3), i3 = t.mul(t.mul(s, Dt), o3), f7 = t.mul(s, t.sub(i3, t.ONE));
  if (!t.eql(t.sqr(f7), e)) throw new Error("Cannot find square root");
  return f7;
}
function oc(t) {
  if (t < BigInt(3)) throw new Error("sqrt is not defined for small field");
  let e = t - Q, n2 = 0;
  for (; e % Dt === ot; ) e /= Dt, n2++;
  let r2 = Dt;
  const o3 = Yt(t);
  for (; xo(o3, r2) === 1; ) if (r2++ > 1e3) throw new Error("Cannot find square root: probably non-prime P");
  if (n2 === 1) return mo;
  let s = o3.pow(r2, e);
  const i3 = (e + Q) / Dt;
  return function(c4, u3) {
    if (c4.is0(u3)) return u3;
    if (xo(c4, u3) !== 1) throw new Error("Cannot find square root");
    let a2 = n2, l4 = c4.mul(c4.ONE, s), h4 = c4.pow(u3, e), g2 = c4.pow(u3, i3);
    for (; !c4.eql(h4, c4.ONE); ) {
      if (c4.is0(h4)) return c4.ZERO;
      let m3 = 1, b3 = c4.sqr(h4);
      for (; !c4.eql(b3, c4.ONE); ) if (m3++, b3 = c4.sqr(b3), m3 === a2) throw new Error("Cannot find square root");
      const v4 = Q << BigInt(a2 - m3 - 1), L4 = c4.pow(l4, v4);
      a2 = m3, l4 = c4.sqr(L4), h4 = c4.mul(h4, l4), g2 = c4.mul(g2, L4);
    }
    return g2;
  };
}
function sc(t) {
  return t % po === nc ? mo : t % bo === go ? rc : oc(t);
}
var ic = ["create", "isValid", "is0", "neg", "inv", "sqrt", "sqr", "eql", "add", "sub", "mul", "pow", "div", "addN", "subN", "mulN", "sqrN"];
function fc(t) {
  const e = { ORDER: "bigint", MASK: "bigint", BYTES: "number", BITS: "number" }, n2 = ic.reduce((r2, o3) => (r2[o3] = "function", r2), e);
  return ke(t, n2), t;
}
function cc(t, e, n2) {
  if (n2 < ot) throw new Error("invalid exponent, negatives unsupported");
  if (n2 === ot) return t.ONE;
  if (n2 === Q) return e;
  let r2 = t.ONE, o3 = e;
  for (; n2 > ot; ) n2 & Q && (r2 = t.mul(r2, o3)), o3 = t.sqr(o3), n2 >>= Q;
  return r2;
}
function wo(t, e, n2 = false) {
  const r2 = new Array(e.length).fill(n2 ? t.ZERO : void 0), o3 = e.reduce((i3, f7, c4) => t.is0(f7) ? i3 : (r2[c4] = i3, t.mul(i3, f7)), t.ONE), s = t.inv(o3);
  return e.reduceRight((i3, f7, c4) => t.is0(f7) ? i3 : (r2[c4] = t.mul(i3, r2[c4]), t.mul(i3, f7)), s), r2;
}
function xo(t, e) {
  const n2 = (t.ORDER - Q) / Dt, r2 = t.pow(e, n2), o3 = t.eql(r2, t.ONE), s = t.eql(r2, t.ZERO), i3 = t.eql(r2, t.neg(t.ONE));
  if (!o3 && !s && !i3) throw new Error("invalid Legendre symbol result");
  return o3 ? 1 : s ? 0 : -1;
}
function ac(t, e) {
  e !== void 0 && mt(e);
  const n2 = e !== void 0 ? e : t.toString(2).length, r2 = Math.ceil(n2 / 8);
  return { nBitLength: n2, nByteLength: r2 };
}
function Yt(t, e, n2 = false, r2 = {}) {
  if (t <= ot) throw new Error("invalid field: expected ORDER > 0, got " + t);
  let o3, s;
  if (typeof e == "object" && e != null) {
    if (r2.sqrt || n2) throw new Error("cannot specify opts in two arguments");
    const a2 = e;
    a2.BITS && (o3 = a2.BITS), a2.sqrt && (s = a2.sqrt), typeof a2.isLE == "boolean" && (n2 = a2.isLE);
  } else typeof e == "number" && (o3 = e), r2.sqrt && (s = r2.sqrt);
  const { nBitLength: i3, nByteLength: f7 } = ac(t, o3);
  if (f7 > 2048) throw new Error("invalid field: expected ORDER of <= 2048 bytes");
  let c4;
  const u3 = Object.freeze({ ORDER: t, isLE: n2, BITS: i3, BYTES: f7, MASK: je(i3), ZERO: ot, ONE: Q, create: (a2) => lt(a2, t), isValid: (a2) => {
    if (typeof a2 != "bigint") throw new Error("invalid field element: expected bigint, got " + typeof a2);
    return ot <= a2 && a2 < t;
  }, is0: (a2) => a2 === ot, isValidNot0: (a2) => !u3.is0(a2) && u3.isValid(a2), isOdd: (a2) => (a2 & Q) === Q, neg: (a2) => lt(-a2, t), eql: (a2, l4) => a2 === l4, sqr: (a2) => lt(a2 * a2, t), add: (a2, l4) => lt(a2 + l4, t), sub: (a2, l4) => lt(a2 - l4, t), mul: (a2, l4) => lt(a2 * l4, t), pow: (a2, l4) => cc(u3, a2, l4), div: (a2, l4) => lt(a2 * yo(l4, t), t), sqrN: (a2) => a2 * a2, addN: (a2, l4) => a2 + l4, subN: (a2, l4) => a2 - l4, mulN: (a2, l4) => a2 * l4, inv: (a2) => yo(a2, t), sqrt: s || ((a2) => (c4 || (c4 = sc(t)), c4(u3, a2))), toBytes: (a2) => n2 ? An(a2, f7) : In(a2, f7), fromBytes: (a2) => {
    if (a2.length !== f7) throw new Error("Field.fromBytes: expected " + f7 + " bytes, got " + a2.length);
    return n2 ? Le(a2) : Ce(a2);
  }, invertBatch: (a2) => wo(u3, a2), cmov: (a2, l4, h4) => h4 ? l4 : a2 });
  return Object.freeze(u3);
}
function vo(t) {
  if (typeof t != "bigint") throw new Error("field order must be bigint");
  const e = t.toString(2).length;
  return Math.ceil(e / 8);
}
function Eo(t) {
  const e = vo(t);
  return e + Math.ceil(e / 2);
}
function uc(t, e, n2 = false) {
  const r2 = t.length, o3 = vo(e), s = Eo(e);
  if (r2 < 16 || r2 < s || r2 > 1024) throw new Error("expected " + s + "-1024 bytes of input, got " + r2);
  const i3 = n2 ? Le(t) : Ce(t), f7 = lt(i3, e - Q) + Q;
  return n2 ? An(f7, o3) : In(f7, o3);
}
var Xt = BigInt(0);
var Mt = BigInt(1);
function le(t, e) {
  const n2 = e.negate();
  return t ? n2 : e;
}
function lc(t, e, n2) {
  const r2 = e === "pz" ? (i3) => i3.pz : (i3) => i3.ez, o3 = wo(t.Fp, n2.map(r2));
  return n2.map((i3, f7) => i3.toAffine(o3[f7])).map(t.fromAffine);
}
function Bo(t, e) {
  if (!Number.isSafeInteger(t) || t <= 0 || t > e) throw new Error("invalid window size, expected [1.." + e + "], got W=" + t);
}
function On(t, e) {
  Bo(t, e);
  const n2 = Math.ceil(e / t) + 1, r2 = 2 ** (t - 1), o3 = 2 ** t, s = je(t), i3 = BigInt(t);
  return { windows: n2, windowSize: r2, mask: s, maxNumber: o3, shiftBy: i3 };
}
function Io(t, e, n2) {
  const { windowSize: r2, mask: o3, maxNumber: s, shiftBy: i3 } = n2;
  let f7 = Number(t & o3), c4 = t >> i3;
  f7 > r2 && (f7 -= s, c4 += Mt);
  const u3 = e * r2, a2 = u3 + Math.abs(f7) - 1, l4 = f7 === 0, h4 = f7 < 0, g2 = e % 2 !== 0;
  return { nextN: c4, offset: a2, isZero: l4, isNeg: h4, isNegF: g2, offsetF: u3 };
}
function dc(t, e) {
  if (!Array.isArray(t)) throw new Error("array expected");
  t.forEach((n2, r2) => {
    if (!(n2 instanceof e)) throw new Error("invalid point at index " + r2);
  });
}
function hc(t, e) {
  if (!Array.isArray(t)) throw new Error("array of scalars expected");
  t.forEach((n2, r2) => {
    if (!e.isValid(n2)) throw new Error("invalid scalar at index " + r2);
  });
}
var Un = /* @__PURE__ */ new WeakMap();
var Ao = /* @__PURE__ */ new WeakMap();
function _n(t) {
  return Ao.get(t) || 1;
}
function So(t) {
  if (t !== Xt) throw new Error("invalid wNAF");
}
function pc(t, e) {
  return { constTimeNegate: le, hasPrecomputes(n2) {
    return _n(n2) !== 1;
  }, unsafeLadder(n2, r2, o3 = t.ZERO) {
    let s = n2;
    for (; r2 > Xt; ) r2 & Mt && (o3 = o3.add(s)), s = s.double(), r2 >>= Mt;
    return o3;
  }, precomputeWindow(n2, r2) {
    const { windows: o3, windowSize: s } = On(r2, e), i3 = [];
    let f7 = n2, c4 = f7;
    for (let u3 = 0; u3 < o3; u3++) {
      c4 = f7, i3.push(c4);
      for (let a2 = 1; a2 < s; a2++) c4 = c4.add(f7), i3.push(c4);
      f7 = c4.double();
    }
    return i3;
  }, wNAF(n2, r2, o3) {
    let s = t.ZERO, i3 = t.BASE;
    const f7 = On(n2, e);
    for (let c4 = 0; c4 < f7.windows; c4++) {
      const { nextN: u3, offset: a2, isZero: l4, isNeg: h4, isNegF: g2, offsetF: m3 } = Io(o3, c4, f7);
      o3 = u3, l4 ? i3 = i3.add(le(g2, r2[m3])) : s = s.add(le(h4, r2[a2]));
    }
    return So(o3), { p: s, f: i3 };
  }, wNAFUnsafe(n2, r2, o3, s = t.ZERO) {
    const i3 = On(n2, e);
    for (let f7 = 0; f7 < i3.windows && o3 !== Xt; f7++) {
      const { nextN: c4, offset: u3, isZero: a2, isNeg: l4 } = Io(o3, f7, i3);
      if (o3 = c4, !a2) {
        const h4 = r2[u3];
        s = s.add(l4 ? h4.negate() : h4);
      }
    }
    return So(o3), s;
  }, getPrecomputes(n2, r2, o3) {
    let s = Un.get(r2);
    return s || (s = this.precomputeWindow(r2, n2), n2 !== 1 && (typeof o3 == "function" && (s = o3(s)), Un.set(r2, s))), s;
  }, wNAFCached(n2, r2, o3) {
    const s = _n(n2);
    return this.wNAF(s, this.getPrecomputes(s, n2, o3), r2);
  }, wNAFCachedUnsafe(n2, r2, o3, s) {
    const i3 = _n(n2);
    return i3 === 1 ? this.unsafeLadder(n2, r2, s) : this.wNAFUnsafe(i3, this.getPrecomputes(i3, n2, o3), r2, s);
  }, setWindowSize(n2, r2) {
    Bo(r2, e), Ao.set(n2, r2), Un.delete(n2);
  } };
}
function gc(t, e, n2, r2) {
  let o3 = e, s = t.ZERO, i3 = t.ZERO;
  for (; n2 > Xt || r2 > Xt; ) n2 & Mt && (s = s.add(o3)), r2 & Mt && (i3 = i3.add(o3)), o3 = o3.double(), n2 >>= Mt, r2 >>= Mt;
  return { p1: s, p2: i3 };
}
function bc(t, e, n2, r2) {
  dc(n2, t), hc(r2, e);
  const o3 = n2.length, s = r2.length;
  if (o3 !== s) throw new Error("arrays of points and scalars must have equal length");
  const i3 = t.ZERO, f7 = tc(BigInt(o3));
  let c4 = 1;
  f7 > 12 ? c4 = f7 - 3 : f7 > 4 ? c4 = f7 - 2 : f7 > 0 && (c4 = 2);
  const u3 = je(c4), a2 = new Array(Number(u3) + 1).fill(i3), l4 = Math.floor((e.BITS - 1) / c4) * c4;
  let h4 = i3;
  for (let g2 = l4; g2 >= 0; g2 -= c4) {
    a2.fill(i3);
    for (let b3 = 0; b3 < s; b3++) {
      const v4 = r2[b3], L4 = Number(v4 >> BigInt(g2) & u3);
      a2[L4] = a2[L4].add(n2[b3]);
    }
    let m3 = i3;
    for (let b3 = a2.length - 1, v4 = i3; b3 > 0; b3--) v4 = v4.add(a2[b3]), m3 = m3.add(v4);
    if (h4 = h4.add(m3), g2 !== 0) for (let b3 = 0; b3 < c4; b3++) h4 = h4.double();
  }
  return h4;
}
function No(t, e) {
  if (e) {
    if (e.ORDER !== t) throw new Error("Field.ORDER must match order: Fp == p, Fn == n");
    return fc(e), e;
  } else return Yt(t);
}
function yc(t, e, n2 = {}) {
  if (!e || typeof e != "object") throw new Error(`expected valid ${t} CURVE object`);
  for (const f7 of ["p", "n", "h"]) {
    const c4 = e[f7];
    if (!(typeof c4 == "bigint" && c4 > Xt)) throw new Error(`CURVE.${f7} must be positive bigint`);
  }
  const r2 = No(e.p, n2.Fp), o3 = No(e.n, n2.Fn), i3 = ["Gx", "Gy", "a", t === "weierstrass" ? "b" : "d"];
  for (const f7 of i3) if (!r2.isValid(e[f7])) throw new Error(`CURVE.${f7} must be valid field element of CURVE.Fp`);
  return { Fp: r2, Fn: o3 };
}
BigInt(0), BigInt(1), BigInt(2), BigInt(8);
var de = BigInt(0);
var Jt = BigInt(1);
var Pe = BigInt(2);
function mc(t) {
  return ke(t, { adjustScalarBytes: "function", powPminus2: "function" }), Object.freeze({ ...t });
}
function wc(t) {
  const e = mc(t), { P: n2, type: r2, adjustScalarBytes: o3, powPminus2: s, randomBytes: i3 } = e, f7 = r2 === "x25519";
  if (!f7 && r2 !== "x448") throw new Error("invalid type");
  const c4 = i3 || Zt, u3 = f7 ? 255 : 448, a2 = f7 ? 32 : 56, l4 = BigInt(f7 ? 9 : 5), h4 = BigInt(f7 ? 121665 : 39081), g2 = f7 ? Pe ** BigInt(254) : Pe ** BigInt(447), m3 = f7 ? BigInt(8) * Pe ** BigInt(251) - Jt : BigInt(4) * Pe ** BigInt(445) - Jt, b3 = g2 + m3 + Jt, v4 = (d3) => lt(d3, n2), L4 = V4(l4);
  function V4(d3) {
    return An(v4(d3), a2);
  }
  function C4(d3) {
    const w3 = rt("u coordinate", d3, a2);
    return f7 && (w3[31] &= 127), v4(Le(w3));
  }
  function H2(d3) {
    return Le(o3(rt("scalar", d3, a2)));
  }
  function _(d3, w3) {
    const p4 = R4(C4(w3), H2(d3));
    if (p4 === de) throw new Error("invalid private or public key received");
    return V4(p4);
  }
  function k4(d3) {
    return _(d3, L4);
  }
  function P4(d3, w3, p4) {
    const y5 = v4(d3 * (w3 - p4));
    return w3 = v4(w3 - y5), p4 = v4(p4 + y5), { x_2: w3, x_3: p4 };
  }
  function R4(d3, w3) {
    Nn("u", d3, de, n2), Nn("scalar", w3, g2, b3);
    const p4 = w3, y5 = d3;
    let x3 = Jt, B3 = de, E5 = d3, I4 = Jt, S4 = de;
    for (let A5 = BigInt(u3 - 1); A5 >= de; A5--) {
      const T4 = p4 >> A5 & Jt;
      S4 ^= T4, { x_2: x3, x_3: E5 } = P4(S4, x3, E5), { x_2: B3, x_3: I4 } = P4(S4, B3, I4), S4 = T4;
      const U4 = x3 + B3, $4 = v4(U4 * U4), D2 = x3 - B3, q2 = v4(D2 * D2), j3 = $4 - q2, K3 = E5 + I4, et = E5 - I4, Z3 = v4(et * U4), z2 = v4(K3 * D2), Ft2 = Z3 + z2, yt3 = Z3 - z2;
      E5 = v4(Ft2 * Ft2), I4 = v4(y5 * v4(yt3 * yt3)), x3 = v4($4 * q2), B3 = v4(j3 * ($4 + v4(h4 * j3)));
    }
    ({ x_2: x3, x_3: E5 } = P4(S4, x3, E5)), { x_2: B3, x_3: I4 } = P4(S4, B3, I4);
    const O5 = s(B3);
    return v4(x3 * O5);
  }
  return { scalarMult: _, scalarMultBase: k4, getSharedSecret: (d3, w3) => _(d3, w3), getPublicKey: (d3) => k4(d3), utils: { randomPrivateKey: () => c4(a2) }, GuBytes: L4.slice() };
}
BigInt(0);
var xc = BigInt(1);
var Oo = BigInt(2);
var vc = BigInt(3);
var Ec = BigInt(5);
var Bc = BigInt(8);
var Uo = { p: BigInt("0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffed"), n: BigInt("0x1000000000000000000000000000000014def9dea2f79cd65812631a5cf5d3ed"), h: Bc, a: BigInt("0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec"), d: BigInt("0x52036cee2b6ffe738cc740797779e89800700a4d4141d8ab75eb4dca135978a3"), Gx: BigInt("0x216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a"), Gy: BigInt("0x6666666666666666666666666666666666666666666666666666666666666658") };
function Ic(t) {
  const e = BigInt(10), n2 = BigInt(20), r2 = BigInt(40), o3 = BigInt(80), s = Uo.p, f7 = t * t % s * t % s, c4 = pt(f7, Oo, s) * f7 % s, u3 = pt(c4, xc, s) * t % s, a2 = pt(u3, Ec, s) * u3 % s, l4 = pt(a2, e, s) * a2 % s, h4 = pt(l4, n2, s) * l4 % s, g2 = pt(h4, r2, s) * h4 % s, m3 = pt(g2, o3, s) * g2 % s, b3 = pt(m3, o3, s) * g2 % s, v4 = pt(b3, e, s) * a2 % s;
  return { pow_p_5_8: pt(v4, Oo, s) * t % s, b2: f7 };
}
function Ac(t) {
  return t[0] &= 248, t[31] &= 127, t[31] |= 64, t;
}
var Tn = (() => {
  const t = Uo.p;
  return wc({ P: t, type: "x25519", powPminus2: (e) => {
    const { pow_p_5_8: n2, b2: r2 } = Ic(e);
    return lt(pt(n2, vc, t) * r2, t);
  }, adjustScalarBytes: Ac });
})();
function _o(t) {
  t.lowS !== void 0 && Re("lowS", t.lowS), t.prehash !== void 0 && Re("prehash", t.prehash);
}
var Sc = class extends Error {
  constructor(e = "") {
    super(e);
  }
};
var vt = { Err: Sc, _tlv: { encode: (t, e) => {
  const { Err: n2 } = vt;
  if (t < 0 || t > 256) throw new n2("tlv.encode: wrong tag");
  if (e.length & 1) throw new n2("tlv.encode: unpadded data");
  const r2 = e.length / 2, o3 = $e(r2);
  if (o3.length / 2 & 128) throw new n2("tlv.encode: long form length too big");
  const s = r2 > 127 ? $e(o3.length / 2 | 128) : "";
  return $e(t) + s + o3 + e;
}, decode(t, e) {
  const { Err: n2 } = vt;
  let r2 = 0;
  if (t < 0 || t > 256) throw new n2("tlv.encode: wrong tag");
  if (e.length < 2 || e[r2++] !== t) throw new n2("tlv.decode: wrong tlv");
  const o3 = e[r2++], s = !!(o3 & 128);
  let i3 = 0;
  if (!s) i3 = o3;
  else {
    const c4 = o3 & 127;
    if (!c4) throw new n2("tlv.decode(long): indefinite length not supported");
    if (c4 > 4) throw new n2("tlv.decode(long): byte length is too big");
    const u3 = e.subarray(r2, r2 + c4);
    if (u3.length !== c4) throw new n2("tlv.decode: length bytes not complete");
    if (u3[0] === 0) throw new n2("tlv.decode(long): zero leftmost byte");
    for (const a2 of u3) i3 = i3 << 8 | a2;
    if (r2 += c4, i3 < 128) throw new n2("tlv.decode(long): not minimal encoding");
  }
  const f7 = e.subarray(r2, r2 + i3);
  if (f7.length !== i3) throw new n2("tlv.decode: wrong value length");
  return { v: f7, l: e.subarray(r2 + i3) };
} }, _int: { encode(t) {
  const { Err: e } = vt;
  if (t < he) throw new e("integer: negative integers are not allowed");
  let n2 = $e(t);
  if (Number.parseInt(n2[0], 16) & 8 && (n2 = "00" + n2), n2.length & 1) throw new e("unexpected DER parsing assertion: unpadded hex");
  return n2;
}, decode(t) {
  const { Err: e } = vt;
  if (t[0] & 128) throw new e("invalid signature integer: negative");
  if (t[0] === 0 && !(t[1] & 128)) throw new e("invalid signature integer: unnecessary leading zero");
  return Ce(t);
} }, toSig(t) {
  const { Err: e, _int: n2, _tlv: r2 } = vt, o3 = rt("signature", t), { v: s, l: i3 } = r2.decode(48, o3);
  if (i3.length) throw new e("invalid signature: left bytes after parsing");
  const { v: f7, l: c4 } = r2.decode(2, s), { v: u3, l: a2 } = r2.decode(2, c4);
  if (a2.length) throw new e("invalid signature: left bytes after parsing");
  return { r: n2.decode(f7), s: n2.decode(u3) };
}, hexFromSig(t) {
  const { _tlv: e, _int: n2 } = vt, r2 = e.encode(2, n2.encode(t.r)), o3 = e.encode(2, n2.encode(t.s)), s = r2 + o3;
  return e.encode(48, s);
} };
var he = BigInt(0);
var pe = BigInt(1);
var Nc = BigInt(2);
var He = BigInt(3);
var Oc = BigInt(4);
function Uc(t, e, n2) {
  function r2(o3) {
    const s = t.sqr(o3), i3 = t.mul(s, o3);
    return t.add(t.add(i3, t.mul(o3, e)), n2);
  }
  return r2;
}
function To(t, e, n2) {
  const { BYTES: r2 } = t;
  function o3(s) {
    let i3;
    if (typeof s == "bigint") i3 = s;
    else {
      let f7 = rt("private key", s);
      if (e) {
        if (!e.includes(f7.length * 2)) throw new Error("invalid private key");
        const c4 = new Uint8Array(r2);
        c4.set(f7, c4.length - f7.length), f7 = c4;
      }
      try {
        i3 = t.fromBytes(f7);
      } catch {
        throw new Error(`invalid private key: expected ui8a of size ${r2}, got ${typeof s}`);
      }
    }
    if (n2 && (i3 = t.create(i3)), !t.isValidNot0(i3)) throw new Error("invalid private key: out of range [1..N-1]");
    return i3;
  }
  return o3;
}
function _c(t, e = {}) {
  const { Fp: n2, Fn: r2 } = yc("weierstrass", t, e), { h: o3, n: s } = t;
  ke(e, {}, { allowInfinityPoint: "boolean", clearCofactor: "function", isTorsionFree: "function", fromBytes: "function", toBytes: "function", endo: "object", wrapPrivateKey: "boolean" });
  const { endo: i3 } = e;
  if (i3 && (!n2.is0(t.a) || typeof i3.beta != "bigint" || typeof i3.splitScalar != "function")) throw new Error('invalid endo: expected "beta": bigint and "splitScalar": function');
  function f7() {
    if (!n2.isOdd) throw new Error("compression is not supported: Field does not have .isOdd()");
  }
  function c4(R4, d3, w3) {
    const { x: p4, y: y5 } = d3.toAffine(), x3 = n2.toBytes(p4);
    if (Re("isCompressed", w3), w3) {
      f7();
      const B3 = !n2.isOdd(y5);
      return Ht(Ro(B3), x3);
    } else return Ht(Uint8Array.of(4), x3, n2.toBytes(y5));
  }
  function u3(R4) {
    at(R4);
    const d3 = n2.BYTES, w3 = d3 + 1, p4 = 2 * d3 + 1, y5 = R4.length, x3 = R4[0], B3 = R4.subarray(1);
    if (y5 === w3 && (x3 === 2 || x3 === 3)) {
      const E5 = n2.fromBytes(B3);
      if (!n2.isValid(E5)) throw new Error("bad point: is not on curve, wrong x");
      const I4 = h4(E5);
      let S4;
      try {
        S4 = n2.sqrt(I4);
      } catch (T4) {
        const U4 = T4 instanceof Error ? ": " + T4.message : "";
        throw new Error("bad point: is not on curve, sqrt error" + U4);
      }
      f7();
      const O5 = n2.isOdd(S4);
      return (x3 & 1) === 1 !== O5 && (S4 = n2.neg(S4)), { x: E5, y: S4 };
    } else if (y5 === p4 && x3 === 4) {
      const E5 = n2.fromBytes(B3.subarray(d3 * 0, d3 * 1)), I4 = n2.fromBytes(B3.subarray(d3 * 1, d3 * 2));
      if (!g2(E5, I4)) throw new Error("bad point: is not on curve");
      return { x: E5, y: I4 };
    } else throw new Error(`bad point: got length ${y5}, expected compressed=${w3} or uncompressed=${p4}`);
  }
  const a2 = e.toBytes || c4, l4 = e.fromBytes || u3, h4 = Uc(n2, t.a, t.b);
  function g2(R4, d3) {
    const w3 = n2.sqr(d3), p4 = h4(R4);
    return n2.eql(w3, p4);
  }
  if (!g2(t.Gx, t.Gy)) throw new Error("bad curve params: generator point");
  const m3 = n2.mul(n2.pow(t.a, He), Oc), b3 = n2.mul(n2.sqr(t.b), BigInt(27));
  if (n2.is0(n2.add(m3, b3))) throw new Error("bad curve params: a or b");
  function v4(R4, d3, w3 = false) {
    if (!n2.isValid(d3) || w3 && n2.is0(d3)) throw new Error(`bad point coordinate ${R4}`);
    return d3;
  }
  function L4(R4) {
    if (!(R4 instanceof _)) throw new Error("ProjectivePoint expected");
  }
  const V4 = ho((R4, d3) => {
    const { px: w3, py: p4, pz: y5 } = R4;
    if (n2.eql(y5, n2.ONE)) return { x: w3, y: p4 };
    const x3 = R4.is0();
    d3 == null && (d3 = x3 ? n2.ONE : n2.inv(y5));
    const B3 = n2.mul(w3, d3), E5 = n2.mul(p4, d3), I4 = n2.mul(y5, d3);
    if (x3) return { x: n2.ZERO, y: n2.ZERO };
    if (!n2.eql(I4, n2.ONE)) throw new Error("invZ was invalid");
    return { x: B3, y: E5 };
  }), C4 = ho((R4) => {
    if (R4.is0()) {
      if (e.allowInfinityPoint && !n2.is0(R4.py)) return;
      throw new Error("bad point: ZERO");
    }
    const { x: d3, y: w3 } = R4.toAffine();
    if (!n2.isValid(d3) || !n2.isValid(w3)) throw new Error("bad point: x or y not field elements");
    if (!g2(d3, w3)) throw new Error("bad point: equation left != right");
    if (!R4.isTorsionFree()) throw new Error("bad point: not in prime-order subgroup");
    return true;
  });
  function H2(R4, d3, w3, p4, y5) {
    return w3 = new _(n2.mul(w3.px, R4), w3.py, w3.pz), d3 = le(p4, d3), w3 = le(y5, w3), d3.add(w3);
  }
  class _ {
    constructor(d3, w3, p4) {
      this.px = v4("x", d3), this.py = v4("y", w3, true), this.pz = v4("z", p4), Object.freeze(this);
    }
    static fromAffine(d3) {
      const { x: w3, y: p4 } = d3 || {};
      if (!d3 || !n2.isValid(w3) || !n2.isValid(p4)) throw new Error("invalid affine point");
      if (d3 instanceof _) throw new Error("projective point not allowed");
      return n2.is0(w3) && n2.is0(p4) ? _.ZERO : new _(w3, p4, n2.ONE);
    }
    get x() {
      return this.toAffine().x;
    }
    get y() {
      return this.toAffine().y;
    }
    static normalizeZ(d3) {
      return lc(_, "pz", d3);
    }
    static fromBytes(d3) {
      return at(d3), _.fromHex(d3);
    }
    static fromHex(d3) {
      const w3 = _.fromAffine(l4(rt("pointHex", d3)));
      return w3.assertValidity(), w3;
    }
    static fromPrivateKey(d3) {
      const w3 = To(r2, e.allowedPrivateKeyLengths, e.wrapPrivateKey);
      return _.BASE.multiply(w3(d3));
    }
    static msm(d3, w3) {
      return bc(_, r2, d3, w3);
    }
    precompute(d3 = 8, w3 = true) {
      return P4.setWindowSize(this, d3), w3 || this.multiply(He), this;
    }
    _setWindowSize(d3) {
      this.precompute(d3);
    }
    assertValidity() {
      C4(this);
    }
    hasEvenY() {
      const { y: d3 } = this.toAffine();
      if (!n2.isOdd) throw new Error("Field doesn't support isOdd");
      return !n2.isOdd(d3);
    }
    equals(d3) {
      L4(d3);
      const { px: w3, py: p4, pz: y5 } = this, { px: x3, py: B3, pz: E5 } = d3, I4 = n2.eql(n2.mul(w3, E5), n2.mul(x3, y5)), S4 = n2.eql(n2.mul(p4, E5), n2.mul(B3, y5));
      return I4 && S4;
    }
    negate() {
      return new _(this.px, n2.neg(this.py), this.pz);
    }
    double() {
      const { a: d3, b: w3 } = t, p4 = n2.mul(w3, He), { px: y5, py: x3, pz: B3 } = this;
      let E5 = n2.ZERO, I4 = n2.ZERO, S4 = n2.ZERO, O5 = n2.mul(y5, y5), A5 = n2.mul(x3, x3), T4 = n2.mul(B3, B3), U4 = n2.mul(y5, x3);
      return U4 = n2.add(U4, U4), S4 = n2.mul(y5, B3), S4 = n2.add(S4, S4), E5 = n2.mul(d3, S4), I4 = n2.mul(p4, T4), I4 = n2.add(E5, I4), E5 = n2.sub(A5, I4), I4 = n2.add(A5, I4), I4 = n2.mul(E5, I4), E5 = n2.mul(U4, E5), S4 = n2.mul(p4, S4), T4 = n2.mul(d3, T4), U4 = n2.sub(O5, T4), U4 = n2.mul(d3, U4), U4 = n2.add(U4, S4), S4 = n2.add(O5, O5), O5 = n2.add(S4, O5), O5 = n2.add(O5, T4), O5 = n2.mul(O5, U4), I4 = n2.add(I4, O5), T4 = n2.mul(x3, B3), T4 = n2.add(T4, T4), O5 = n2.mul(T4, U4), E5 = n2.sub(E5, O5), S4 = n2.mul(T4, A5), S4 = n2.add(S4, S4), S4 = n2.add(S4, S4), new _(E5, I4, S4);
    }
    add(d3) {
      L4(d3);
      const { px: w3, py: p4, pz: y5 } = this, { px: x3, py: B3, pz: E5 } = d3;
      let I4 = n2.ZERO, S4 = n2.ZERO, O5 = n2.ZERO;
      const A5 = t.a, T4 = n2.mul(t.b, He);
      let U4 = n2.mul(w3, x3), $4 = n2.mul(p4, B3), D2 = n2.mul(y5, E5), q2 = n2.add(w3, p4), j3 = n2.add(x3, B3);
      q2 = n2.mul(q2, j3), j3 = n2.add(U4, $4), q2 = n2.sub(q2, j3), j3 = n2.add(w3, y5);
      let K3 = n2.add(x3, E5);
      return j3 = n2.mul(j3, K3), K3 = n2.add(U4, D2), j3 = n2.sub(j3, K3), K3 = n2.add(p4, y5), I4 = n2.add(B3, E5), K3 = n2.mul(K3, I4), I4 = n2.add($4, D2), K3 = n2.sub(K3, I4), O5 = n2.mul(A5, j3), I4 = n2.mul(T4, D2), O5 = n2.add(I4, O5), I4 = n2.sub($4, O5), O5 = n2.add($4, O5), S4 = n2.mul(I4, O5), $4 = n2.add(U4, U4), $4 = n2.add($4, U4), D2 = n2.mul(A5, D2), j3 = n2.mul(T4, j3), $4 = n2.add($4, D2), D2 = n2.sub(U4, D2), D2 = n2.mul(A5, D2), j3 = n2.add(j3, D2), U4 = n2.mul($4, j3), S4 = n2.add(S4, U4), U4 = n2.mul(K3, j3), I4 = n2.mul(q2, I4), I4 = n2.sub(I4, U4), U4 = n2.mul(q2, $4), O5 = n2.mul(K3, O5), O5 = n2.add(O5, U4), new _(I4, S4, O5);
    }
    subtract(d3) {
      return this.add(d3.negate());
    }
    is0() {
      return this.equals(_.ZERO);
    }
    multiply(d3) {
      const { endo: w3 } = e;
      if (!r2.isValidNot0(d3)) throw new Error("invalid scalar: out of range");
      let p4, y5;
      const x3 = (B3) => P4.wNAFCached(this, B3, _.normalizeZ);
      if (w3) {
        const { k1neg: B3, k1: E5, k2neg: I4, k2: S4 } = w3.splitScalar(d3), { p: O5, f: A5 } = x3(E5), { p: T4, f: U4 } = x3(S4);
        y5 = A5.add(U4), p4 = H2(w3.beta, O5, T4, B3, I4);
      } else {
        const { p: B3, f: E5 } = x3(d3);
        p4 = B3, y5 = E5;
      }
      return _.normalizeZ([p4, y5])[0];
    }
    multiplyUnsafe(d3) {
      const { endo: w3 } = e, p4 = this;
      if (!r2.isValid(d3)) throw new Error("invalid scalar: out of range");
      if (d3 === he || p4.is0()) return _.ZERO;
      if (d3 === pe) return p4;
      if (P4.hasPrecomputes(this)) return this.multiply(d3);
      if (w3) {
        const { k1neg: y5, k1: x3, k2neg: B3, k2: E5 } = w3.splitScalar(d3), { p1: I4, p2: S4 } = gc(_, p4, x3, E5);
        return H2(w3.beta, I4, S4, y5, B3);
      } else return P4.wNAFCachedUnsafe(p4, d3);
    }
    multiplyAndAddUnsafe(d3, w3, p4) {
      const y5 = this.multiplyUnsafe(w3).add(d3.multiplyUnsafe(p4));
      return y5.is0() ? void 0 : y5;
    }
    toAffine(d3) {
      return V4(this, d3);
    }
    isTorsionFree() {
      const { isTorsionFree: d3 } = e;
      return o3 === pe ? true : d3 ? d3(_, this) : P4.wNAFCachedUnsafe(this, s).is0();
    }
    clearCofactor() {
      const { clearCofactor: d3 } = e;
      return o3 === pe ? this : d3 ? d3(_, this) : this.multiplyUnsafe(o3);
    }
    toBytes(d3 = true) {
      return Re("isCompressed", d3), this.assertValidity(), a2(_, this, d3);
    }
    toRawBytes(d3 = true) {
      return this.toBytes(d3);
    }
    toHex(d3 = true) {
      return ce(this.toBytes(d3));
    }
    toString() {
      return `<Point ${this.is0() ? "ZERO" : this.toHex()}>`;
    }
  }
  _.BASE = new _(t.Gx, t.Gy, n2.ONE), _.ZERO = new _(n2.ZERO, n2.ONE, n2.ZERO), _.Fp = n2, _.Fn = r2;
  const k4 = r2.BITS, P4 = pc(_, e.endo ? Math.ceil(k4 / 2) : k4);
  return _;
}
function Ro(t) {
  return Uint8Array.of(t ? 2 : 3);
}
function Tc(t, e, n2 = {}) {
  ke(e, { hash: "function" }, { hmac: "function", lowS: "boolean", randomBytes: "function", bits2int: "function", bits2int_modN: "function" });
  const r2 = e.randomBytes || Zt, o3 = e.hmac || ((p4, ...y5) => _e(e.hash, p4, Ht(...y5))), { Fp: s, Fn: i3 } = t, { ORDER: f7, BITS: c4 } = i3;
  function u3(p4) {
    const y5 = f7 >> pe;
    return p4 > y5;
  }
  function a2(p4) {
    return u3(p4) ? i3.neg(p4) : p4;
  }
  function l4(p4, y5) {
    if (!i3.isValidNot0(y5)) throw new Error(`invalid signature ${p4}: out of range 1..CURVE.n`);
  }
  class h4 {
    constructor(y5, x3, B3) {
      l4("r", y5), l4("s", x3), this.r = y5, this.s = x3, B3 != null && (this.recovery = B3), Object.freeze(this);
    }
    static fromCompact(y5) {
      const x3 = i3.BYTES, B3 = rt("compactSignature", y5, x3 * 2);
      return new h4(i3.fromBytes(B3.subarray(0, x3)), i3.fromBytes(B3.subarray(x3, x3 * 2)));
    }
    static fromDER(y5) {
      const { r: x3, s: B3 } = vt.toSig(rt("DER", y5));
      return new h4(x3, B3);
    }
    assertValidity() {
    }
    addRecoveryBit(y5) {
      return new h4(this.r, this.s, y5);
    }
    recoverPublicKey(y5) {
      const x3 = s.ORDER, { r: B3, s: E5, recovery: I4 } = this;
      if (I4 == null || ![0, 1, 2, 3].includes(I4)) throw new Error("recovery id invalid");
      if (f7 * Nc < x3 && I4 > 1) throw new Error("recovery id is ambiguous for h>1 curve");
      const O5 = I4 === 2 || I4 === 3 ? B3 + f7 : B3;
      if (!s.isValid(O5)) throw new Error("recovery id 2 or 3 invalid");
      const A5 = s.toBytes(O5), T4 = t.fromHex(Ht(Ro((I4 & 1) === 0), A5)), U4 = i3.inv(O5), $4 = C4(rt("msgHash", y5)), D2 = i3.create(-$4 * U4), q2 = i3.create(E5 * U4), j3 = t.BASE.multiplyUnsafe(D2).add(T4.multiplyUnsafe(q2));
      if (j3.is0()) throw new Error("point at infinify");
      return j3.assertValidity(), j3;
    }
    hasHighS() {
      return u3(this.s);
    }
    normalizeS() {
      return this.hasHighS() ? new h4(this.r, i3.neg(this.s), this.recovery) : this;
    }
    toBytes(y5) {
      if (y5 === "compact") return Ht(i3.toBytes(this.r), i3.toBytes(this.s));
      if (y5 === "der") return fn(vt.hexFromSig(this));
      throw new Error("invalid format");
    }
    toDERRawBytes() {
      return this.toBytes("der");
    }
    toDERHex() {
      return ce(this.toBytes("der"));
    }
    toCompactRawBytes() {
      return this.toBytes("compact");
    }
    toCompactHex() {
      return ce(this.toBytes("compact"));
    }
  }
  const g2 = To(i3, n2.allowedPrivateKeyLengths, n2.wrapPrivateKey), m3 = { isValidPrivateKey(p4) {
    try {
      return g2(p4), true;
    } catch {
      return false;
    }
  }, normPrivateKeyToScalar: g2, randomPrivateKey: () => {
    const p4 = f7;
    return uc(r2(Eo(p4)), p4);
  }, precompute(p4 = 8, y5 = t.BASE) {
    return y5.precompute(p4, false);
  } };
  function b3(p4, y5 = true) {
    return t.fromPrivateKey(p4).toBytes(y5);
  }
  function v4(p4) {
    if (typeof p4 == "bigint") return false;
    if (p4 instanceof t) return true;
    const x3 = rt("key", p4).length, B3 = s.BYTES, E5 = B3 + 1, I4 = 2 * B3 + 1;
    if (!(n2.allowedPrivateKeyLengths || i3.BYTES === E5)) return x3 === E5 || x3 === I4;
  }
  function L4(p4, y5, x3 = true) {
    if (v4(p4) === true) throw new Error("first arg must be private key");
    if (v4(y5) === false) throw new Error("second arg must be public key");
    return t.fromHex(y5).multiply(g2(p4)).toBytes(x3);
  }
  const V4 = e.bits2int || function(p4) {
    if (p4.length > 8192) throw new Error("input is too large");
    const y5 = Ce(p4), x3 = p4.length * 8 - c4;
    return x3 > 0 ? y5 >> BigInt(x3) : y5;
  }, C4 = e.bits2int_modN || function(p4) {
    return i3.create(V4(p4));
  }, H2 = je(c4);
  function _(p4) {
    return Nn("num < 2^" + c4, p4, he, H2), i3.toBytes(p4);
  }
  function k4(p4, y5, x3 = P4) {
    if (["recovered", "canonical"].some((q2) => q2 in x3)) throw new Error("sign() legacy options not supported");
    const { hash: B3 } = e;
    let { lowS: E5, prehash: I4, extraEntropy: S4 } = x3;
    E5 == null && (E5 = true), p4 = rt("msgHash", p4), _o(x3), I4 && (p4 = rt("prehashed msgHash", B3(p4)));
    const O5 = C4(p4), A5 = g2(y5), T4 = [_(A5), _(O5)];
    if (S4 != null && S4 !== false) {
      const q2 = S4 === true ? r2(s.BYTES) : S4;
      T4.push(rt("extraEntropy", q2));
    }
    const U4 = Ht(...T4), $4 = O5;
    function D2(q2) {
      const j3 = V4(q2);
      if (!i3.isValidNot0(j3)) return;
      const K3 = i3.inv(j3), et = t.BASE.multiply(j3).toAffine(), Z3 = i3.create(et.x);
      if (Z3 === he) return;
      const z2 = i3.create(K3 * i3.create($4 + Z3 * A5));
      if (z2 === he) return;
      let Ft2 = (et.x === Z3 ? 0 : 2) | Number(et.y & pe), yt3 = z2;
      return E5 && u3(z2) && (yt3 = a2(z2), Ft2 ^= 1), new h4(Z3, yt3, Ft2);
    }
    return { seed: U4, k2sig: D2 };
  }
  const P4 = { lowS: e.lowS, prehash: false }, R4 = { lowS: e.lowS, prehash: false };
  function d3(p4, y5, x3 = P4) {
    const { seed: B3, k2sig: E5 } = k4(p4, y5, x3);
    return ec(e.hash.outputLen, i3.BYTES, o3)(B3, E5);
  }
  t.BASE.precompute(8);
  function w3(p4, y5, x3, B3 = R4) {
    const E5 = p4;
    y5 = rt("msgHash", y5), x3 = rt("publicKey", x3), _o(B3);
    const { lowS: I4, prehash: S4, format: O5 } = B3;
    if ("strict" in B3) throw new Error("options.strict was renamed to lowS");
    if (O5 !== void 0 && !["compact", "der", "js"].includes(O5)) throw new Error('format must be "compact", "der" or "js"');
    const A5 = typeof E5 == "string" || nn(E5), T4 = !A5 && !O5 && typeof E5 == "object" && E5 !== null && typeof E5.r == "bigint" && typeof E5.s == "bigint";
    if (!A5 && !T4) throw new Error("invalid signature, expected Uint8Array, hex string or Signature instance");
    let U4, $4;
    try {
      if (T4) if (O5 === void 0 || O5 === "js") U4 = new h4(E5.r, E5.s);
      else throw new Error("invalid format");
      if (A5) {
        try {
          O5 !== "compact" && (U4 = h4.fromDER(E5));
        } catch (yt3) {
          if (!(yt3 instanceof vt.Err)) throw yt3;
        }
        !U4 && O5 !== "der" && (U4 = h4.fromCompact(E5));
      }
      $4 = t.fromHex(x3);
    } catch {
      return false;
    }
    if (!U4 || I4 && U4.hasHighS()) return false;
    S4 && (y5 = e.hash(y5));
    const { r: D2, s: q2 } = U4, j3 = C4(y5), K3 = i3.inv(q2), et = i3.create(j3 * K3), Z3 = i3.create(D2 * K3), z2 = t.BASE.multiplyUnsafe(et).add($4.multiplyUnsafe(Z3));
    return z2.is0() ? false : i3.create(z2.x) === D2;
  }
  return Object.freeze({ getPublicKey: b3, getSharedSecret: L4, sign: d3, verify: w3, utils: m3, Point: t, Signature: h4 });
}
function Rc(t) {
  const e = { a: t.a, b: t.b, p: t.Fp.ORDER, n: t.n, h: t.h, Gx: t.Gx, Gy: t.Gy }, n2 = t.Fp, r2 = Yt(e.n, t.nBitLength), o3 = { Fp: n2, Fn: r2, allowedPrivateKeyLengths: t.allowedPrivateKeyLengths, allowInfinityPoint: t.allowInfinityPoint, endo: t.endo, wrapPrivateKey: t.wrapPrivateKey, isTorsionFree: t.isTorsionFree, clearCofactor: t.clearCofactor, fromBytes: t.fromBytes, toBytes: t.toBytes };
  return { CURVE: e, curveOpts: o3 };
}
function $c(t) {
  const { CURVE: e, curveOpts: n2 } = Rc(t), r2 = { hash: t.hash, hmac: t.hmac, randomBytes: t.randomBytes, lowS: t.lowS, bits2int: t.bits2int, bits2int_modN: t.bits2int_modN };
  return { CURVE: e, curveOpts: n2, ecdsaOpts: r2 };
}
function Cc(t, e) {
  return Object.assign({}, e, { ProjectivePoint: e.Point, CURVE: t });
}
function Lc(t) {
  const { CURVE: e, curveOpts: n2, ecdsaOpts: r2 } = $c(t), o3 = _c(e, n2), s = Tc(o3, r2, n2);
  return Cc(t, s);
}
function Rn(t, e) {
  const n2 = (r2) => Lc({ ...t, hash: r2 });
  return { ...n2(e), create: n2 };
}
var $o = { p: BigInt("0xffffffff00000001000000000000000000000000ffffffffffffffffffffffff"), n: BigInt("0xffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551"), h: BigInt(1), a: BigInt("0xffffffff00000001000000000000000000000000fffffffffffffffffffffffc"), b: BigInt("0x5ac635d8aa3a93e7b3ebbd55769886bc651d06b0cc53b0f63bce3c3e27d2604b"), Gx: BigInt("0x6b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c296"), Gy: BigInt("0x4fe342e2fe1a7f9b8ee7eb4a7c0f9e162bce33576b315ececbb6406837bf51f5") };
var Co = { p: BigInt("0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffeffffffff0000000000000000ffffffff"), n: BigInt("0xffffffffffffffffffffffffffffffffffffffffffffffffc7634d81f4372ddf581a0db248b0a77aecec196accc52973"), h: BigInt(1), a: BigInt("0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffeffffffff0000000000000000fffffffc"), b: BigInt("0xb3312fa7e23ee7e4988e056be3f82d19181d9c6efe8141120314088f5013875ac656398d8a2ed19d2a85c8edd3ec2aef"), Gx: BigInt("0xaa87ca22be8b05378eb1c71ef320ad746e1d3b628ba79b9859f741e082542a385502f25dbf55296c3a545e3872760ab7"), Gy: BigInt("0x3617de4a96262c6f5d9e98bf9292dc29f8f41dbd289a147ce9da3113b5f0b8c00a60b1ce1d7e819d7a431d7c90ea0e5f") };
var Lo = { p: BigInt("0x1ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"), n: BigInt("0x01fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa51868783bf2f966b7fcc0148f709a5d03bb5c9b8899c47aebb6fb71e91386409"), h: BigInt(1), a: BigInt("0x1fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc"), b: BigInt("0x0051953eb9618e1c9a1f929a21a0b68540eea2da725b99b315f3b8b489918ef109e156193951ec7e937b1652c0bd3bb1bf073573df883d2c34f1ef451fd46b503f00"), Gx: BigInt("0x00c6858e06b70404e9cd9e3ecb662395b4429c648139053fb521f828af606b4d3dbaa14b5e77efe75928fe1dc127a2ffa8de3348b3c1856a429bf97e7e31c2e5bd66"), Gy: BigInt("0x011839296a789a3bc0045c8a5fb42c7d1bd998f54449579b446817afbd17273e662c97ee72995ef42640c550b9013fad0761353c7086a272c24088be94769fd16650") };
var jc = Yt($o.p);
var kc = Yt(Co.p);
var Pc = Yt(Lo.p);
var Hc = Rn({ ...$o, Fp: jc, lowS: false }, Ae);
Rn({ ...Co, Fp: kc, lowS: false }, Yi), Rn({ ...Lo, Fp: Pc, lowS: false, allowedPrivateKeyLengths: [130, 131, 132] }, Wi);
var Dc = Hc;
var $n = "base10";
var tt = "base16";
var Qt = "base64pad";
var De = "base64url";
var te = "utf8";
var Cn = 0;
var ee = 1;
var ge = 2;
var Mc = 0;
var jo = 1;
var be = 12;
var Ln = 32;
function Vc() {
  const t = Tn.utils.randomPrivateKey(), e = Tn.getPublicKey(t);
  return { privateKey: toString2(t, tt), publicKey: toString2(e, tt) };
}
function qc() {
  const t = Zt(Ln);
  return toString2(t, tt);
}
function Kc(t, e) {
  const n2 = Tn.getSharedSecret(fromString3(t, tt), fromString3(e, tt)), r2 = Jf(Te, n2, void 0, void 0, Ln);
  return toString2(r2, tt);
}
function Fc(t) {
  const e = Te(fromString3(t, tt));
  return toString2(e, tt);
}
function zc(t) {
  const e = Te(fromString3(t, te));
  return toString2(e, tt);
}
function jn(t) {
  return fromString3(`${t}`, $n);
}
function Vt(t) {
  return Number(toString2(t, $n));
}
function ko(t) {
  return t.replace(/\+/g, "-").replace(/\//g, "_").replace(/=/g, "");
}
function Po2(t) {
  const e = t.replace(/-/g, "+").replace(/_/g, "/"), n2 = (4 - e.length % 4) % 4;
  return e + "=".repeat(n2);
}
function Gc(t) {
  const e = jn(typeof t.type < "u" ? t.type : Cn);
  if (Vt(e) === ee && typeof t.senderPublicKey > "u") throw new Error("Missing sender public key for type 1 envelope");
  const n2 = typeof t.senderPublicKey < "u" ? fromString3(t.senderPublicKey, tt) : void 0, r2 = typeof t.iv < "u" ? fromString3(t.iv, tt) : Zt(be), o3 = fromString3(t.symKey, tt), s = co(o3, r2).encrypt(fromString3(t.message, te)), i3 = kn({ type: e, sealed: s, iv: r2, senderPublicKey: n2 });
  return t.encoding === De ? ko(i3) : i3;
}
function Zc(t) {
  const e = fromString3(t.symKey, tt), { sealed: n2, iv: r2 } = Me({ encoded: t.encoded, encoding: t.encoding }), o3 = co(e, r2).decrypt(n2);
  if (o3 === null) throw new Error("Failed to decrypt");
  return toString2(o3, te);
}
function Wc(t, e) {
  const n2 = jn(ge), r2 = Zt(be), o3 = fromString3(t, te), s = kn({ type: n2, sealed: o3, iv: r2 });
  return e === De ? ko(s) : s;
}
function Yc(t, e) {
  const { sealed: n2 } = Me({ encoded: t, encoding: e });
  return toString2(n2, te);
}
function kn(t) {
  if (Vt(t.type) === ge) return toString2(concat3([t.type, t.sealed]), Qt);
  if (Vt(t.type) === ee) {
    if (typeof t.senderPublicKey > "u") throw new Error("Missing sender public key for type 1 envelope");
    return toString2(concat3([t.type, t.senderPublicKey, t.iv, t.sealed]), Qt);
  }
  return toString2(concat3([t.type, t.iv, t.sealed]), Qt);
}
function Me(t) {
  const e = (t.encoding || Qt) === De ? Po2(t.encoded) : t.encoded, n2 = fromString3(e, Qt), r2 = n2.slice(Mc, jo), o3 = jo;
  if (Vt(r2) === ee) {
    const c4 = o3 + Ln, u3 = c4 + be, a2 = n2.slice(o3, c4), l4 = n2.slice(c4, u3), h4 = n2.slice(u3);
    return { type: r2, sealed: h4, iv: l4, senderPublicKey: a2 };
  }
  if (Vt(r2) === ge) {
    const c4 = n2.slice(o3), u3 = Zt(be);
    return { type: r2, sealed: c4, iv: u3 };
  }
  const s = o3 + be, i3 = n2.slice(o3, s), f7 = n2.slice(s);
  return { type: r2, sealed: f7, iv: i3 };
}
function Xc(t, e) {
  const n2 = Me({ encoded: t, encoding: e == null ? void 0 : e.encoding });
  return Ho({ type: Vt(n2.type), senderPublicKey: typeof n2.senderPublicKey < "u" ? toString2(n2.senderPublicKey, tt) : void 0, receiverPublicKey: e == null ? void 0 : e.receiverPublicKey });
}
function Ho(t) {
  const e = (t == null ? void 0 : t.type) || Cn;
  if (e === ee) {
    if (typeof (t == null ? void 0 : t.senderPublicKey) > "u") throw new Error("missing sender public key");
    if (typeof (t == null ? void 0 : t.receiverPublicKey) > "u") throw new Error("missing receiver public key");
  }
  return { type: e, senderPublicKey: t == null ? void 0 : t.senderPublicKey, receiverPublicKey: t == null ? void 0 : t.receiverPublicKey };
}
function Jc(t) {
  return t.type === ee && typeof t.senderPublicKey == "string" && typeof t.receiverPublicKey == "string";
}
function Qc(t) {
  return t.type === ge;
}
function Do(t) {
  const e = Buffer.from(t.x, "base64"), n2 = Buffer.from(t.y, "base64");
  return concat3([new Uint8Array([4]), e, n2]);
}
function ta(t, e) {
  const [n2, r2, o3] = t.split("."), s = Buffer.from(Po2(o3), "base64");
  if (s.length !== 64) throw new Error("Invalid signature length");
  const i3 = s.slice(0, 32), f7 = s.slice(32, 64), c4 = `${n2}.${r2}`, u3 = Te(c4), a2 = Do(e);
  if (!Dc.verify(concat3([i3, f7]), u3, a2)) throw new Error("Invalid signature");
  return sn(t).payload;
}
var Mo = "irn";
function ea(t) {
  return (t == null ? void 0 : t.relay) || { protocol: Mo };
}
function na(t) {
  const e = C[t];
  if (typeof e > "u") throw new Error(`Relay Protocol not supported: ${t}`);
  return e;
}
function Vo(t, e = "-") {
  const n2 = {}, r2 = "relay" + e;
  return Object.keys(t).forEach((o3) => {
    if (o3.startsWith(r2)) {
      const s = o3.replace(r2, ""), i3 = t[o3];
      n2[s] = i3;
    }
  }), n2;
}
function ra(t) {
  if (!t.includes("wc:")) {
    const u3 = Qe2(t);
    u3 != null && u3.includes("wc:") && (t = u3);
  }
  t = t.includes("wc://") ? t.replace("wc://", "") : t, t = t.includes("wc:") ? t.replace("wc:", "") : t;
  const e = t.indexOf(":"), n2 = t.indexOf("?") !== -1 ? t.indexOf("?") : void 0, r2 = t.substring(0, e), o3 = t.substring(e + 1, n2).split("@"), s = typeof n2 < "u" ? t.substring(n2) : "", i3 = new URLSearchParams(s), f7 = {};
  i3.forEach((u3, a2) => {
    f7[a2] = u3;
  });
  const c4 = typeof f7.methods == "string" ? f7.methods.split(",") : void 0;
  return { protocol: r2, topic: qo(o3[0]), version: parseInt(o3[1], 10), symKey: f7.symKey, relay: Vo(f7), methods: c4, expiryTimestamp: f7.expiryTimestamp ? parseInt(f7.expiryTimestamp, 10) : void 0 };
}
function qo(t) {
  return t.startsWith("//") ? t.substring(2) : t;
}
function Ko(t, e = "-") {
  const n2 = "relay", r2 = {};
  return Object.keys(t).forEach((o3) => {
    const s = o3, i3 = n2 + e + s;
    t[s] && (r2[i3] = t[s]);
  }), r2;
}
function oa(t) {
  const e = new URLSearchParams(), n2 = Ko(t.relay);
  Object.keys(n2).sort().forEach((o3) => {
    e.set(o3, n2[o3]);
  }), e.set("symKey", t.symKey), t.expiryTimestamp && e.set("expiryTimestamp", t.expiryTimestamp.toString()), t.methods && e.set("methods", t.methods.join(","));
  const r2 = e.toString();
  return `${t.protocol}:${t.topic}@${t.version}?${r2}`;
}
function sa(t, e, n2) {
  return `${t}?wc_ev=${n2}&topic=${e}`;
}
var ia = Object.defineProperty;
var fa = Object.defineProperties;
var ca = Object.getOwnPropertyDescriptors;
var Fo = Object.getOwnPropertySymbols;
var aa = Object.prototype.hasOwnProperty;
var ua = Object.prototype.propertyIsEnumerable;
var zo = (t, e, n2) => e in t ? ia(t, e, { enumerable: true, configurable: true, writable: true, value: n2 }) : t[e] = n2;
var la = (t, e) => {
  for (var n2 in e || (e = {})) aa.call(e, n2) && zo(t, n2, e[n2]);
  if (Fo) for (var n2 of Fo(e)) ua.call(e, n2) && zo(t, n2, e[n2]);
  return t;
};
var da = (t, e) => fa(t, ca(e));
function qt(t) {
  const e = [];
  return t.forEach((n2) => {
    const [r2, o3] = n2.split(":");
    e.push(`${r2}:${o3}`);
  }), e;
}
function Go(t) {
  const e = [];
  return Object.values(t).forEach((n2) => {
    e.push(...qt(n2.accounts));
  }), e;
}
function Zo(t, e) {
  const n2 = [];
  return Object.values(t).forEach((r2) => {
    qt(r2.accounts).includes(e) && n2.push(...r2.methods);
  }), n2;
}
function Wo(t, e) {
  const n2 = [];
  return Object.values(t).forEach((r2) => {
    qt(r2.accounts).includes(e) && n2.push(...r2.events);
  }), n2;
}
function Pn(t) {
  return t.includes(":");
}
function Yo(t) {
  return Pn(t) ? t.split(":")[0] : t;
}
function ye(t) {
  var e, n2, r2;
  const o3 = {};
  if (!Ve(t)) return o3;
  for (const [s, i3] of Object.entries(t)) {
    const f7 = Pn(s) ? [s] : i3.chains, c4 = i3.methods || [], u3 = i3.events || [], a2 = Yo(s);
    o3[a2] = da(la({}, o3[a2]), { chains: ct(f7, (e = o3[a2]) == null ? void 0 : e.chains), methods: ct(c4, (n2 = o3[a2]) == null ? void 0 : n2.methods), events: ct(u3, (r2 = o3[a2]) == null ? void 0 : r2.events) });
  }
  return o3;
}
function Xo(t) {
  const e = {};
  return t == null ? void 0 : t.forEach((n2) => {
    var r2;
    const [o3, s] = n2.split(":");
    e[o3] || (e[o3] = { accounts: [], chains: [], events: [], methods: [] }), e[o3].accounts.push(n2), (r2 = e[o3].chains) == null || r2.push(`${o3}:${s}`);
  }), e;
}
function ga(t, e) {
  e = e.map((r2) => r2.replace("did:pkh:", ""));
  const n2 = Xo(e);
  for (const [r2, o3] of Object.entries(n2)) o3.methods ? o3.methods = ct(o3.methods, t) : o3.methods = t, o3.events = ["chainChanged", "accountsChanged"];
  return n2;
}
function ba(t, e) {
  var n2, r2, o3, s, i3, f7;
  const c4 = ye(t), u3 = ye(e), a2 = {}, l4 = Object.keys(c4).concat(Object.keys(u3));
  for (const h4 of l4) a2[h4] = { chains: ct((n2 = c4[h4]) == null ? void 0 : n2.chains, (r2 = u3[h4]) == null ? void 0 : r2.chains), methods: ct((o3 = c4[h4]) == null ? void 0 : o3.methods, (s = u3[h4]) == null ? void 0 : s.methods), events: ct((i3 = c4[h4]) == null ? void 0 : i3.events, (f7 = u3[h4]) == null ? void 0 : f7.events) };
  return a2;
}
var Jo = { INVALID_METHOD: { message: "Invalid method.", code: 1001 }, INVALID_EVENT: { message: "Invalid event.", code: 1002 }, INVALID_UPDATE_REQUEST: { message: "Invalid update request.", code: 1003 }, INVALID_EXTEND_REQUEST: { message: "Invalid extend request.", code: 1004 }, INVALID_SESSION_SETTLE_REQUEST: { message: "Invalid session settle request.", code: 1005 }, UNAUTHORIZED_METHOD: { message: "Unauthorized method.", code: 3001 }, UNAUTHORIZED_EVENT: { message: "Unauthorized event.", code: 3002 }, UNAUTHORIZED_UPDATE_REQUEST: { message: "Unauthorized update request.", code: 3003 }, UNAUTHORIZED_EXTEND_REQUEST: { message: "Unauthorized extend request.", code: 3004 }, USER_REJECTED: { message: "User rejected.", code: 5e3 }, USER_REJECTED_CHAINS: { message: "User rejected chains.", code: 5001 }, USER_REJECTED_METHODS: { message: "User rejected methods.", code: 5002 }, USER_REJECTED_EVENTS: { message: "User rejected events.", code: 5003 }, UNSUPPORTED_CHAINS: { message: "Unsupported chains.", code: 5100 }, UNSUPPORTED_METHODS: { message: "Unsupported methods.", code: 5101 }, UNSUPPORTED_EVENTS: { message: "Unsupported events.", code: 5102 }, UNSUPPORTED_ACCOUNTS: { message: "Unsupported accounts.", code: 5103 }, UNSUPPORTED_NAMESPACE_KEY: { message: "Unsupported namespace key.", code: 5104 }, USER_DISCONNECTED: { message: "User disconnected.", code: 6e3 }, SESSION_SETTLEMENT_FAILED: { message: "Session settlement failed.", code: 7e3 }, WC_METHOD_UNSUPPORTED: { message: "Unsupported wc_ method.", code: 10001 } };
var Qo2 = { NOT_INITIALIZED: { message: "Not initialized.", code: 1 }, NO_MATCHING_KEY: { message: "No matching key.", code: 2 }, RESTORE_WILL_OVERRIDE: { message: "Restore will override.", code: 3 }, RESUBSCRIBED: { message: "Resubscribed.", code: 4 }, MISSING_OR_INVALID: { message: "Missing or invalid.", code: 5 }, EXPIRED: { message: "Expired.", code: 6 }, UNKNOWN_TYPE: { message: "Unknown type.", code: 7 }, MISMATCHED_TOPIC: { message: "Mismatched topic.", code: 8 }, NON_CONFORMING_NAMESPACES: { message: "Non conforming namespaces.", code: 9 } };
function Et(t, e) {
  const { message: n2, code: r2 } = Qo2[t];
  return { message: e ? `${n2} ${e}` : n2, code: r2 };
}
function Kt(t, e) {
  const { message: n2, code: r2 } = Jo[t];
  return { message: e ? `${n2} ${e}` : n2, code: r2 };
}
function me(t, e) {
  return Array.isArray(t) ? typeof e < "u" && t.length ? t.every(e) : true : false;
}
function Ve(t) {
  return Object.getPrototypeOf(t) === Object.prototype && Object.keys(t).length;
}
function kt(t) {
  return typeof t > "u";
}
function it(t, e) {
  return e && kt(t) ? true : typeof t == "string" && !!t.trim().length;
}
function qe(t, e) {
  return e && kt(t) ? true : typeof t == "number" && !isNaN(t);
}
function ya(t, e) {
  const { requiredNamespaces: n2 } = e, r2 = Object.keys(t.namespaces), o3 = Object.keys(n2);
  let s = true;
  return It(o3, r2) ? (r2.forEach((i3) => {
    const { accounts: f7, methods: c4, events: u3 } = t.namespaces[i3], a2 = qt(f7), l4 = n2[i3];
    (!It(ve(i3, l4), a2) || !It(l4.methods, c4) || !It(l4.events, u3)) && (s = false);
  }), s) : false;
}
function we(t) {
  return it(t, false) && t.includes(":") ? t.split(":").length === 2 : false;
}
function ts(t) {
  if (it(t, false) && t.includes(":")) {
    const e = t.split(":");
    if (e.length === 3) {
      const n2 = e[0] + ":" + e[1];
      return !!e[2] && we(n2);
    }
  }
  return false;
}
function ma(t) {
  function e(n2) {
    try {
      return typeof new URL(n2) < "u";
    } catch {
      return false;
    }
  }
  try {
    if (it(t, false)) {
      if (e(t)) return true;
      const n2 = Qe2(t);
      return e(n2);
    }
  } catch {
  }
  return false;
}
function wa(t) {
  var e;
  return (e = t == null ? void 0 : t.proposer) == null ? void 0 : e.publicKey;
}
function xa(t) {
  return t == null ? void 0 : t.topic;
}
function va(t, e) {
  let n2 = null;
  return it(t == null ? void 0 : t.publicKey, false) || (n2 = Et("MISSING_OR_INVALID", `${e} controller public key should be a string`)), n2;
}
function Hn(t) {
  let e = true;
  return me(t) ? t.length && (e = t.every((n2) => it(n2, false))) : e = false, e;
}
function es(t, e, n2) {
  let r2 = null;
  return me(e) && e.length ? e.forEach((o3) => {
    r2 || we(o3) || (r2 = Kt("UNSUPPORTED_CHAINS", `${n2}, chain ${o3} should be a string and conform to "namespace:chainId" format`));
  }) : we(t) || (r2 = Kt("UNSUPPORTED_CHAINS", `${n2}, chains must be defined as "namespace:chainId" e.g. "eip155:1": {...} in the namespace key OR as an array of CAIP-2 chainIds e.g. eip155: { chains: ["eip155:1", "eip155:5"] }`)), r2;
}
function ns(t, e, n2) {
  let r2 = null;
  return Object.entries(t).forEach(([o3, s]) => {
    if (r2) return;
    const i3 = es(o3, ve(o3, s), `${e} ${n2}`);
    i3 && (r2 = i3);
  }), r2;
}
function rs(t, e) {
  let n2 = null;
  return me(t) ? t.forEach((r2) => {
    n2 || ts(r2) || (n2 = Kt("UNSUPPORTED_ACCOUNTS", `${e}, account ${r2} should be a string and conform to "namespace:chainId:address" format`));
  }) : n2 = Kt("UNSUPPORTED_ACCOUNTS", `${e}, accounts should be an array of strings conforming to "namespace:chainId:address" format`), n2;
}
function os(t, e) {
  let n2 = null;
  return Object.values(t).forEach((r2) => {
    if (n2) return;
    const o3 = rs(r2 == null ? void 0 : r2.accounts, `${e} namespace`);
    o3 && (n2 = o3);
  }), n2;
}
function ss(t, e) {
  let n2 = null;
  return Hn(t == null ? void 0 : t.methods) ? Hn(t == null ? void 0 : t.events) || (n2 = Kt("UNSUPPORTED_EVENTS", `${e}, events should be an array of strings or empty array for no events`)) : n2 = Kt("UNSUPPORTED_METHODS", `${e}, methods should be an array of strings or empty array for no methods`), n2;
}
function Dn(t, e) {
  let n2 = null;
  return Object.values(t).forEach((r2) => {
    if (n2) return;
    const o3 = ss(r2, `${e}, namespace`);
    o3 && (n2 = o3);
  }), n2;
}
function Ea(t, e, n2) {
  let r2 = null;
  if (t && Ve(t)) {
    const o3 = Dn(t, e);
    o3 && (r2 = o3);
    const s = ns(t, e, n2);
    s && (r2 = s);
  } else r2 = Et("MISSING_OR_INVALID", `${e}, ${n2} should be an object with data`);
  return r2;
}
function is(t, e) {
  let n2 = null;
  if (t && Ve(t)) {
    const r2 = Dn(t, e);
    r2 && (n2 = r2);
    const o3 = os(t, e);
    o3 && (n2 = o3);
  } else n2 = Et("MISSING_OR_INVALID", `${e}, namespaces should be an object with data`);
  return n2;
}
function fs(t) {
  return it(t.protocol, true);
}
function Ba(t, e) {
  let n2 = false;
  return e && !t ? n2 = true : t && me(t) && t.length && t.forEach((r2) => {
    n2 = fs(r2);
  }), n2;
}
function Ia(t) {
  return typeof t == "number";
}
function Aa(t) {
  return typeof t < "u" && typeof t !== null;
}
function Sa(t) {
  return !(!t || typeof t != "object" || !t.code || !qe(t.code, false) || !t.message || !it(t.message, false));
}
function Na(t) {
  return !(kt(t) || !it(t.method, false));
}
function Oa(t) {
  return !(kt(t) || kt(t.result) && kt(t.error) || !qe(t.id, false) || !it(t.jsonrpc, false));
}
function Ua(t) {
  return !(kt(t) || !it(t.name, false));
}
function _a(t, e) {
  return !(!we(e) || !Go(t).includes(e));
}
function Ta(t, e, n2) {
  return it(n2, false) ? Zo(t, e).includes(n2) : false;
}
function Ra(t, e, n2) {
  return it(n2, false) ? Wo(t, e).includes(n2) : false;
}
function cs(t, e, n2) {
  let r2 = null;
  const o3 = $a(t), s = Ca(e), i3 = Object.keys(o3), f7 = Object.keys(s), c4 = as(Object.keys(t)), u3 = as(Object.keys(e)), a2 = c4.filter((l4) => !u3.includes(l4));
  return a2.length && (r2 = Et("NON_CONFORMING_NAMESPACES", `${n2} namespaces keys don't satisfy requiredNamespaces.
      Required: ${a2.toString()}
      Received: ${Object.keys(e).toString()}`)), It(i3, f7) || (r2 = Et("NON_CONFORMING_NAMESPACES", `${n2} namespaces chains don't satisfy required namespaces.
      Required: ${i3.toString()}
      Approved: ${f7.toString()}`)), Object.keys(e).forEach((l4) => {
    if (!l4.includes(":") || r2) return;
    const h4 = qt(e[l4].accounts);
    h4.includes(l4) || (r2 = Et("NON_CONFORMING_NAMESPACES", `${n2} namespaces accounts don't satisfy namespace accounts for ${l4}
        Required: ${l4}
        Approved: ${h4.toString()}`));
  }), i3.forEach((l4) => {
    r2 || (It(o3[l4].methods, s[l4].methods) ? It(o3[l4].events, s[l4].events) || (r2 = Et("NON_CONFORMING_NAMESPACES", `${n2} namespaces events don't satisfy namespace events for ${l4}`)) : r2 = Et("NON_CONFORMING_NAMESPACES", `${n2} namespaces methods don't satisfy namespace methods for ${l4}`));
  }), r2;
}
function $a(t) {
  const e = {};
  return Object.keys(t).forEach((n2) => {
    var r2;
    n2.includes(":") ? e[n2] = t[n2] : (r2 = t[n2].chains) == null || r2.forEach((o3) => {
      e[o3] = { methods: t[n2].methods, events: t[n2].events };
    });
  }), e;
}
function as(t) {
  return [...new Set(t.map((e) => e.includes(":") ? e.split(":")[0] : e))];
}
function Ca(t) {
  const e = {};
  return Object.keys(t).forEach((n2) => {
    if (n2.includes(":")) e[n2] = t[n2];
    else {
      const r2 = qt(t[n2].accounts);
      r2 == null ? void 0 : r2.forEach((o3) => {
        e[o3] = { accounts: t[n2].accounts.filter((s) => s.includes(`${o3}:`)), methods: t[n2].methods, events: t[n2].events };
      });
    }
  }), e;
}
function La(t, e) {
  return qe(t, false) && t <= e.max && t >= e.min;
}
function ja() {
  const t = Pt();
  return new Promise((e) => {
    switch (t) {
      case J2.browser:
        e(us());
        break;
      case J2.reactNative:
        e(ls());
        break;
      case J2.node:
        e(ds());
        break;
      default:
        e(true);
    }
  });
}
function us() {
  return zt() && (navigator == null ? void 0 : navigator.onLine);
}
async function ls() {
  if (Bt() && typeof global < "u" && global != null && global.NetInfo) {
    const t = await (global == null ? void 0 : global.NetInfo.fetch());
    return t == null ? void 0 : t.isConnected;
  }
  return true;
}
function ds() {
  return true;
}
function ka(t) {
  switch (Pt()) {
    case J2.browser:
      hs(t);
      break;
    case J2.reactNative:
      ps(t);
      break;
    case J2.node:
      break;
  }
}
function hs(t) {
  !Bt() && zt() && (window.addEventListener("online", () => t(true)), window.addEventListener("offline", () => t(false)));
}
function ps(t) {
  Bt() && typeof global < "u" && global != null && global.NetInfo && (global == null ? void 0 : global.NetInfo.addEventListener((e) => t(e == null ? void 0 : e.isConnected)));
}
function Pa() {
  var t;
  return zt() && (0, import_window_getters.getDocument)() ? ((t = (0, import_window_getters.getDocument)()) == null ? void 0 : t.visibilityState) === "visible" : true;
}
var Mn = {};
var Ha = class {
  static get(e) {
    return Mn[e];
  }
  static set(e, n2) {
    Mn[e] = n2;
  }
  static delete(e) {
    delete Mn[e];
  }
};
function gs(t) {
  const e = esm_default.decode(t);
  if (e.length < 33) throw new Error("Too short to contain a public key");
  return e.slice(1, 33);
}
function bs({ publicKey: t, signature: e, payload: n2 }) {
  var r2;
  const o3 = Vn(n2.method), s = 128 | parseInt(((r2 = n2.version) == null ? void 0 : r2.toString()) || "4"), i3 = Ma(n2.address), f7 = n2.era === "00" ? new Uint8Array([0]) : Vn(n2.era);
  if (f7.length !== 1 && f7.length !== 2) throw new Error("Invalid era length");
  const c4 = parseInt(n2.nonce, 16), u3 = new Uint8Array([c4 & 255, c4 >> 8 & 255]), a2 = BigInt(`0x${Da(n2.tip)}`), l4 = qa(a2), h4 = new Uint8Array([0, ...t, i3, ...e, ...f7, ...u3, ...l4, ...o3]), g2 = Va(h4.length + 1);
  return new Uint8Array([...g2, s, ...h4]);
}
function ys(t) {
  const e = Vn(t), n2 = (0, import_blakejs.blake2b)(e, void 0, 32);
  return "0x" + Buffer.from(n2).toString("hex");
}
function Vn(t) {
  return new Uint8Array(t.replace(/^0x/, "").match(/.{1,2}/g).map((e) => parseInt(e, 16)));
}
function Da(t) {
  return t.startsWith("0x") ? t.slice(2) : t;
}
function Ma(t) {
  const e = esm_default.decode(t)[0];
  return e === 42 ? 0 : e === 60 ? 2 : 1;
}
function Va(t) {
  if (t < 64) return new Uint8Array([t << 2]);
  if (t < 16384) {
    const e = t << 2 | 1;
    return new Uint8Array([e & 255, e >> 8 & 255]);
  } else if (t < 1 << 30) {
    const e = t << 2 | 2;
    return new Uint8Array([e & 255, e >> 8 & 255, e >> 16 & 255, e >> 24 & 255]);
  } else throw new Error("Compact encoding > 2^30 not supported");
}
function qa(t) {
  if (t < BigInt(1) << BigInt(6)) return new Uint8Array([Number(t << BigInt(2))]);
  if (t < BigInt(1) << BigInt(14)) {
    const e = t << BigInt(2) | BigInt(1);
    return new Uint8Array([Number(e & BigInt(255)), Number(e >> BigInt(8) & BigInt(255))]);
  } else if (t < BigInt(1) << BigInt(30)) {
    const e = t << BigInt(2) | BigInt(2);
    return new Uint8Array([Number(e & BigInt(255)), Number(e >> BigInt(8) & BigInt(255)), Number(e >> BigInt(16) & BigInt(255)), Number(e >> BigInt(24) & BigInt(255))]);
  } else throw new Error("BigInt compact encoding not supported > 2^30");
}
function Ka(t) {
  const e = Uint8Array.from(Buffer.from(t.signature, "hex")), n2 = gs(t.transaction.address), r2 = bs({ publicKey: n2, signature: e, payload: t.transaction }), o3 = Buffer.from(r2).toString("hex");
  return ys(o3);
}

// node_modules/@walletconnect/universal-provider/node_modules/@walletconnect/core/dist/index.es.js
var import_window_getters2 = __toESM(require_cjs2());
var ze = "wc";
var Le2 = 2;
var he2 = "core";
var B = `${ze}@2:${he2}:`;
var Et2 = { name: he2, logger: "error" };
var It2 = { database: ":memory:" };
var Tt2 = "crypto";
var ke2 = "client_ed25519_seed";
var Ct2 = import_time2.ONE_DAY;
var Pt2 = "keychain";
var St2 = "0.3";
var Ot2 = "messages";
var Rt2 = "0.3";
var je2 = import_time2.SIX_HOURS;
var At2 = "publisher";
var xt2 = "irn";
var Nt2 = "error";
var Ue2 = "wss://relay.walletconnect.org";
var $t2 = "relayer";
var C2 = { message: "relayer_message", message_ack: "relayer_message_ack", connect: "relayer_connect", disconnect: "relayer_disconnect", error: "relayer_error", connection_stalled: "relayer_connection_stalled", transport_closed: "relayer_transport_closed", publish: "relayer_publish" };
var zt2 = "_subscription";
var L = { payload: "payload", connect: "connect", disconnect: "disconnect", error: "error" };
var Lt2 = 0.1;
var _e2 = "2.21.4";
var Q2 = { link_mode: "link_mode", relay: "relay" };
var le2 = { inbound: "inbound", outbound: "outbound" };
var kt2 = "0.3";
var jt2 = "WALLETCONNECT_CLIENT_ID";
var Fe2 = "WALLETCONNECT_LINK_MODE_APPS";
var $ = { created: "subscription_created", deleted: "subscription_deleted", expired: "subscription_expired", disabled: "subscription_disabled", sync: "subscription_sync", resubscribed: "subscription_resubscribed" };
var Ut2 = "subscription";
var Ft = "0.3";
var Js = import_time2.FIVE_SECONDS * 1e3;
var Mt2 = "pairing";
var Kt2 = "0.3";
var se2 = { wc_pairingDelete: { req: { ttl: import_time2.ONE_DAY, prompt: false, tag: 1e3 }, res: { ttl: import_time2.ONE_DAY, prompt: false, tag: 1001 } }, wc_pairingPing: { req: { ttl: import_time2.THIRTY_SECONDS, prompt: false, tag: 1002 }, res: { ttl: import_time2.THIRTY_SECONDS, prompt: false, tag: 1003 } }, unregistered_method: { req: { ttl: import_time2.ONE_DAY, prompt: false, tag: 0 }, res: { ttl: import_time2.ONE_DAY, prompt: false, tag: 0 } } };
var re = { create: "pairing_create", expire: "pairing_expire", delete: "pairing_delete", ping: "pairing_ping" };
var F2 = { created: "history_created", updated: "history_updated", deleted: "history_deleted", sync: "history_sync" };
var Bt2 = "history";
var Vt2 = "0.3";
var qt2 = "expirer";
var M3 = { created: "expirer_created", deleted: "expirer_deleted", expired: "expirer_expired", sync: "expirer_sync" };
var Gt2 = "0.3";
var Wt2 = "verify-api";
var Qs = "https://verify.walletconnect.com";
var Ht2 = "https://verify.walletconnect.org";
var ue2 = Ht2;
var Yt2 = `${ue2}/v3`;
var Jt2 = [Qs, Ht2];
var Xt2 = "echo";
var Zt2 = "https://echo.walletconnect.com";
var G2 = { pairing_started: "pairing_started", pairing_uri_validation_success: "pairing_uri_validation_success", pairing_uri_not_expired: "pairing_uri_not_expired", store_new_pairing: "store_new_pairing", subscribing_pairing_topic: "subscribing_pairing_topic", subscribe_pairing_topic_success: "subscribe_pairing_topic_success", existing_pairing: "existing_pairing", pairing_not_expired: "pairing_not_expired", emit_inactive_pairing: "emit_inactive_pairing", emit_session_proposal: "emit_session_proposal", subscribing_to_pairing_topic: "subscribing_to_pairing_topic" };
var Y2 = { no_wss_connection: "no_wss_connection", no_internet_connection: "no_internet_connection", malformed_pairing_uri: "malformed_pairing_uri", active_pairing_already_exists: "active_pairing_already_exists", subscribe_pairing_topic_failure: "subscribe_pairing_topic_failure", pairing_expired: "pairing_expired", proposal_expired: "proposal_expired", proposal_listener_not_found: "proposal_listener_not_found" };
var tr2 = { session_approve_started: "session_approve_started", proposal_not_expired: "proposal_not_expired", session_namespaces_validation_success: "session_namespaces_validation_success", create_session_topic: "create_session_topic", subscribing_session_topic: "subscribing_session_topic", subscribe_session_topic_success: "subscribe_session_topic_success", publishing_session_approve: "publishing_session_approve", session_approve_publish_success: "session_approve_publish_success", store_session: "store_session", publishing_session_settle: "publishing_session_settle", session_settle_publish_success: "session_settle_publish_success" };
var ir2 = { no_internet_connection: "no_internet_connection", no_wss_connection: "no_wss_connection", proposal_expired: "proposal_expired", subscribe_session_topic_failure: "subscribe_session_topic_failure", session_approve_publish_failure: "session_approve_publish_failure", session_settle_publish_failure: "session_settle_publish_failure", session_approve_namespace_validation_failure: "session_approve_namespace_validation_failure", proposal_not_found: "proposal_not_found" };
var sr2 = { authenticated_session_approve_started: "authenticated_session_approve_started", authenticated_session_not_expired: "authenticated_session_not_expired", chains_caip2_compliant: "chains_caip2_compliant", chains_evm_compliant: "chains_evm_compliant", create_authenticated_session_topic: "create_authenticated_session_topic", cacaos_verified: "cacaos_verified", store_authenticated_session: "store_authenticated_session", subscribing_authenticated_session_topic: "subscribing_authenticated_session_topic", subscribe_authenticated_session_topic_success: "subscribe_authenticated_session_topic_success", publishing_authenticated_session_approve: "publishing_authenticated_session_approve", authenticated_session_approve_publish_success: "authenticated_session_approve_publish_success" };
var rr2 = { no_internet_connection: "no_internet_connection", no_wss_connection: "no_wss_connection", missing_session_authenticate_request: "missing_session_authenticate_request", session_authenticate_request_expired: "session_authenticate_request_expired", chains_caip2_compliant_failure: "chains_caip2_compliant_failure", chains_evm_compliant_failure: "chains_evm_compliant_failure", invalid_cacao: "invalid_cacao", subscribe_authenticated_session_topic_failure: "subscribe_authenticated_session_topic_failure", authenticated_session_approve_publish_failure: "authenticated_session_approve_publish_failure", authenticated_session_pending_request_not_found: "authenticated_session_pending_request_not_found" };
var Qt2 = 0.1;
var ei2 = "event-client";
var ti = 86400;
var ii2 = "https://pulse.walletconnect.org/batch";
function nr(r2, e) {
  if (r2.length >= 255) throw new TypeError("Alphabet too long");
  for (var t = new Uint8Array(256), i3 = 0; i3 < t.length; i3++) t[i3] = 255;
  for (var s = 0; s < r2.length; s++) {
    var n2 = r2.charAt(s), o3 = n2.charCodeAt(0);
    if (t[o3] !== 255) throw new TypeError(n2 + " is ambiguous");
    t[o3] = s;
  }
  var a2 = r2.length, c4 = r2.charAt(0), h4 = Math.log(a2) / Math.log(256), l4 = Math.log(256) / Math.log(a2);
  function d3(u3) {
    if (u3 instanceof Uint8Array || (ArrayBuffer.isView(u3) ? u3 = new Uint8Array(u3.buffer, u3.byteOffset, u3.byteLength) : Array.isArray(u3) && (u3 = Uint8Array.from(u3))), !(u3 instanceof Uint8Array)) throw new TypeError("Expected Uint8Array");
    if (u3.length === 0) return "";
    for (var b3 = 0, x3 = 0, I4 = 0, D2 = u3.length; I4 !== D2 && u3[I4] === 0; ) I4++, b3++;
    for (var j3 = (D2 - I4) * l4 + 1 >>> 0, T4 = new Uint8Array(j3); I4 !== D2; ) {
      for (var q2 = u3[I4], J3 = 0, K3 = j3 - 1; (q2 !== 0 || J3 < x3) && K3 !== -1; K3--, J3++) q2 += 256 * T4[K3] >>> 0, T4[K3] = q2 % a2 >>> 0, q2 = q2 / a2 >>> 0;
      if (q2 !== 0) throw new Error("Non-zero carry");
      x3 = J3, I4++;
    }
    for (var H2 = j3 - x3; H2 !== j3 && T4[H2] === 0; ) H2++;
    for (var me4 = c4.repeat(b3); H2 < j3; ++H2) me4 += r2.charAt(T4[H2]);
    return me4;
  }
  function g2(u3) {
    if (typeof u3 != "string") throw new TypeError("Expected String");
    if (u3.length === 0) return new Uint8Array();
    var b3 = 0;
    if (u3[b3] !== " ") {
      for (var x3 = 0, I4 = 0; u3[b3] === c4; ) x3++, b3++;
      for (var D2 = (u3.length - b3) * h4 + 1 >>> 0, j3 = new Uint8Array(D2); u3[b3]; ) {
        var T4 = t[u3.charCodeAt(b3)];
        if (T4 === 255) return;
        for (var q2 = 0, J3 = D2 - 1; (T4 !== 0 || q2 < I4) && J3 !== -1; J3--, q2++) T4 += a2 * j3[J3] >>> 0, j3[J3] = T4 % 256 >>> 0, T4 = T4 / 256 >>> 0;
        if (T4 !== 0) throw new Error("Non-zero carry");
        I4 = q2, b3++;
      }
      if (u3[b3] !== " ") {
        for (var K3 = D2 - I4; K3 !== D2 && j3[K3] === 0; ) K3++;
        for (var H2 = new Uint8Array(x3 + (D2 - K3)), me4 = x3; K3 !== D2; ) H2[me4++] = j3[K3++];
        return H2;
      }
    }
  }
  function _(u3) {
    var b3 = g2(u3);
    if (b3) return b3;
    throw new Error(`Non-${e} character`);
  }
  return { encode: d3, decodeUnsafe: g2, decode: _ };
}
var or2 = nr;
var ar = or2;
var si2 = (r2) => {
  if (r2 instanceof Uint8Array && r2.constructor.name === "Uint8Array") return r2;
  if (r2 instanceof ArrayBuffer) return new Uint8Array(r2);
  if (ArrayBuffer.isView(r2)) return new Uint8Array(r2.buffer, r2.byteOffset, r2.byteLength);
  throw new Error("Unknown type, must be binary type");
};
var cr2 = (r2) => new TextEncoder().encode(r2);
var hr2 = (r2) => new TextDecoder().decode(r2);
var lr = class {
  constructor(e, t, i3) {
    this.name = e, this.prefix = t, this.baseEncode = i3;
  }
  encode(e) {
    if (e instanceof Uint8Array) return `${this.prefix}${this.baseEncode(e)}`;
    throw Error("Unknown type, must be binary type");
  }
};
var ur = class {
  constructor(e, t, i3) {
    if (this.name = e, this.prefix = t, t.codePointAt(0) === void 0) throw new Error("Invalid prefix character");
    this.prefixCodePoint = t.codePointAt(0), this.baseDecode = i3;
  }
  decode(e) {
    if (typeof e == "string") {
      if (e.codePointAt(0) !== this.prefixCodePoint) throw Error(`Unable to decode multibase string ${JSON.stringify(e)}, ${this.name} decoder only supports inputs prefixed with ${this.prefix}`);
      return this.baseDecode(e.slice(this.prefix.length));
    } else throw Error("Can only multibase decode strings");
  }
  or(e) {
    return ri2(this, e);
  }
};
var dr2 = class {
  constructor(e) {
    this.decoders = e;
  }
  or(e) {
    return ri2(this, e);
  }
  decode(e) {
    const t = e[0], i3 = this.decoders[t];
    if (i3) return i3.decode(e);
    throw RangeError(`Unable to decode multibase string ${JSON.stringify(e)}, only inputs prefixed with ${Object.keys(this.decoders)} are supported`);
  }
};
var ri2 = (r2, e) => new dr2({ ...r2.decoders || { [r2.prefix]: r2 }, ...e.decoders || { [e.prefix]: e } });
var gr2 = class {
  constructor(e, t, i3, s) {
    this.name = e, this.prefix = t, this.baseEncode = i3, this.baseDecode = s, this.encoder = new lr(e, t, i3), this.decoder = new ur(e, t, s);
  }
  encode(e) {
    return this.encoder.encode(e);
  }
  decode(e) {
    return this.decoder.decode(e);
  }
};
var Ee = ({ name: r2, prefix: e, encode: t, decode: i3 }) => new gr2(r2, e, t, i3);
var de2 = ({ prefix: r2, name: e, alphabet: t }) => {
  const { encode: i3, decode: s } = ar(t, e);
  return Ee({ prefix: r2, name: e, encode: i3, decode: (n2) => si2(s(n2)) });
};
var pr2 = (r2, e, t, i3) => {
  const s = {};
  for (let l4 = 0; l4 < e.length; ++l4) s[e[l4]] = l4;
  let n2 = r2.length;
  for (; r2[n2 - 1] === "="; ) --n2;
  const o3 = new Uint8Array(n2 * t / 8 | 0);
  let a2 = 0, c4 = 0, h4 = 0;
  for (let l4 = 0; l4 < n2; ++l4) {
    const d3 = s[r2[l4]];
    if (d3 === void 0) throw new SyntaxError(`Non-${i3} character`);
    c4 = c4 << t | d3, a2 += t, a2 >= 8 && (a2 -= 8, o3[h4++] = 255 & c4 >> a2);
  }
  if (a2 >= t || 255 & c4 << 8 - a2) throw new SyntaxError("Unexpected end of data");
  return o3;
};
var yr2 = (r2, e, t) => {
  const i3 = e[e.length - 1] === "=", s = (1 << t) - 1;
  let n2 = "", o3 = 0, a2 = 0;
  for (let c4 = 0; c4 < r2.length; ++c4) for (a2 = a2 << 8 | r2[c4], o3 += 8; o3 > t; ) o3 -= t, n2 += e[s & a2 >> o3];
  if (o3 && (n2 += e[s & a2 << t - o3]), i3) for (; n2.length * t & 7; ) n2 += "=";
  return n2;
};
var P2 = ({ name: r2, prefix: e, bitsPerChar: t, alphabet: i3 }) => Ee({ prefix: e, name: r2, encode(s) {
  return yr2(s, i3, t);
}, decode(s) {
  return pr2(s, i3, t, r2);
} });
var br2 = Ee({ prefix: "\0", name: "identity", encode: (r2) => hr2(r2), decode: (r2) => cr2(r2) });
var mr2 = Object.freeze({ __proto__: null, identity: br2 });
var fr2 = P2({ prefix: "0", name: "base2", alphabet: "01", bitsPerChar: 1 });
var Dr2 = Object.freeze({ __proto__: null, base2: fr2 });
var vr2 = P2({ prefix: "7", name: "base8", alphabet: "01234567", bitsPerChar: 3 });
var wr2 = Object.freeze({ __proto__: null, base8: vr2 });
var _r2 = de2({ prefix: "9", name: "base10", alphabet: "0123456789" });
var Er2 = Object.freeze({ __proto__: null, base10: _r2 });
var Ir2 = P2({ prefix: "f", name: "base16", alphabet: "0123456789abcdef", bitsPerChar: 4 });
var Tr2 = P2({ prefix: "F", name: "base16upper", alphabet: "0123456789ABCDEF", bitsPerChar: 4 });
var Cr2 = Object.freeze({ __proto__: null, base16: Ir2, base16upper: Tr2 });
var Pr2 = P2({ prefix: "b", name: "base32", alphabet: "abcdefghijklmnopqrstuvwxyz234567", bitsPerChar: 5 });
var Sr2 = P2({ prefix: "B", name: "base32upper", alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567", bitsPerChar: 5 });
var Or2 = P2({ prefix: "c", name: "base32pad", alphabet: "abcdefghijklmnopqrstuvwxyz234567=", bitsPerChar: 5 });
var Rr2 = P2({ prefix: "C", name: "base32padupper", alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=", bitsPerChar: 5 });
var Ar2 = P2({ prefix: "v", name: "base32hex", alphabet: "0123456789abcdefghijklmnopqrstuv", bitsPerChar: 5 });
var xr2 = P2({ prefix: "V", name: "base32hexupper", alphabet: "0123456789ABCDEFGHIJKLMNOPQRSTUV", bitsPerChar: 5 });
var Nr2 = P2({ prefix: "t", name: "base32hexpad", alphabet: "0123456789abcdefghijklmnopqrstuv=", bitsPerChar: 5 });
var $r2 = P2({ prefix: "T", name: "base32hexpadupper", alphabet: "0123456789ABCDEFGHIJKLMNOPQRSTUV=", bitsPerChar: 5 });
var zr = P2({ prefix: "h", name: "base32z", alphabet: "ybndrfg8ejkmcpqxot1uwisza345h769", bitsPerChar: 5 });
var Lr2 = Object.freeze({ __proto__: null, base32: Pr2, base32upper: Sr2, base32pad: Or2, base32padupper: Rr2, base32hex: Ar2, base32hexupper: xr2, base32hexpad: Nr2, base32hexpadupper: $r2, base32z: zr });
var kr2 = de2({ prefix: "k", name: "base36", alphabet: "0123456789abcdefghijklmnopqrstuvwxyz" });
var jr2 = de2({ prefix: "K", name: "base36upper", alphabet: "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ" });
var Ur2 = Object.freeze({ __proto__: null, base36: kr2, base36upper: jr2 });
var Fr = de2({ name: "base58btc", prefix: "z", alphabet: "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz" });
var Mr2 = de2({ name: "base58flickr", prefix: "Z", alphabet: "123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ" });
var Kr = Object.freeze({ __proto__: null, base58btc: Fr, base58flickr: Mr2 });
var Br2 = P2({ prefix: "m", name: "base64", alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", bitsPerChar: 6 });
var Vr2 = P2({ prefix: "M", name: "base64pad", alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=", bitsPerChar: 6 });
var qr2 = P2({ prefix: "u", name: "base64url", alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_", bitsPerChar: 6 });
var Gr2 = P2({ prefix: "U", name: "base64urlpad", alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=", bitsPerChar: 6 });
var Wr2 = Object.freeze({ __proto__: null, base64: Br2, base64pad: Vr2, base64url: qr2, base64urlpad: Gr2 });
var ni2 = Array.from("🚀🪐☄🛰🌌🌑🌒🌓🌔🌕🌖🌗🌘🌍🌏🌎🐉☀💻🖥💾💿😂❤😍🤣😊🙏💕😭😘👍😅👏😁🔥🥰💔💖💙😢🤔😆🙄💪😉☺👌🤗💜😔😎😇🌹🤦🎉💞✌✨🤷😱😌🌸🙌😋💗💚😏💛🙂💓🤩😄😀🖤😃💯🙈👇🎶😒🤭❣😜💋👀😪😑💥🙋😞😩😡🤪👊🥳😥🤤👉💃😳✋😚😝😴🌟😬🙃🍀🌷😻😓⭐✅🥺🌈😈🤘💦✔😣🏃💐☹🎊💘😠☝😕🌺🎂🌻😐🖕💝🙊😹🗣💫💀👑🎵🤞😛🔴😤🌼😫⚽🤙☕🏆🤫👈😮🙆🍻🍃🐶💁😲🌿🧡🎁⚡🌞🎈❌✊👋😰🤨😶🤝🚶💰🍓💢🤟🙁🚨💨🤬✈🎀🍺🤓😙💟🌱😖👶🥴▶➡❓💎💸⬇😨🌚🦋😷🕺⚠🙅😟😵👎🤲🤠🤧📌🔵💅🧐🐾🍒😗🤑🌊🤯🐷☎💧😯💆👆🎤🙇🍑❄🌴💣🐸💌📍🥀🤢👅💡💩👐📸👻🤐🤮🎼🥵🚩🍎🍊👼💍📣🥂");
var Hr2 = ni2.reduce((r2, e, t) => (r2[t] = e, r2), []);
var Yr = ni2.reduce((r2, e, t) => (r2[e.codePointAt(0)] = t, r2), []);
function Jr(r2) {
  return r2.reduce((e, t) => (e += Hr2[t], e), "");
}
function Xr2(r2) {
  const e = [];
  for (const t of r2) {
    const i3 = Yr[t.codePointAt(0)];
    if (i3 === void 0) throw new Error(`Non-base256emoji character: ${t}`);
    e.push(i3);
  }
  return new Uint8Array(e);
}
var Zr2 = Ee({ prefix: "🚀", name: "base256emoji", encode: Jr, decode: Xr2 });
var Qr2 = Object.freeze({ __proto__: null, base256emoji: Zr2 });
var en2 = ai2;
var oi2 = 128;
var tn2 = 127;
var sn3 = ~tn2;
var rn2 = Math.pow(2, 31);
function ai2(r2, e, t) {
  e = e || [], t = t || 0;
  for (var i3 = t; r2 >= rn2; ) e[t++] = r2 & 255 | oi2, r2 /= 128;
  for (; r2 & sn3; ) e[t++] = r2 & 255 | oi2, r2 >>>= 7;
  return e[t] = r2 | 0, ai2.bytes = t - i3 + 1, e;
}
var nn2 = Me2;
var on2 = 128;
var ci2 = 127;
function Me2(r2, i3) {
  var t = 0, i3 = i3 || 0, s = 0, n2 = i3, o3, a2 = r2.length;
  do {
    if (n2 >= a2) throw Me2.bytes = 0, new RangeError("Could not decode varint");
    o3 = r2[n2++], t += s < 28 ? (o3 & ci2) << s : (o3 & ci2) * Math.pow(2, s), s += 7;
  } while (o3 >= on2);
  return Me2.bytes = n2 - i3, t;
}
var an2 = Math.pow(2, 7);
var cn2 = Math.pow(2, 14);
var hn2 = Math.pow(2, 21);
var ln2 = Math.pow(2, 28);
var un2 = Math.pow(2, 35);
var dn2 = Math.pow(2, 42);
var gn2 = Math.pow(2, 49);
var pn2 = Math.pow(2, 56);
var yn2 = Math.pow(2, 63);
var bn2 = function(r2) {
  return r2 < an2 ? 1 : r2 < cn2 ? 2 : r2 < hn2 ? 3 : r2 < ln2 ? 4 : r2 < un2 ? 5 : r2 < dn2 ? 6 : r2 < gn2 ? 7 : r2 < pn2 ? 8 : r2 < yn2 ? 9 : 10;
};
var mn2 = { encode: en2, decode: nn2, encodingLength: bn2 };
var hi2 = mn2;
var li2 = (r2, e, t = 0) => (hi2.encode(r2, e, t), e);
var ui2 = (r2) => hi2.encodingLength(r2);
var Ke2 = (r2, e) => {
  const t = e.byteLength, i3 = ui2(r2), s = i3 + ui2(t), n2 = new Uint8Array(s + t);
  return li2(r2, n2, 0), li2(t, n2, i3), n2.set(e, s), new fn2(r2, t, e, n2);
};
var fn2 = class {
  constructor(e, t, i3, s) {
    this.code = e, this.size = t, this.digest = i3, this.bytes = s;
  }
};
var di2 = ({ name: r2, code: e, encode: t }) => new Dn2(r2, e, t);
var Dn2 = class {
  constructor(e, t, i3) {
    this.name = e, this.code = t, this.encode = i3;
  }
  digest(e) {
    if (e instanceof Uint8Array) {
      const t = this.encode(e);
      return t instanceof Uint8Array ? Ke2(this.code, t) : t.then((i3) => Ke2(this.code, i3));
    } else throw Error("Unknown type, must be binary type");
  }
};
var gi2 = (r2) => async (e) => new Uint8Array(await crypto.subtle.digest(r2, e));
var vn2 = di2({ name: "sha2-256", code: 18, encode: gi2("SHA-256") });
var wn2 = di2({ name: "sha2-512", code: 19, encode: gi2("SHA-512") });
var _n2 = Object.freeze({ __proto__: null, sha256: vn2, sha512: wn2 });
var pi2 = 0;
var En2 = "identity";
var yi2 = si2;
var In2 = (r2) => Ke2(pi2, yi2(r2));
var Tn2 = { code: pi2, name: En2, encode: yi2, digest: In2 };
var Cn2 = Object.freeze({ __proto__: null, identity: Tn2 });
new TextEncoder(), new TextDecoder();
var bi2 = { ...mr2, ...Dr2, ...wr2, ...Er2, ...Cr2, ...Lr2, ...Ur2, ...Kr, ...Wr2, ...Qr2 };
({ ..._n2, ...Cn2 });
function mi2(r2) {
  return globalThis.Buffer != null ? new Uint8Array(r2.buffer, r2.byteOffset, r2.byteLength) : r2;
}
function Pn2(r2 = 0) {
  return globalThis.Buffer != null && globalThis.Buffer.allocUnsafe != null ? mi2(globalThis.Buffer.allocUnsafe(r2)) : new Uint8Array(r2);
}
function fi2(r2, e, t, i3) {
  return { name: r2, prefix: e, encoder: { name: r2, prefix: e, encode: t }, decoder: { decode: i3 } };
}
var Di2 = fi2("utf8", "u", (r2) => "u" + new TextDecoder("utf8").decode(r2), (r2) => new TextEncoder().encode(r2.substring(1)));
var Be2 = fi2("ascii", "a", (r2) => {
  let e = "a";
  for (let t = 0; t < r2.length; t++) e += String.fromCharCode(r2[t]);
  return e;
}, (r2) => {
  r2 = r2.substring(1);
  const e = Pn2(r2.length);
  for (let t = 0; t < r2.length; t++) e[t] = r2.charCodeAt(t);
  return e;
});
var Sn2 = { utf8: Di2, "utf-8": Di2, hex: bi2.base16, latin1: Be2, ascii: Be2, binary: Be2, ...bi2 };
function On2(r2, e = "utf8") {
  const t = Sn2[e];
  if (!t) throw new Error(`Unsupported encoding "${e}"`);
  return (e === "utf8" || e === "utf-8") && globalThis.Buffer != null && globalThis.Buffer.from != null ? mi2(globalThis.Buffer.from(r2, "utf-8")) : t.decoder.decode(`${t.prefix}${r2}`);
}
var Rn2 = Object.defineProperty;
var An2 = (r2, e, t) => e in r2 ? Rn2(r2, e, { enumerable: true, configurable: true, writable: true, value: t }) : r2[e] = t;
var W2 = (r2, e, t) => An2(r2, typeof e != "symbol" ? e + "" : e, t);
var vi2 = class {
  constructor(e, t) {
    this.core = e, this.logger = t, W2(this, "keychain", /* @__PURE__ */ new Map()), W2(this, "name", Pt2), W2(this, "version", St2), W2(this, "initialized", false), W2(this, "storagePrefix", B), W2(this, "init", async () => {
      if (!this.initialized) {
        const i3 = await this.getKeyChain();
        typeof i3 < "u" && (this.keychain = i3), this.initialized = true;
      }
    }), W2(this, "has", (i3) => (this.isInitialized(), this.keychain.has(i3))), W2(this, "set", async (i3, s) => {
      this.isInitialized(), this.keychain.set(i3, s), await this.persist();
    }), W2(this, "get", (i3) => {
      this.isInitialized();
      const s = this.keychain.get(i3);
      if (typeof s > "u") {
        const { message: n2 } = Et("NO_MATCHING_KEY", `${this.name}: ${i3}`);
        throw new Error(n2);
      }
      return s;
    }), W2(this, "del", async (i3) => {
      this.isInitialized(), this.keychain.delete(i3), await this.persist();
    }), this.core = e, this.logger = E(t, this.name);
  }
  get context() {
    return y(this.logger);
  }
  get storageKey() {
    return this.storagePrefix + this.version + this.core.customStoragePrefix + "//" + this.name;
  }
  async setKeyChain(e) {
    await this.core.storage.setItem(this.storageKey, Ys(e));
  }
  async getKeyChain() {
    const e = await this.core.storage.getItem(this.storageKey);
    return typeof e < "u" ? Xs(e) : void 0;
  }
  async persist() {
    await this.setKeyChain(this.keychain);
  }
  isInitialized() {
    if (!this.initialized) {
      const { message: e } = Et("NOT_INITIALIZED", this.name);
      throw new Error(e);
    }
  }
};
var xn2 = Object.defineProperty;
var Nn2 = (r2, e, t) => e in r2 ? xn2(r2, e, { enumerable: true, configurable: true, writable: true, value: t }) : r2[e] = t;
var S2 = (r2, e, t) => Nn2(r2, typeof e != "symbol" ? e + "" : e, t);
var wi2 = class {
  constructor(e, t, i3) {
    this.core = e, this.logger = t, S2(this, "name", Tt2), S2(this, "keychain"), S2(this, "randomSessionIdentifier", qc()), S2(this, "initialized", false), S2(this, "init", async () => {
      this.initialized || (await this.keychain.init(), this.initialized = true);
    }), S2(this, "hasKeys", (s) => (this.isInitialized(), this.keychain.has(s))), S2(this, "getClientId", async () => {
      this.isInitialized();
      const s = await this.getClientSeed(), n2 = Po(s);
      return Qe(n2.publicKey);
    }), S2(this, "generateKeyPair", () => {
      this.isInitialized();
      const s = Vc();
      return this.setPrivateKey(s.publicKey, s.privateKey);
    }), S2(this, "signJWT", async (s) => {
      this.isInitialized();
      const n2 = await this.getClientSeed(), o3 = Po(n2), a2 = this.randomSessionIdentifier, c4 = Ct2;
      return await Qo(a2, s, c4, o3);
    }), S2(this, "generateSharedKey", (s, n2, o3) => {
      this.isInitialized();
      const a2 = this.getPrivateKey(s), c4 = Kc(a2, n2);
      return this.setSymKey(c4, o3);
    }), S2(this, "setSymKey", async (s, n2) => {
      this.isInitialized();
      const o3 = n2 || Fc(s);
      return await this.keychain.set(o3, s), o3;
    }), S2(this, "deleteKeyPair", async (s) => {
      this.isInitialized(), await this.keychain.del(s);
    }), S2(this, "deleteSymKey", async (s) => {
      this.isInitialized(), await this.keychain.del(s);
    }), S2(this, "encode", async (s, n2, o3) => {
      this.isInitialized();
      const a2 = Ho(o3), c4 = safeJsonStringify(n2);
      if (Qc(a2)) return Wc(c4, o3 == null ? void 0 : o3.encoding);
      if (Jc(a2)) {
        const g2 = a2.senderPublicKey, _ = a2.receiverPublicKey;
        s = await this.generateSharedKey(g2, _);
      }
      const h4 = this.getSymKey(s), { type: l4, senderPublicKey: d3 } = a2;
      return Gc({ type: l4, symKey: h4, message: c4, senderPublicKey: d3, encoding: o3 == null ? void 0 : o3.encoding });
    }), S2(this, "decode", async (s, n2, o3) => {
      this.isInitialized();
      const a2 = Xc(n2, o3);
      if (Qc(a2)) {
        const c4 = Yc(n2, o3 == null ? void 0 : o3.encoding);
        return safeJsonParse(c4);
      }
      if (Jc(a2)) {
        const c4 = a2.receiverPublicKey, h4 = a2.senderPublicKey;
        s = await this.generateSharedKey(c4, h4);
      }
      try {
        const c4 = this.getSymKey(s), h4 = Zc({ symKey: c4, encoded: n2, encoding: o3 == null ? void 0 : o3.encoding });
        return safeJsonParse(h4);
      } catch (c4) {
        this.logger.error(`Failed to decode message from topic: '${s}', clientId: '${await this.getClientId()}'`), this.logger.error(c4);
      }
    }), S2(this, "getPayloadType", (s, n2 = Qt) => {
      const o3 = Me({ encoded: s, encoding: n2 });
      return Vt(o3.type);
    }), S2(this, "getPayloadSenderPublicKey", (s, n2 = Qt) => {
      const o3 = Me({ encoded: s, encoding: n2 });
      return o3.senderPublicKey ? toString2(o3.senderPublicKey, tt) : void 0;
    }), this.core = e, this.logger = E(t, this.name), this.keychain = i3 || new vi2(this.core, this.logger);
  }
  get context() {
    return y(this.logger);
  }
  async setPrivateKey(e, t) {
    return await this.keychain.set(e, t), e;
  }
  getPrivateKey(e) {
    return this.keychain.get(e);
  }
  async getClientSeed() {
    let e = "";
    try {
      e = this.keychain.get(ke2);
    } catch {
      e = qc(), await this.keychain.set(ke2, e);
    }
    return On2(e, "base16");
  }
  getSymKey(e) {
    return this.keychain.get(e);
  }
  isInitialized() {
    if (!this.initialized) {
      const { message: e } = Et("NOT_INITIALIZED", this.name);
      throw new Error(e);
    }
  }
};
var $n2 = Object.defineProperty;
var zn2 = Object.defineProperties;
var Ln2 = Object.getOwnPropertyDescriptors;
var _i2 = Object.getOwnPropertySymbols;
var kn2 = Object.prototype.hasOwnProperty;
var jn2 = Object.prototype.propertyIsEnumerable;
var Ve2 = (r2, e, t) => e in r2 ? $n2(r2, e, { enumerable: true, configurable: true, writable: true, value: t }) : r2[e] = t;
var Un2 = (r2, e) => {
  for (var t in e || (e = {})) kn2.call(e, t) && Ve2(r2, t, e[t]);
  if (_i2) for (var t of _i2(e)) jn2.call(e, t) && Ve2(r2, t, e[t]);
  return r2;
};
var Fn2 = (r2, e) => zn2(r2, Ln2(e));
var k3 = (r2, e, t) => Ve2(r2, typeof e != "symbol" ? e + "" : e, t);
var Ei2 = class extends y2 {
  constructor(e, t) {
    super(e, t), this.logger = e, this.core = t, k3(this, "messages", /* @__PURE__ */ new Map()), k3(this, "messagesWithoutClientAck", /* @__PURE__ */ new Map()), k3(this, "name", Ot2), k3(this, "version", Rt2), k3(this, "initialized", false), k3(this, "storagePrefix", B), k3(this, "init", async () => {
      if (!this.initialized) {
        this.logger.trace("Initialized");
        try {
          const i3 = await this.getRelayerMessages();
          typeof i3 < "u" && (this.messages = i3);
          const s = await this.getRelayerMessagesWithoutClientAck();
          typeof s < "u" && (this.messagesWithoutClientAck = s), this.logger.debug(`Successfully Restored records for ${this.name}`), this.logger.trace({ type: "method", method: "restore", size: this.messages.size });
        } catch (i3) {
          this.logger.debug(`Failed to Restore records for ${this.name}`), this.logger.error(i3);
        } finally {
          this.initialized = true;
        }
      }
    }), k3(this, "set", async (i3, s, n2) => {
      this.isInitialized();
      const o3 = zc(s);
      let a2 = this.messages.get(i3);
      if (typeof a2 > "u" && (a2 = {}), typeof a2[o3] < "u") return o3;
      if (a2[o3] = s, this.messages.set(i3, a2), n2 === le2.inbound) {
        const c4 = this.messagesWithoutClientAck.get(i3) || {};
        this.messagesWithoutClientAck.set(i3, Fn2(Un2({}, c4), { [o3]: s }));
      }
      return await this.persist(), o3;
    }), k3(this, "get", (i3) => {
      this.isInitialized();
      let s = this.messages.get(i3);
      return typeof s > "u" && (s = {}), s;
    }), k3(this, "getWithoutAck", (i3) => {
      this.isInitialized();
      const s = {};
      for (const n2 of i3) {
        const o3 = this.messagesWithoutClientAck.get(n2) || {};
        s[n2] = Object.values(o3);
      }
      return s;
    }), k3(this, "has", (i3, s) => {
      this.isInitialized();
      const n2 = this.get(i3), o3 = zc(s);
      return typeof n2[o3] < "u";
    }), k3(this, "ack", async (i3, s) => {
      this.isInitialized();
      const n2 = this.messagesWithoutClientAck.get(i3);
      if (typeof n2 > "u") return;
      const o3 = zc(s);
      delete n2[o3], Object.keys(n2).length === 0 ? this.messagesWithoutClientAck.delete(i3) : this.messagesWithoutClientAck.set(i3, n2), await this.persist();
    }), k3(this, "del", async (i3) => {
      this.isInitialized(), this.messages.delete(i3), this.messagesWithoutClientAck.delete(i3), await this.persist();
    }), this.logger = E(e, this.name), this.core = t;
  }
  get context() {
    return y(this.logger);
  }
  get storageKey() {
    return this.storagePrefix + this.version + this.core.customStoragePrefix + "//" + this.name;
  }
  get storageKeyWithoutClientAck() {
    return this.storagePrefix + this.version + this.core.customStoragePrefix + "//" + this.name + "_withoutClientAck";
  }
  async setRelayerMessages(e) {
    await this.core.storage.setItem(this.storageKey, Ys(e));
  }
  async setRelayerMessagesWithoutClientAck(e) {
    await this.core.storage.setItem(this.storageKeyWithoutClientAck, Ys(e));
  }
  async getRelayerMessages() {
    const e = await this.core.storage.getItem(this.storageKey);
    return typeof e < "u" ? Xs(e) : void 0;
  }
  async getRelayerMessagesWithoutClientAck() {
    const e = await this.core.storage.getItem(this.storageKeyWithoutClientAck);
    return typeof e < "u" ? Xs(e) : void 0;
  }
  async persist() {
    await this.setRelayerMessages(this.messages), await this.setRelayerMessagesWithoutClientAck(this.messagesWithoutClientAck);
  }
  isInitialized() {
    if (!this.initialized) {
      const { message: e } = Et("NOT_INITIALIZED", this.name);
      throw new Error(e);
    }
  }
};
var Mn2 = Object.defineProperty;
var Kn2 = Object.defineProperties;
var Bn2 = Object.getOwnPropertyDescriptors;
var Ii2 = Object.getOwnPropertySymbols;
var Vn2 = Object.prototype.hasOwnProperty;
var qn2 = Object.prototype.propertyIsEnumerable;
var qe2 = (r2, e, t) => e in r2 ? Mn2(r2, e, { enumerable: true, configurable: true, writable: true, value: t }) : r2[e] = t;
var Ie2 = (r2, e) => {
  for (var t in e || (e = {})) Vn2.call(e, t) && qe2(r2, t, e[t]);
  if (Ii2) for (var t of Ii2(e)) qn2.call(e, t) && qe2(r2, t, e[t]);
  return r2;
};
var Ge = (r2, e) => Kn2(r2, Bn2(e));
var V2 = (r2, e, t) => qe2(r2, typeof e != "symbol" ? e + "" : e, t);
var Gn = class extends m {
  constructor(e, t) {
    super(e, t), this.relayer = e, this.logger = t, V2(this, "events", new import_events3.EventEmitter()), V2(this, "name", At2), V2(this, "queue", /* @__PURE__ */ new Map()), V2(this, "publishTimeout", (0, import_time2.toMiliseconds)(import_time2.ONE_MINUTE)), V2(this, "initialPublishTimeout", (0, import_time2.toMiliseconds)(import_time2.ONE_SECOND * 15)), V2(this, "needsTransportRestart", false), V2(this, "publish", async (i3, s, n2) => {
      var o3;
      this.logger.debug("Publishing Payload"), this.logger.trace({ type: "method", method: "publish", params: { topic: i3, message: s, opts: n2 } });
      const a2 = (n2 == null ? void 0 : n2.ttl) || je2, c4 = ea(n2), h4 = (n2 == null ? void 0 : n2.prompt) || false, l4 = (n2 == null ? void 0 : n2.tag) || 0, d3 = (n2 == null ? void 0 : n2.id) || getBigIntRpcId().toString(), g2 = { topic: i3, message: s, opts: { ttl: a2, relay: c4, prompt: h4, tag: l4, id: d3, attestation: n2 == null ? void 0 : n2.attestation, tvf: n2 == null ? void 0 : n2.tvf } }, _ = `Failed to publish payload, please try again. id:${d3} tag:${l4}`;
      try {
        const u3 = new Promise(async (b3) => {
          const x3 = ({ id: D2 }) => {
            g2.opts.id === D2 && (this.removeRequestFromQueue(D2), this.relayer.events.removeListener(C2.publish, x3), b3(g2));
          };
          this.relayer.events.on(C2.publish, x3);
          const I4 = ni(new Promise((D2, j3) => {
            this.rpcPublish({ topic: i3, message: s, ttl: a2, prompt: h4, tag: l4, id: d3, attestation: n2 == null ? void 0 : n2.attestation, tvf: n2 == null ? void 0 : n2.tvf }).then(D2).catch((T4) => {
              this.logger.warn(T4, T4 == null ? void 0 : T4.message), j3(T4);
            });
          }), this.initialPublishTimeout, `Failed initial publish, retrying.... id:${d3} tag:${l4}`);
          try {
            await I4, this.events.removeListener(C2.publish, x3);
          } catch (D2) {
            this.queue.set(d3, Ge(Ie2({}, g2), { attempt: 1 })), this.logger.warn(D2, D2 == null ? void 0 : D2.message);
          }
        });
        this.logger.trace({ type: "method", method: "publish", params: { id: d3, topic: i3, message: s, opts: n2 } }), await ni(u3, this.publishTimeout, _);
      } catch (u3) {
        if (this.logger.debug("Failed to Publish Payload"), this.logger.error(u3), (o3 = n2 == null ? void 0 : n2.internal) != null && o3.throwOnFailedPublish) throw u3;
      } finally {
        this.queue.delete(d3);
      }
    }), V2(this, "on", (i3, s) => {
      this.events.on(i3, s);
    }), V2(this, "once", (i3, s) => {
      this.events.once(i3, s);
    }), V2(this, "off", (i3, s) => {
      this.events.off(i3, s);
    }), V2(this, "removeListener", (i3, s) => {
      this.events.removeListener(i3, s);
    }), this.relayer = e, this.logger = E(t, this.name), this.registerEventListeners();
  }
  get context() {
    return y(this.logger);
  }
  async rpcPublish(e) {
    var t, i3, s, n2;
    const { topic: o3, message: a2, ttl: c4 = je2, prompt: h4, tag: l4, id: d3, attestation: g2, tvf: _ } = e, u3 = { method: na(ea().protocol).publish, params: Ie2({ topic: o3, message: a2, ttl: c4, prompt: h4, tag: l4, attestation: g2 }, _), id: d3 };
    kt((t = u3.params) == null ? void 0 : t.prompt) && ((i3 = u3.params) == null || delete i3.prompt), kt((s = u3.params) == null ? void 0 : s.tag) && ((n2 = u3.params) == null || delete n2.tag), this.logger.debug("Outgoing Relay Payload"), this.logger.trace({ type: "message", direction: "outgoing", request: u3 });
    const b3 = await this.relayer.request(u3);
    return this.relayer.events.emit(C2.publish, e), this.logger.debug("Successfully Published Payload"), b3;
  }
  removeRequestFromQueue(e) {
    this.queue.delete(e);
  }
  checkQueue() {
    this.queue.forEach(async (e, t) => {
      const i3 = e.attempt + 1;
      this.queue.set(t, Ge(Ie2({}, e), { attempt: i3 }));
      const { topic: s, message: n2, opts: o3, attestation: a2 } = e;
      this.logger.warn({}, `Publisher: queue->publishing: ${e.opts.id}, tag: ${e.opts.tag}, attempt: ${i3}`), await this.rpcPublish(Ge(Ie2({}, e), { topic: s, message: n2, ttl: o3.ttl, prompt: o3.prompt, tag: o3.tag, id: o3.id, attestation: a2, tvf: o3.tvf })), this.logger.warn({}, `Publisher: queue->published: ${e.opts.id}`);
    });
  }
  registerEventListeners() {
    this.relayer.core.heartbeat.on(r.pulse, () => {
      if (this.needsTransportRestart) {
        this.needsTransportRestart = false, this.relayer.events.emit(C2.connection_stalled);
        return;
      }
      this.checkQueue();
    }), this.relayer.on(C2.message_ack, (e) => {
      this.removeRequestFromQueue(e.id.toString());
    });
  }
};
var Wn = Object.defineProperty;
var Hn2 = (r2, e, t) => e in r2 ? Wn(r2, e, { enumerable: true, configurable: true, writable: true, value: t }) : r2[e] = t;
var ne2 = (r2, e, t) => Hn2(r2, typeof e != "symbol" ? e + "" : e, t);
var Yn = class {
  constructor() {
    ne2(this, "map", /* @__PURE__ */ new Map()), ne2(this, "set", (e, t) => {
      const i3 = this.get(e);
      this.exists(e, t) || this.map.set(e, [...i3, t]);
    }), ne2(this, "get", (e) => this.map.get(e) || []), ne2(this, "exists", (e, t) => this.get(e).includes(t)), ne2(this, "delete", (e, t) => {
      if (typeof t > "u") {
        this.map.delete(e);
        return;
      }
      if (!this.map.has(e)) return;
      const i3 = this.get(e);
      if (!this.exists(e, t)) return;
      const s = i3.filter((n2) => n2 !== t);
      if (!s.length) {
        this.map.delete(e);
        return;
      }
      this.map.set(e, s);
    }), ne2(this, "clear", () => {
      this.map.clear();
    });
  }
  get topics() {
    return Array.from(this.map.keys());
  }
};
var Jn2 = Object.defineProperty;
var Xn = Object.defineProperties;
var Zn = Object.getOwnPropertyDescriptors;
var Ti2 = Object.getOwnPropertySymbols;
var Qn2 = Object.prototype.hasOwnProperty;
var eo2 = Object.prototype.propertyIsEnumerable;
var We = (r2, e, t) => e in r2 ? Jn2(r2, e, { enumerable: true, configurable: true, writable: true, value: t }) : r2[e] = t;
var ge2 = (r2, e) => {
  for (var t in e || (e = {})) Qn2.call(e, t) && We(r2, t, e[t]);
  if (Ti2) for (var t of Ti2(e)) eo2.call(e, t) && We(r2, t, e[t]);
  return r2;
};
var He2 = (r2, e) => Xn(r2, Zn(e));
var f3 = (r2, e, t) => We(r2, typeof e != "symbol" ? e + "" : e, t);
var Ci2 = class extends P {
  constructor(e, t) {
    super(e, t), this.relayer = e, this.logger = t, f3(this, "subscriptions", /* @__PURE__ */ new Map()), f3(this, "topicMap", new Yn()), f3(this, "events", new import_events3.EventEmitter()), f3(this, "name", Ut2), f3(this, "version", Ft), f3(this, "pending", /* @__PURE__ */ new Map()), f3(this, "cached", []), f3(this, "initialized", false), f3(this, "storagePrefix", B), f3(this, "subscribeTimeout", (0, import_time2.toMiliseconds)(import_time2.ONE_MINUTE)), f3(this, "initialSubscribeTimeout", (0, import_time2.toMiliseconds)(import_time2.ONE_SECOND * 15)), f3(this, "clientId"), f3(this, "batchSubscribeTopicsLimit", 500), f3(this, "init", async () => {
      this.initialized || (this.logger.trace("Initialized"), this.registerEventListeners(), await this.restore()), this.initialized = true;
    }), f3(this, "subscribe", async (i3, s) => {
      this.isInitialized(), this.logger.debug("Subscribing Topic"), this.logger.trace({ type: "method", method: "subscribe", params: { topic: i3, opts: s } });
      try {
        const n2 = ea(s), o3 = { topic: i3, relay: n2, transportType: s == null ? void 0 : s.transportType };
        this.pending.set(i3, o3);
        const a2 = await this.rpcSubscribe(i3, n2, s);
        return typeof a2 == "string" && (this.onSubscribe(a2, o3), this.logger.debug("Successfully Subscribed Topic"), this.logger.trace({ type: "method", method: "subscribe", params: { topic: i3, opts: s } })), a2;
      } catch (n2) {
        throw this.logger.debug("Failed to Subscribe Topic"), this.logger.error(n2), n2;
      }
    }), f3(this, "unsubscribe", async (i3, s) => {
      this.isInitialized(), typeof (s == null ? void 0 : s.id) < "u" ? await this.unsubscribeById(i3, s.id, s) : await this.unsubscribeByTopic(i3, s);
    }), f3(this, "isSubscribed", (i3) => new Promise((s) => {
      s(this.topicMap.topics.includes(i3));
    })), f3(this, "isKnownTopic", (i3) => new Promise((s) => {
      s(this.topicMap.topics.includes(i3) || this.pending.has(i3) || this.cached.some((n2) => n2.topic === i3));
    })), f3(this, "on", (i3, s) => {
      this.events.on(i3, s);
    }), f3(this, "once", (i3, s) => {
      this.events.once(i3, s);
    }), f3(this, "off", (i3, s) => {
      this.events.off(i3, s);
    }), f3(this, "removeListener", (i3, s) => {
      this.events.removeListener(i3, s);
    }), f3(this, "start", async () => {
      await this.onConnect();
    }), f3(this, "stop", async () => {
      await this.onDisconnect();
    }), f3(this, "restart", async () => {
      await this.restore(), await this.onRestart();
    }), f3(this, "checkPending", async () => {
      if (this.pending.size === 0 && (!this.initialized || !this.relayer.connected)) return;
      const i3 = [];
      this.pending.forEach((s) => {
        i3.push(s);
      }), await this.batchSubscribe(i3);
    }), f3(this, "registerEventListeners", () => {
      this.relayer.core.heartbeat.on(r.pulse, async () => {
        await this.checkPending();
      }), this.events.on($.created, async (i3) => {
        const s = $.created;
        this.logger.info(`Emitting ${s}`), this.logger.debug({ type: "event", event: s, data: i3 }), await this.persist();
      }), this.events.on($.deleted, async (i3) => {
        const s = $.deleted;
        this.logger.info(`Emitting ${s}`), this.logger.debug({ type: "event", event: s, data: i3 }), await this.persist();
      });
    }), this.relayer = e, this.logger = E(t, this.name), this.clientId = "";
  }
  get context() {
    return y(this.logger);
  }
  get storageKey() {
    return this.storagePrefix + this.version + this.relayer.core.customStoragePrefix + "//" + this.name;
  }
  get length() {
    return this.subscriptions.size;
  }
  get ids() {
    return Array.from(this.subscriptions.keys());
  }
  get values() {
    return Array.from(this.subscriptions.values());
  }
  get topics() {
    return this.topicMap.topics;
  }
  get hasAnyTopics() {
    return this.topicMap.topics.length > 0 || this.pending.size > 0 || this.cached.length > 0 || this.subscriptions.size > 0;
  }
  hasSubscription(e, t) {
    let i3 = false;
    try {
      i3 = this.getSubscription(e).topic === t;
    } catch {
    }
    return i3;
  }
  reset() {
    this.cached = [], this.initialized = true;
  }
  onDisable() {
    this.values.length > 0 && (this.cached = this.values), this.subscriptions.clear(), this.topicMap.clear();
  }
  async unsubscribeByTopic(e, t) {
    const i3 = this.topicMap.get(e);
    await Promise.all(i3.map(async (s) => await this.unsubscribeById(e, s, t)));
  }
  async unsubscribeById(e, t, i3) {
    this.logger.debug("Unsubscribing Topic"), this.logger.trace({ type: "method", method: "unsubscribe", params: { topic: e, id: t, opts: i3 } });
    try {
      const s = ea(i3);
      await this.restartToComplete({ topic: e, id: t, relay: s }), await this.rpcUnsubscribe(e, t, s);
      const n2 = Kt("USER_DISCONNECTED", `${this.name}, ${e}`);
      await this.onUnsubscribe(e, t, n2), this.logger.debug("Successfully Unsubscribed Topic"), this.logger.trace({ type: "method", method: "unsubscribe", params: { topic: e, id: t, opts: i3 } });
    } catch (s) {
      throw this.logger.debug("Failed to Unsubscribe Topic"), this.logger.error(s), s;
    }
  }
  async rpcSubscribe(e, t, i3) {
    var s;
    (!i3 || (i3 == null ? void 0 : i3.transportType) === Q2.relay) && await this.restartToComplete({ topic: e, id: e, relay: t });
    const n2 = { method: na(t.protocol).subscribe, params: { topic: e } };
    this.logger.debug("Outgoing Relay Payload"), this.logger.trace({ type: "payload", direction: "outgoing", request: n2 });
    const o3 = (s = i3 == null ? void 0 : i3.internal) == null ? void 0 : s.throwOnFailedPublish;
    try {
      const a2 = await this.getSubscriptionId(e);
      if ((i3 == null ? void 0 : i3.transportType) === Q2.link_mode) return setTimeout(() => {
        (this.relayer.connected || this.relayer.connecting) && this.relayer.request(n2).catch((l4) => this.logger.warn(l4));
      }, (0, import_time2.toMiliseconds)(import_time2.ONE_SECOND)), a2;
      const c4 = new Promise(async (l4) => {
        const d3 = (g2) => {
          g2.topic === e && (this.events.removeListener($.created, d3), l4(g2.id));
        };
        this.events.on($.created, d3);
        try {
          const g2 = await ni(new Promise((_, u3) => {
            this.relayer.request(n2).catch((b3) => {
              this.logger.warn(b3, b3 == null ? void 0 : b3.message), u3(b3);
            }).then(_);
          }), this.initialSubscribeTimeout, `Subscribing to ${e} failed, please try again`);
          this.events.removeListener($.created, d3), l4(g2);
        } catch {
        }
      }), h4 = await ni(c4, this.subscribeTimeout, `Subscribing to ${e} failed, please try again`);
      if (!h4 && o3) throw new Error(`Subscribing to ${e} failed, please try again`);
      return h4 ? a2 : null;
    } catch (a2) {
      if (this.logger.debug("Outgoing Relay Subscribe Payload stalled"), this.relayer.events.emit(C2.connection_stalled), o3) throw a2;
    }
    return null;
  }
  async rpcBatchSubscribe(e) {
    if (!e.length) return;
    const t = e[0].relay, i3 = { method: na(t.protocol).batchSubscribe, params: { topics: e.map((s) => s.topic) } };
    this.logger.debug("Outgoing Relay Payload"), this.logger.trace({ type: "payload", direction: "outgoing", request: i3 });
    try {
      await await ni(new Promise((s) => {
        this.relayer.request(i3).catch((n2) => this.logger.warn(n2)).then(s);
      }), this.subscribeTimeout, "rpcBatchSubscribe failed, please try again");
    } catch {
      this.relayer.events.emit(C2.connection_stalled);
    }
  }
  async rpcBatchFetchMessages(e) {
    if (!e.length) return;
    const t = e[0].relay, i3 = { method: na(t.protocol).batchFetchMessages, params: { topics: e.map((n2) => n2.topic) } };
    this.logger.debug("Outgoing Relay Payload"), this.logger.trace({ type: "payload", direction: "outgoing", request: i3 });
    let s;
    try {
      s = await await ni(new Promise((n2, o3) => {
        this.relayer.request(i3).catch((a2) => {
          this.logger.warn(a2), o3(a2);
        }).then(n2);
      }), this.subscribeTimeout, "rpcBatchFetchMessages failed, please try again");
    } catch {
      this.relayer.events.emit(C2.connection_stalled);
    }
    return s;
  }
  rpcUnsubscribe(e, t, i3) {
    const s = { method: na(i3.protocol).unsubscribe, params: { topic: e, id: t } };
    return this.logger.debug("Outgoing Relay Payload"), this.logger.trace({ type: "payload", direction: "outgoing", request: s }), this.relayer.request(s);
  }
  onSubscribe(e, t) {
    this.setSubscription(e, He2(ge2({}, t), { id: e })), this.pending.delete(t.topic);
  }
  onBatchSubscribe(e) {
    e.length && e.forEach((t) => {
      this.setSubscription(t.id, ge2({}, t)), this.pending.delete(t.topic);
    });
  }
  async onUnsubscribe(e, t, i3) {
    this.events.removeAllListeners(t), this.hasSubscription(t, e) && this.deleteSubscription(t, i3), await this.relayer.messages.del(e);
  }
  async setRelayerSubscriptions(e) {
    await this.relayer.core.storage.setItem(this.storageKey, e);
  }
  async getRelayerSubscriptions() {
    return await this.relayer.core.storage.getItem(this.storageKey);
  }
  setSubscription(e, t) {
    this.logger.debug("Setting subscription"), this.logger.trace({ type: "method", method: "setSubscription", id: e, subscription: t }), this.addSubscription(e, t);
  }
  addSubscription(e, t) {
    this.subscriptions.set(e, ge2({}, t)), this.topicMap.set(t.topic, e), this.events.emit($.created, t);
  }
  getSubscription(e) {
    this.logger.debug("Getting subscription"), this.logger.trace({ type: "method", method: "getSubscription", id: e });
    const t = this.subscriptions.get(e);
    if (!t) {
      const { message: i3 } = Et("NO_MATCHING_KEY", `${this.name}: ${e}`);
      throw new Error(i3);
    }
    return t;
  }
  deleteSubscription(e, t) {
    this.logger.debug("Deleting subscription"), this.logger.trace({ type: "method", method: "deleteSubscription", id: e, reason: t });
    const i3 = this.getSubscription(e);
    this.subscriptions.delete(e), this.topicMap.delete(i3.topic, e), this.events.emit($.deleted, He2(ge2({}, i3), { reason: t }));
  }
  async persist() {
    await this.setRelayerSubscriptions(this.values), this.events.emit($.sync);
  }
  async onRestart() {
    if (this.cached.length) {
      const e = [...this.cached], t = Math.ceil(this.cached.length / this.batchSubscribeTopicsLimit);
      for (let i3 = 0; i3 < t; i3++) {
        const s = e.splice(0, this.batchSubscribeTopicsLimit);
        await this.batchSubscribe(s);
      }
    }
    this.events.emit($.resubscribed);
  }
  async restore() {
    try {
      const e = await this.getRelayerSubscriptions();
      if (typeof e > "u" || !e.length) return;
      if (this.subscriptions.size) {
        const { message: t } = Et("RESTORE_WILL_OVERRIDE", this.name);
        throw this.logger.error(t), this.logger.error(`${this.name}: ${JSON.stringify(this.values)}`), new Error(t);
      }
      this.cached = e, this.logger.debug(`Successfully Restored subscriptions for ${this.name}`), this.logger.trace({ type: "method", method: "restore", subscriptions: this.values });
    } catch (e) {
      this.logger.debug(`Failed to Restore subscriptions for ${this.name}`), this.logger.error(e);
    }
  }
  async batchSubscribe(e) {
    e.length && (await this.rpcBatchSubscribe(e), this.onBatchSubscribe(await Promise.all(e.map(async (t) => He2(ge2({}, t), { id: await this.getSubscriptionId(t.topic) })))));
  }
  async batchFetchMessages(e) {
    if (!e.length) return;
    this.logger.trace(`Fetching batch messages for ${e.length} subscriptions`);
    const t = await this.rpcBatchFetchMessages(e);
    t && t.messages && (await pi((0, import_time2.toMiliseconds)(import_time2.ONE_SECOND)), await this.relayer.handleBatchMessageEvents(t.messages));
  }
  async onConnect() {
    await this.restart(), this.reset();
  }
  onDisconnect() {
    this.onDisable();
  }
  isInitialized() {
    if (!this.initialized) {
      const { message: e } = Et("NOT_INITIALIZED", this.name);
      throw new Error(e);
    }
  }
  async restartToComplete(e) {
    !this.relayer.connected && !this.relayer.connecting && (this.cached.push(e), await this.relayer.transportOpen());
  }
  async getClientId() {
    return this.clientId || (this.clientId = await this.relayer.core.crypto.getClientId()), this.clientId;
  }
  async getSubscriptionId(e) {
    return zc(e + await this.getClientId());
  }
};
var to2 = Object.defineProperty;
var Pi2 = Object.getOwnPropertySymbols;
var io2 = Object.prototype.hasOwnProperty;
var so2 = Object.prototype.propertyIsEnumerable;
var Ye2 = (r2, e, t) => e in r2 ? to2(r2, e, { enumerable: true, configurable: true, writable: true, value: t }) : r2[e] = t;
var Si2 = (r2, e) => {
  for (var t in e || (e = {})) io2.call(e, t) && Ye2(r2, t, e[t]);
  if (Pi2) for (var t of Pi2(e)) so2.call(e, t) && Ye2(r2, t, e[t]);
  return r2;
};
var y3 = (r2, e, t) => Ye2(r2, typeof e != "symbol" ? e + "" : e, t);
var Oi2 = class extends d {
  constructor(e) {
    super(e), y3(this, "protocol", "wc"), y3(this, "version", 2), y3(this, "core"), y3(this, "logger"), y3(this, "events", new import_events3.EventEmitter()), y3(this, "provider"), y3(this, "messages"), y3(this, "subscriber"), y3(this, "publisher"), y3(this, "name", $t2), y3(this, "transportExplicitlyClosed", false), y3(this, "initialized", false), y3(this, "connectionAttemptInProgress", false), y3(this, "relayUrl"), y3(this, "projectId"), y3(this, "packageName"), y3(this, "bundleId"), y3(this, "hasExperiencedNetworkDisruption", false), y3(this, "pingTimeout"), y3(this, "heartBeatTimeout", (0, import_time2.toMiliseconds)(import_time2.THIRTY_SECONDS + import_time2.FIVE_SECONDS)), y3(this, "reconnectTimeout"), y3(this, "connectPromise"), y3(this, "reconnectInProgress", false), y3(this, "requestsInFlight", []), y3(this, "connectTimeout", (0, import_time2.toMiliseconds)(import_time2.ONE_SECOND * 15)), y3(this, "request", async (t) => {
      var i3, s;
      this.logger.debug("Publishing Request Payload");
      const n2 = t.id || getBigIntRpcId().toString();
      await this.toEstablishConnection();
      try {
        this.logger.trace({ id: n2, method: t.method, topic: (i3 = t.params) == null ? void 0 : i3.topic }, "relayer.request - publishing...");
        const o3 = `${n2}:${((s = t.params) == null ? void 0 : s.tag) || ""}`;
        this.requestsInFlight.push(o3);
        const a2 = await this.provider.request(t);
        return this.requestsInFlight = this.requestsInFlight.filter((c4) => c4 !== o3), a2;
      } catch (o3) {
        throw this.logger.debug(`Failed to Publish Request: ${n2}`), o3;
      }
    }), y3(this, "resetPingTimeout", () => {
      Ye() && (clearTimeout(this.pingTimeout), this.pingTimeout = setTimeout(() => {
        var t, i3, s, n2;
        try {
          this.logger.debug({}, "pingTimeout: Connection stalled, terminating..."), (n2 = (s = (i3 = (t = this.provider) == null ? void 0 : t.connection) == null ? void 0 : i3.socket) == null ? void 0 : s.terminate) == null || n2.call(s);
        } catch (o3) {
          this.logger.warn(o3, o3 == null ? void 0 : o3.message);
        }
      }, this.heartBeatTimeout));
    }), y3(this, "onPayloadHandler", (t) => {
      this.onProviderPayload(t), this.resetPingTimeout();
    }), y3(this, "onConnectHandler", () => {
      this.logger.warn({}, "Relayer connected 🛜"), this.startPingTimeout(), this.events.emit(C2.connect);
    }), y3(this, "onDisconnectHandler", () => {
      this.logger.warn({}, "Relayer disconnected 🛑"), this.requestsInFlight = [], this.onProviderDisconnect();
    }), y3(this, "onProviderErrorHandler", (t) => {
      this.logger.fatal(`Fatal socket error: ${t.message}`), this.events.emit(C2.error, t), this.logger.fatal("Fatal socket error received, closing transport"), this.transportClose();
    }), y3(this, "registerProviderListeners", () => {
      this.provider.on(L.payload, this.onPayloadHandler), this.provider.on(L.connect, this.onConnectHandler), this.provider.on(L.disconnect, this.onDisconnectHandler), this.provider.on(L.error, this.onProviderErrorHandler);
    }), this.core = e.core, this.logger = typeof e.logger < "u" && typeof e.logger != "string" ? E(e.logger, this.name) : (0, import_pino.default)(k({ level: e.logger || Nt2 })), this.messages = new Ei2(this.logger, e.core), this.subscriber = new Ci2(this, this.logger), this.publisher = new Gn(this, this.logger), this.relayUrl = (e == null ? void 0 : e.relayUrl) || Ue2, this.projectId = e.projectId, Ms() ? this.packageName = qs() : Vs() && (this.bundleId = qs()), this.provider = {};
  }
  async init() {
    this.logger.trace("Initialized"), this.registerEventListeners(), await Promise.all([this.messages.init(), this.subscriber.init()]), this.initialized = true, this.transportOpen().catch((e) => this.logger.warn(e, e == null ? void 0 : e.message));
  }
  get context() {
    return y(this.logger);
  }
  get connected() {
    var e, t, i3;
    return ((i3 = (t = (e = this.provider) == null ? void 0 : e.connection) == null ? void 0 : t.socket) == null ? void 0 : i3.readyState) === 1 || false;
  }
  get connecting() {
    var e, t, i3;
    return ((i3 = (t = (e = this.provider) == null ? void 0 : e.connection) == null ? void 0 : t.socket) == null ? void 0 : i3.readyState) === 0 || this.connectPromise !== void 0 || false;
  }
  async publish(e, t, i3) {
    this.isInitialized(), await this.publisher.publish(e, t, i3), await this.recordMessageEvent({ topic: e, message: t, publishedAt: Date.now(), transportType: Q2.relay }, le2.outbound);
  }
  async subscribe(e, t) {
    var i3, s, n2;
    this.isInitialized(), (!(t != null && t.transportType) || (t == null ? void 0 : t.transportType) === "relay") && await this.toEstablishConnection();
    const o3 = typeof ((i3 = t == null ? void 0 : t.internal) == null ? void 0 : i3.throwOnFailedPublish) > "u" ? true : (s = t == null ? void 0 : t.internal) == null ? void 0 : s.throwOnFailedPublish;
    let a2 = ((n2 = this.subscriber.topicMap.get(e)) == null ? void 0 : n2[0]) || "", c4;
    const h4 = (l4) => {
      l4.topic === e && (this.subscriber.off($.created, h4), c4());
    };
    return await Promise.all([new Promise((l4) => {
      c4 = l4, this.subscriber.on($.created, h4);
    }), new Promise(async (l4, d3) => {
      a2 = await this.subscriber.subscribe(e, Si2({ internal: { throwOnFailedPublish: o3 } }, t)).catch((g2) => {
        o3 && d3(g2);
      }) || a2, l4();
    })]), a2;
  }
  async unsubscribe(e, t) {
    this.isInitialized(), await this.subscriber.unsubscribe(e, t);
  }
  on(e, t) {
    this.events.on(e, t);
  }
  once(e, t) {
    this.events.once(e, t);
  }
  off(e, t) {
    this.events.off(e, t);
  }
  removeListener(e, t) {
    this.events.removeListener(e, t);
  }
  async transportDisconnect() {
    this.provider.disconnect && (this.hasExperiencedNetworkDisruption || this.connected) ? await ni(this.provider.disconnect(), 2e3, "provider.disconnect()").catch(() => this.onProviderDisconnect()) : this.onProviderDisconnect();
  }
  async transportClose() {
    this.transportExplicitlyClosed = true, await this.transportDisconnect();
  }
  async transportOpen(e) {
    if (!this.subscriber.hasAnyTopics) {
      this.logger.warn("Starting WS connection skipped because the client has no topics to work with.");
      return;
    }
    if (this.connectPromise ? (this.logger.debug({}, "Waiting for existing connection attempt to resolve..."), await this.connectPromise, this.logger.debug({}, "Existing connection attempt resolved")) : (this.connectPromise = new Promise(async (t, i3) => {
      await this.connect(e).then(t).catch(i3).finally(() => {
        this.connectPromise = void 0;
      });
    }), await this.connectPromise), !this.connected) throw new Error(`Couldn't establish socket connection to the relay server: ${this.relayUrl}`);
  }
  async restartTransport(e) {
    this.logger.debug({}, "Restarting transport..."), !this.connectionAttemptInProgress && (this.relayUrl = e || this.relayUrl, await this.confirmOnlineStateOrThrow(), await this.transportClose(), await this.transportOpen());
  }
  async confirmOnlineStateOrThrow() {
    if (!await ja()) throw new Error("No internet connection detected. Please restart your network and try again.");
  }
  async handleBatchMessageEvents(e) {
    if ((e == null ? void 0 : e.length) === 0) {
      this.logger.trace("Batch message events is empty. Ignoring...");
      return;
    }
    const t = e.sort((i3, s) => i3.publishedAt - s.publishedAt);
    this.logger.debug(`Batch of ${t.length} message events sorted`);
    for (const i3 of t) try {
      await this.onMessageEvent(i3);
    } catch (s) {
      this.logger.warn(s, "Error while processing batch message event: " + (s == null ? void 0 : s.message));
    }
    this.logger.trace(`Batch of ${t.length} message events processed`);
  }
  async onLinkMessageEvent(e, t) {
    const { topic: i3 } = e;
    if (!t.sessionExists) {
      const s = ii(import_time2.FIVE_MINUTES), n2 = { topic: i3, expiry: s, relay: { protocol: "irn" }, active: false };
      await this.core.pairing.pairings.set(i3, n2);
    }
    this.events.emit(C2.message, e), await this.recordMessageEvent(e, le2.inbound);
  }
  async connect(e) {
    await this.confirmOnlineStateOrThrow(), e && e !== this.relayUrl && (this.relayUrl = e, await this.transportDisconnect()), this.connectionAttemptInProgress = true, this.transportExplicitlyClosed = false;
    let t = 1;
    for (; t < 6; ) {
      try {
        if (this.transportExplicitlyClosed) break;
        this.logger.debug({}, `Connecting to ${this.relayUrl}, attempt: ${t}...`), await this.createProvider(), await new Promise(async (i3, s) => {
          const n2 = () => {
            s(new Error("Connection interrupted while trying to connect"));
          };
          this.provider.once(L.disconnect, n2), await ni(new Promise((o3, a2) => {
            this.provider.connect().then(o3).catch(a2);
          }), this.connectTimeout, `Socket stalled when trying to connect to ${this.relayUrl}`).catch((o3) => {
            s(o3);
          }).finally(() => {
            this.provider.off(L.disconnect, n2), clearTimeout(this.reconnectTimeout);
          }), await new Promise(async (o3, a2) => {
            const c4 = () => {
              s(new Error("Connection interrupted while trying to subscribe"));
            };
            this.provider.once(L.disconnect, c4), await this.subscriber.start().then(o3).catch(a2).finally(() => {
              this.provider.off(L.disconnect, c4);
            });
          }), this.hasExperiencedNetworkDisruption = false, i3();
        });
      } catch (i3) {
        await this.subscriber.stop();
        const s = i3;
        this.logger.warn({}, s.message), this.hasExperiencedNetworkDisruption = true;
      } finally {
        this.connectionAttemptInProgress = false;
      }
      if (this.connected) {
        this.logger.debug({}, `Connected to ${this.relayUrl} successfully on attempt: ${t}`);
        break;
      }
      await new Promise((i3) => setTimeout(i3, (0, import_time2.toMiliseconds)(t * 1))), t++;
    }
  }
  startPingTimeout() {
    var e, t, i3, s, n2;
    if (Ye()) try {
      (t = (e = this.provider) == null ? void 0 : e.connection) != null && t.socket && ((n2 = (s = (i3 = this.provider) == null ? void 0 : i3.connection) == null ? void 0 : s.socket) == null || n2.on("ping", () => {
        this.resetPingTimeout();
      })), this.resetPingTimeout();
    } catch (o3) {
      this.logger.warn(o3, o3 == null ? void 0 : o3.message);
    }
  }
  async createProvider() {
    this.provider.connection && this.unregisterProviderListeners();
    const e = await this.core.crypto.signJWT(this.relayUrl);
    this.provider = new o(new f(zs({ sdkVersion: _e2, protocol: this.protocol, version: this.version, relayUrl: this.relayUrl, projectId: this.projectId, auth: e, useOnCloseEvent: true, bundleId: this.bundleId, packageName: this.packageName }))), this.registerProviderListeners();
  }
  async recordMessageEvent(e, t) {
    const { topic: i3, message: s } = e;
    await this.messages.set(i3, s, t);
  }
  async shouldIgnoreMessageEvent(e) {
    const { topic: t, message: i3 } = e;
    if (!i3 || i3.length === 0) return this.logger.warn(`Ignoring invalid/empty message: ${i3}`), true;
    if (!await this.subscriber.isKnownTopic(t)) return this.logger.warn(`Ignoring message for unknown topic ${t}`), true;
    const s = this.messages.has(t, i3);
    return s && this.logger.warn(`Ignoring duplicate message: ${i3}`), s;
  }
  async onProviderPayload(e) {
    if (this.logger.debug("Incoming Relay Payload"), this.logger.trace({ type: "payload", direction: "incoming", payload: e }), isJsonRpcRequest(e)) {
      if (!e.method.endsWith(zt2)) return;
      const t = e.params, { topic: i3, message: s, publishedAt: n2, attestation: o3 } = t.data, a2 = { topic: i3, message: s, publishedAt: n2, transportType: Q2.relay, attestation: o3 };
      this.logger.debug("Emitting Relayer Payload"), this.logger.trace(Si2({ type: "event", event: t.id }, a2)), this.events.emit(t.id, a2), await this.acknowledgePayload(e), await this.onMessageEvent(a2);
    } else isJsonRpcResponse(e) && this.events.emit(C2.message_ack, e);
  }
  async onMessageEvent(e) {
    await this.shouldIgnoreMessageEvent(e) || (await this.recordMessageEvent(e, le2.inbound), this.events.emit(C2.message, e));
  }
  async acknowledgePayload(e) {
    const t = formatJsonRpcResult(e.id, true);
    await this.provider.connection.send(t);
  }
  unregisterProviderListeners() {
    this.provider.off(L.payload, this.onPayloadHandler), this.provider.off(L.connect, this.onConnectHandler), this.provider.off(L.disconnect, this.onDisconnectHandler), this.provider.off(L.error, this.onProviderErrorHandler), clearTimeout(this.pingTimeout);
  }
  async registerEventListeners() {
    let e = await ja();
    ka(async (t) => {
      e !== t && (e = t, t ? await this.transportOpen().catch((i3) => this.logger.error(i3, i3 == null ? void 0 : i3.message)) : (this.hasExperiencedNetworkDisruption = true, await this.transportDisconnect(), this.transportExplicitlyClosed = false));
    }), this.core.heartbeat.on(r.pulse, async () => {
      if (!this.transportExplicitlyClosed && !this.connected && Pa()) try {
        await this.confirmOnlineStateOrThrow(), await this.transportOpen();
      } catch (t) {
        this.logger.warn(t, t == null ? void 0 : t.message);
      }
    });
  }
  async onProviderDisconnect() {
    clearTimeout(this.pingTimeout), this.events.emit(C2.disconnect), this.connectionAttemptInProgress = false, !this.reconnectInProgress && (this.reconnectInProgress = true, await this.subscriber.stop(), this.subscriber.hasAnyTopics && (this.transportExplicitlyClosed || (this.reconnectTimeout = setTimeout(async () => {
      await this.transportOpen().catch((e) => this.logger.error(e, e == null ? void 0 : e.message)), this.reconnectTimeout = void 0, this.reconnectInProgress = false;
    }, (0, import_time2.toMiliseconds)(Lt2)))));
  }
  isInitialized() {
    if (!this.initialized) {
      const { message: e } = Et("NOT_INITIALIZED", this.name);
      throw new Error(e);
    }
  }
  async toEstablishConnection() {
    if (await this.confirmOnlineStateOrThrow(), !this.connected) {
      if (this.connectPromise) {
        await this.connectPromise;
        return;
      }
      await this.connect();
    }
  }
};
function ro2(r2, e) {
  return r2 === e || Number.isNaN(r2) && Number.isNaN(e);
}
function Ri2(r2) {
  return Object.getOwnPropertySymbols(r2).filter((e) => Object.prototype.propertyIsEnumerable.call(r2, e));
}
function Ai2(r2) {
  return r2 == null ? r2 === void 0 ? "[object Undefined]" : "[object Null]" : Object.prototype.toString.call(r2);
}
var no2 = "[object RegExp]";
var oo2 = "[object String]";
var ao2 = "[object Number]";
var co2 = "[object Boolean]";
var xi2 = "[object Arguments]";
var ho2 = "[object Symbol]";
var lo2 = "[object Date]";
var uo2 = "[object Map]";
var go2 = "[object Set]";
var po2 = "[object Array]";
var yo2 = "[object Function]";
var bo2 = "[object ArrayBuffer]";
var Je = "[object Object]";
var mo2 = "[object Error]";
var fo2 = "[object DataView]";
var Do2 = "[object Uint8Array]";
var vo2 = "[object Uint8ClampedArray]";
var wo2 = "[object Uint16Array]";
var _o2 = "[object Uint32Array]";
var Eo2 = "[object BigUint64Array]";
var Io2 = "[object Int8Array]";
var To2 = "[object Int16Array]";
var Co2 = "[object Int32Array]";
var Po3 = "[object BigInt64Array]";
var So2 = "[object Float32Array]";
var Oo2 = "[object Float64Array]";
function Ro2() {
}
function Ni2(r2) {
  if (!r2 || typeof r2 != "object") return false;
  const e = Object.getPrototypeOf(r2);
  return e === null || e === Object.prototype || Object.getPrototypeOf(e) === null ? Object.prototype.toString.call(r2) === "[object Object]" : false;
}
function Ao2(r2, e, t) {
  return pe2(r2, e, void 0, void 0, void 0, void 0, t);
}
function pe2(r2, e, t, i3, s, n2, o3) {
  const a2 = o3(r2, e, t, i3, s, n2);
  if (a2 !== void 0) return a2;
  if (typeof r2 == typeof e) switch (typeof r2) {
    case "bigint":
    case "string":
    case "boolean":
    case "symbol":
    case "undefined":
      return r2 === e;
    case "number":
      return r2 === e || Object.is(r2, e);
    case "function":
      return r2 === e;
    case "object":
      return ye2(r2, e, n2, o3);
  }
  return ye2(r2, e, n2, o3);
}
function ye2(r2, e, t, i3) {
  if (Object.is(r2, e)) return true;
  let s = Ai2(r2), n2 = Ai2(e);
  if (s === xi2 && (s = Je), n2 === xi2 && (n2 = Je), s !== n2) return false;
  switch (s) {
    case oo2:
      return r2.toString() === e.toString();
    case ao2: {
      const c4 = r2.valueOf(), h4 = e.valueOf();
      return ro2(c4, h4);
    }
    case co2:
    case lo2:
    case ho2:
      return Object.is(r2.valueOf(), e.valueOf());
    case no2:
      return r2.source === e.source && r2.flags === e.flags;
    case yo2:
      return r2 === e;
  }
  t = t ?? /* @__PURE__ */ new Map();
  const o3 = t.get(r2), a2 = t.get(e);
  if (o3 != null && a2 != null) return o3 === e;
  t.set(r2, e), t.set(e, r2);
  try {
    switch (s) {
      case uo2: {
        if (r2.size !== e.size) return false;
        for (const [c4, h4] of r2.entries()) if (!e.has(c4) || !pe2(h4, e.get(c4), c4, r2, e, t, i3)) return false;
        return true;
      }
      case go2: {
        if (r2.size !== e.size) return false;
        const c4 = Array.from(r2.values()), h4 = Array.from(e.values());
        for (let l4 = 0; l4 < c4.length; l4++) {
          const d3 = c4[l4], g2 = h4.findIndex((_) => pe2(d3, _, void 0, r2, e, t, i3));
          if (g2 === -1) return false;
          h4.splice(g2, 1);
        }
        return true;
      }
      case po2:
      case Do2:
      case vo2:
      case wo2:
      case _o2:
      case Eo2:
      case Io2:
      case To2:
      case Co2:
      case Po3:
      case So2:
      case Oo2: {
        if (typeof Buffer < "u" && Buffer.isBuffer(r2) !== Buffer.isBuffer(e) || r2.length !== e.length) return false;
        for (let c4 = 0; c4 < r2.length; c4++) if (!pe2(r2[c4], e[c4], c4, r2, e, t, i3)) return false;
        return true;
      }
      case bo2:
        return r2.byteLength !== e.byteLength ? false : ye2(new Uint8Array(r2), new Uint8Array(e), t, i3);
      case fo2:
        return r2.byteLength !== e.byteLength || r2.byteOffset !== e.byteOffset ? false : ye2(new Uint8Array(r2), new Uint8Array(e), t, i3);
      case mo2:
        return r2.name === e.name && r2.message === e.message;
      case Je: {
        if (!(ye2(r2.constructor, e.constructor, t, i3) || Ni2(r2) && Ni2(e))) return false;
        const h4 = [...Object.keys(r2), ...Ri2(r2)], l4 = [...Object.keys(e), ...Ri2(e)];
        if (h4.length !== l4.length) return false;
        for (let d3 = 0; d3 < h4.length; d3++) {
          const g2 = h4[d3], _ = r2[g2];
          if (!Object.hasOwn(e, g2)) return false;
          const u3 = e[g2];
          if (!pe2(_, u3, g2, r2, e, t, i3)) return false;
        }
        return true;
      }
      default:
        return false;
    }
  } finally {
    t.delete(r2), t.delete(e);
  }
}
function xo2(r2, e) {
  return Ao2(r2, e, Ro2);
}
var No2 = Object.defineProperty;
var $i2 = Object.getOwnPropertySymbols;
var $o2 = Object.prototype.hasOwnProperty;
var zo2 = Object.prototype.propertyIsEnumerable;
var Xe2 = (r2, e, t) => e in r2 ? No2(r2, e, { enumerable: true, configurable: true, writable: true, value: t }) : r2[e] = t;
var zi2 = (r2, e) => {
  for (var t in e || (e = {})) $o2.call(e, t) && Xe2(r2, t, e[t]);
  if ($i2) for (var t of $i2(e)) zo2.call(e, t) && Xe2(r2, t, e[t]);
  return r2;
};
var z = (r2, e, t) => Xe2(r2, typeof e != "symbol" ? e + "" : e, t);
var Li2 = class extends f2 {
  constructor(e, t, i3, s = B, n2 = void 0) {
    super(e, t, i3, s), this.core = e, this.logger = t, this.name = i3, z(this, "map", /* @__PURE__ */ new Map()), z(this, "version", kt2), z(this, "cached", []), z(this, "initialized", false), z(this, "getKey"), z(this, "storagePrefix", B), z(this, "recentlyDeleted", []), z(this, "recentlyDeletedLimit", 200), z(this, "init", async () => {
      this.initialized || (this.logger.trace("Initialized"), await this.restore(), this.cached.forEach((o3) => {
        this.getKey && o3 !== null && !kt(o3) ? this.map.set(this.getKey(o3), o3) : wa(o3) ? this.map.set(o3.id, o3) : xa(o3) && this.map.set(o3.topic, o3);
      }), this.cached = [], this.initialized = true);
    }), z(this, "set", async (o3, a2) => {
      this.isInitialized(), this.map.has(o3) ? await this.update(o3, a2) : (this.logger.debug("Setting value"), this.logger.trace({ type: "method", method: "set", key: o3, value: a2 }), this.map.set(o3, a2), await this.persist());
    }), z(this, "get", (o3) => (this.isInitialized(), this.logger.debug("Getting value"), this.logger.trace({ type: "method", method: "get", key: o3 }), this.getData(o3))), z(this, "getAll", (o3) => (this.isInitialized(), o3 ? this.values.filter((a2) => Object.keys(o3).every((c4) => xo2(a2[c4], o3[c4]))) : this.values)), z(this, "update", async (o3, a2) => {
      this.isInitialized(), this.logger.debug("Updating value"), this.logger.trace({ type: "method", method: "update", key: o3, update: a2 });
      const c4 = zi2(zi2({}, this.getData(o3)), a2);
      this.map.set(o3, c4), await this.persist();
    }), z(this, "delete", async (o3, a2) => {
      this.isInitialized(), this.map.has(o3) && (this.logger.debug("Deleting value"), this.logger.trace({ type: "method", method: "delete", key: o3, reason: a2 }), this.map.delete(o3), this.addToRecentlyDeleted(o3), await this.persist());
    }), this.logger = E(t, this.name), this.storagePrefix = s, this.getKey = n2;
  }
  get context() {
    return y(this.logger);
  }
  get storageKey() {
    return this.storagePrefix + this.version + this.core.customStoragePrefix + "//" + this.name;
  }
  get length() {
    return this.map.size;
  }
  get keys() {
    return Array.from(this.map.keys());
  }
  get values() {
    return Array.from(this.map.values());
  }
  addToRecentlyDeleted(e) {
    this.recentlyDeleted.push(e), this.recentlyDeleted.length >= this.recentlyDeletedLimit && this.recentlyDeleted.splice(0, this.recentlyDeletedLimit / 2);
  }
  async setDataStore(e) {
    await this.core.storage.setItem(this.storageKey, e);
  }
  async getDataStore() {
    return await this.core.storage.getItem(this.storageKey);
  }
  getData(e) {
    const t = this.map.get(e);
    if (!t) {
      if (this.recentlyDeleted.includes(e)) {
        const { message: s } = Et("MISSING_OR_INVALID", `Record was recently deleted - ${this.name}: ${e}`);
        throw this.logger.error(s), new Error(s);
      }
      const { message: i3 } = Et("NO_MATCHING_KEY", `${this.name}: ${e}`);
      throw this.logger.error(i3), new Error(i3);
    }
    return t;
  }
  async persist() {
    await this.setDataStore(this.values);
  }
  async restore() {
    try {
      const e = await this.getDataStore();
      if (typeof e > "u" || !e.length) return;
      if (this.map.size) {
        const { message: t } = Et("RESTORE_WILL_OVERRIDE", this.name);
        throw this.logger.error(t), new Error(t);
      }
      this.cached = e, this.logger.debug(`Successfully Restored value for ${this.name}`), this.logger.trace({ type: "method", method: "restore", value: this.values });
    } catch (e) {
      this.logger.debug(`Failed to Restore value for ${this.name}`), this.logger.error(e);
    }
  }
  isInitialized() {
    if (!this.initialized) {
      const { message: e } = Et("NOT_INITIALIZED", this.name);
      throw new Error(e);
    }
  }
};
var Lo2 = Object.defineProperty;
var ko2 = (r2, e, t) => e in r2 ? Lo2(r2, e, { enumerable: true, configurable: true, writable: true, value: t }) : r2[e] = t;
var p2 = (r2, e, t) => ko2(r2, typeof e != "symbol" ? e + "" : e, t);
var ki2 = class {
  constructor(e, t) {
    this.core = e, this.logger = t, p2(this, "name", Mt2), p2(this, "version", Kt2), p2(this, "events", new import_events3.default()), p2(this, "pairings"), p2(this, "initialized", false), p2(this, "storagePrefix", B), p2(this, "ignoredPayloadTypes", [ee]), p2(this, "registeredMethods", []), p2(this, "init", async () => {
      this.initialized || (await this.pairings.init(), await this.cleanup(), this.registerRelayerEvents(), this.registerExpirerEvents(), this.initialized = true, this.logger.trace("Initialized"));
    }), p2(this, "register", ({ methods: i3 }) => {
      this.isInitialized(), this.registeredMethods = [.../* @__PURE__ */ new Set([...this.registeredMethods, ...i3])];
    }), p2(this, "create", async (i3) => {
      this.isInitialized();
      const s = qc(), n2 = await this.core.crypto.setSymKey(s), o3 = ii(import_time2.FIVE_MINUTES), a2 = { protocol: xt2 }, c4 = { topic: n2, expiry: o3, relay: a2, active: false, methods: i3 == null ? void 0 : i3.methods }, h4 = oa({ protocol: this.core.protocol, version: this.core.version, topic: n2, symKey: s, relay: a2, expiryTimestamp: o3, methods: i3 == null ? void 0 : i3.methods });
      return this.events.emit(re.create, c4), this.core.expirer.set(n2, o3), await this.pairings.set(n2, c4), await this.core.relayer.subscribe(n2, { transportType: i3 == null ? void 0 : i3.transportType }), { topic: n2, uri: h4 };
    }), p2(this, "pair", async (i3) => {
      this.isInitialized();
      const s = this.core.eventClient.createEvent({ properties: { topic: i3 == null ? void 0 : i3.uri, trace: [G2.pairing_started] } });
      this.isValidPair(i3, s);
      const { topic: n2, symKey: o3, relay: a2, expiryTimestamp: c4, methods: h4 } = ra(i3.uri);
      s.props.properties.topic = n2, s.addTrace(G2.pairing_uri_validation_success), s.addTrace(G2.pairing_uri_not_expired);
      let l4;
      if (this.pairings.keys.includes(n2)) {
        if (l4 = this.pairings.get(n2), s.addTrace(G2.existing_pairing), l4.active) throw s.setError(Y2.active_pairing_already_exists), new Error(`Pairing already exists: ${n2}. Please try again with a new connection URI.`);
        s.addTrace(G2.pairing_not_expired);
      }
      const d3 = c4 || ii(import_time2.FIVE_MINUTES), g2 = { topic: n2, relay: a2, expiry: d3, active: false, methods: h4 };
      this.core.expirer.set(n2, d3), await this.pairings.set(n2, g2), s.addTrace(G2.store_new_pairing), i3.activatePairing && await this.activate({ topic: n2 }), this.events.emit(re.create, g2), s.addTrace(G2.emit_inactive_pairing), this.core.crypto.keychain.has(n2) || await this.core.crypto.setSymKey(o3, n2), s.addTrace(G2.subscribing_pairing_topic);
      try {
        await this.core.relayer.confirmOnlineStateOrThrow();
      } catch {
        s.setError(Y2.no_internet_connection);
      }
      try {
        await this.core.relayer.subscribe(n2, { relay: a2 });
      } catch (_) {
        throw s.setError(Y2.subscribe_pairing_topic_failure), _;
      }
      return s.addTrace(G2.subscribe_pairing_topic_success), g2;
    }), p2(this, "activate", async ({ topic: i3 }) => {
      this.isInitialized();
      const s = ii(import_time2.FIVE_MINUTES);
      this.core.expirer.set(i3, s), await this.pairings.update(i3, { active: true, expiry: s });
    }), p2(this, "ping", async (i3) => {
      this.isInitialized(), await this.isValidPing(i3), this.logger.warn("ping() is deprecated and will be removed in the next major release.");
      const { topic: s } = i3;
      if (this.pairings.keys.includes(s)) {
        const n2 = await this.sendRequest(s, "wc_pairingPing", {}), { done: o3, resolve: a2, reject: c4 } = ei();
        this.events.once(ci("pairing_ping", n2), ({ error: h4 }) => {
          h4 ? c4(h4) : a2();
        }), await o3();
      }
    }), p2(this, "updateExpiry", async ({ topic: i3, expiry: s }) => {
      this.isInitialized(), await this.pairings.update(i3, { expiry: s });
    }), p2(this, "updateMetadata", async ({ topic: i3, metadata: s }) => {
      this.isInitialized(), await this.pairings.update(i3, { peerMetadata: s });
    }), p2(this, "getPairings", () => (this.isInitialized(), this.pairings.values)), p2(this, "disconnect", async (i3) => {
      this.isInitialized(), await this.isValidDisconnect(i3);
      const { topic: s } = i3;
      this.pairings.keys.includes(s) && (await this.sendRequest(s, "wc_pairingDelete", Kt("USER_DISCONNECTED")), await this.deletePairing(s));
    }), p2(this, "formatUriFromPairing", (i3) => {
      this.isInitialized();
      const { topic: s, relay: n2, expiry: o3, methods: a2 } = i3, c4 = this.core.crypto.keychain.get(s);
      return oa({ protocol: this.core.protocol, version: this.core.version, topic: s, symKey: c4, relay: n2, expiryTimestamp: o3, methods: a2 });
    }), p2(this, "sendRequest", async (i3, s, n2) => {
      const o3 = formatJsonRpcRequest(s, n2), a2 = await this.core.crypto.encode(i3, o3), c4 = se2[s].req;
      return this.core.history.set(i3, o3), this.core.relayer.publish(i3, a2, c4), o3.id;
    }), p2(this, "sendResult", async (i3, s, n2) => {
      const o3 = formatJsonRpcResult(i3, n2), a2 = await this.core.crypto.encode(s, o3), c4 = (await this.core.history.get(s, i3)).request.method, h4 = se2[c4].res;
      await this.core.relayer.publish(s, a2, h4), await this.core.history.resolve(o3);
    }), p2(this, "sendError", async (i3, s, n2) => {
      const o3 = formatJsonRpcError(i3, n2), a2 = await this.core.crypto.encode(s, o3), c4 = (await this.core.history.get(s, i3)).request.method, h4 = se2[c4] ? se2[c4].res : se2.unregistered_method.res;
      await this.core.relayer.publish(s, a2, h4), await this.core.history.resolve(o3);
    }), p2(this, "deletePairing", async (i3, s) => {
      await this.core.relayer.unsubscribe(i3), await Promise.all([this.pairings.delete(i3, Kt("USER_DISCONNECTED")), this.core.crypto.deleteSymKey(i3), s ? Promise.resolve() : this.core.expirer.del(i3)]);
    }), p2(this, "cleanup", async () => {
      const i3 = this.pairings.getAll().filter((s) => fi(s.expiry));
      await Promise.all(i3.map((s) => this.deletePairing(s.topic)));
    }), p2(this, "onRelayEventRequest", async (i3) => {
      const { topic: s, payload: n2 } = i3;
      switch (n2.method) {
        case "wc_pairingPing":
          return await this.onPairingPingRequest(s, n2);
        case "wc_pairingDelete":
          return await this.onPairingDeleteRequest(s, n2);
        default:
          return await this.onUnknownRpcMethodRequest(s, n2);
      }
    }), p2(this, "onRelayEventResponse", async (i3) => {
      const { topic: s, payload: n2 } = i3, o3 = (await this.core.history.get(s, n2.id)).request.method;
      switch (o3) {
        case "wc_pairingPing":
          return this.onPairingPingResponse(s, n2);
        default:
          return this.onUnknownRpcMethodResponse(o3);
      }
    }), p2(this, "onPairingPingRequest", async (i3, s) => {
      const { id: n2 } = s;
      try {
        this.isValidPing({ topic: i3 }), await this.sendResult(n2, i3, true), this.events.emit(re.ping, { id: n2, topic: i3 });
      } catch (o3) {
        await this.sendError(n2, i3, o3), this.logger.error(o3);
      }
    }), p2(this, "onPairingPingResponse", (i3, s) => {
      const { id: n2 } = s;
      setTimeout(() => {
        isJsonRpcResult(s) ? this.events.emit(ci("pairing_ping", n2), {}) : isJsonRpcError(s) && this.events.emit(ci("pairing_ping", n2), { error: s.error });
      }, 500);
    }), p2(this, "onPairingDeleteRequest", async (i3, s) => {
      const { id: n2 } = s;
      try {
        this.isValidDisconnect({ topic: i3 }), await this.deletePairing(i3), this.events.emit(re.delete, { id: n2, topic: i3 });
      } catch (o3) {
        await this.sendError(n2, i3, o3), this.logger.error(o3);
      }
    }), p2(this, "onUnknownRpcMethodRequest", async (i3, s) => {
      const { id: n2, method: o3 } = s;
      try {
        if (this.registeredMethods.includes(o3)) return;
        const a2 = Kt("WC_METHOD_UNSUPPORTED", o3);
        await this.sendError(n2, i3, a2), this.logger.error(a2);
      } catch (a2) {
        await this.sendError(n2, i3, a2), this.logger.error(a2);
      }
    }), p2(this, "onUnknownRpcMethodResponse", (i3) => {
      this.registeredMethods.includes(i3) || this.logger.error(Kt("WC_METHOD_UNSUPPORTED", i3));
    }), p2(this, "isValidPair", (i3, s) => {
      var n2;
      if (!Aa(i3)) {
        const { message: a2 } = Et("MISSING_OR_INVALID", `pair() params: ${i3}`);
        throw s.setError(Y2.malformed_pairing_uri), new Error(a2);
      }
      if (!ma(i3.uri)) {
        const { message: a2 } = Et("MISSING_OR_INVALID", `pair() uri: ${i3.uri}`);
        throw s.setError(Y2.malformed_pairing_uri), new Error(a2);
      }
      const o3 = ra(i3 == null ? void 0 : i3.uri);
      if (!((n2 = o3 == null ? void 0 : o3.relay) != null && n2.protocol)) {
        const { message: a2 } = Et("MISSING_OR_INVALID", "pair() uri#relay-protocol");
        throw s.setError(Y2.malformed_pairing_uri), new Error(a2);
      }
      if (!(o3 != null && o3.symKey)) {
        const { message: a2 } = Et("MISSING_OR_INVALID", "pair() uri#symKey");
        throw s.setError(Y2.malformed_pairing_uri), new Error(a2);
      }
      if (o3 != null && o3.expiryTimestamp && (0, import_time2.toMiliseconds)(o3 == null ? void 0 : o3.expiryTimestamp) < Date.now()) {
        s.setError(Y2.pairing_expired);
        const { message: a2 } = Et("EXPIRED", "pair() URI has expired. Please try again with a new connection URI.");
        throw new Error(a2);
      }
    }), p2(this, "isValidPing", async (i3) => {
      if (!Aa(i3)) {
        const { message: n2 } = Et("MISSING_OR_INVALID", `ping() params: ${i3}`);
        throw new Error(n2);
      }
      const { topic: s } = i3;
      await this.isValidPairingTopic(s);
    }), p2(this, "isValidDisconnect", async (i3) => {
      if (!Aa(i3)) {
        const { message: n2 } = Et("MISSING_OR_INVALID", `disconnect() params: ${i3}`);
        throw new Error(n2);
      }
      const { topic: s } = i3;
      await this.isValidPairingTopic(s);
    }), p2(this, "isValidPairingTopic", async (i3) => {
      if (!it(i3, false)) {
        const { message: s } = Et("MISSING_OR_INVALID", `pairing topic should be a string: ${i3}`);
        throw new Error(s);
      }
      if (!this.pairings.keys.includes(i3)) {
        const { message: s } = Et("NO_MATCHING_KEY", `pairing topic doesn't exist: ${i3}`);
        throw new Error(s);
      }
      if (fi(this.pairings.get(i3).expiry)) {
        await this.deletePairing(i3);
        const { message: s } = Et("EXPIRED", `pairing topic: ${i3}`);
        throw new Error(s);
      }
    }), this.core = e, this.logger = E(t, this.name), this.pairings = new Li2(this.core, this.logger, this.name, this.storagePrefix);
  }
  get context() {
    return y(this.logger);
  }
  isInitialized() {
    if (!this.initialized) {
      const { message: e } = Et("NOT_INITIALIZED", this.name);
      throw new Error(e);
    }
  }
  registerRelayerEvents() {
    this.core.relayer.on(C2.message, async (e) => {
      const { topic: t, message: i3, transportType: s } = e;
      if (this.pairings.keys.includes(t) && s !== Q2.link_mode && !this.ignoredPayloadTypes.includes(this.core.crypto.getPayloadType(i3))) try {
        const n2 = await this.core.crypto.decode(t, i3);
        isJsonRpcRequest(n2) ? (this.core.history.set(t, n2), await this.onRelayEventRequest({ topic: t, payload: n2 })) : isJsonRpcResponse(n2) && (await this.core.history.resolve(n2), await this.onRelayEventResponse({ topic: t, payload: n2 }), this.core.history.delete(t, n2.id)), await this.core.relayer.messages.ack(t, i3);
      } catch (n2) {
        this.logger.error(n2);
      }
    });
  }
  registerExpirerEvents() {
    this.core.expirer.on(M3.expired, async (e) => {
      const { topic: t } = si(e.target);
      t && this.pairings.keys.includes(t) && (await this.deletePairing(t, true), this.events.emit(re.expire, { topic: t }));
    });
  }
};
var jo2 = Object.defineProperty;
var Uo2 = (r2, e, t) => e in r2 ? jo2(r2, e, { enumerable: true, configurable: true, writable: true, value: t }) : r2[e] = t;
var O2 = (r2, e, t) => Uo2(r2, typeof e != "symbol" ? e + "" : e, t);
var ji2 = class extends I {
  constructor(e, t) {
    super(e, t), this.core = e, this.logger = t, O2(this, "records", /* @__PURE__ */ new Map()), O2(this, "events", new import_events3.EventEmitter()), O2(this, "name", Bt2), O2(this, "version", Vt2), O2(this, "cached", []), O2(this, "initialized", false), O2(this, "storagePrefix", B), O2(this, "init", async () => {
      this.initialized || (this.logger.trace("Initialized"), await this.restore(), this.cached.forEach((i3) => this.records.set(i3.id, i3)), this.cached = [], this.registerEventListeners(), this.initialized = true);
    }), O2(this, "set", (i3, s, n2) => {
      if (this.isInitialized(), this.logger.debug("Setting JSON-RPC request history record"), this.logger.trace({ type: "method", method: "set", topic: i3, request: s, chainId: n2 }), this.records.has(s.id)) return;
      const o3 = { id: s.id, topic: i3, request: { method: s.method, params: s.params || null }, chainId: n2, expiry: ii(import_time2.THIRTY_DAYS) };
      this.records.set(o3.id, o3), this.persist(), this.events.emit(F2.created, o3);
    }), O2(this, "resolve", async (i3) => {
      if (this.isInitialized(), this.logger.debug("Updating JSON-RPC response history record"), this.logger.trace({ type: "method", method: "update", response: i3 }), !this.records.has(i3.id)) return;
      const s = await this.getRecord(i3.id);
      typeof s.response > "u" && (s.response = isJsonRpcError(i3) ? { error: i3.error } : { result: i3.result }, this.records.set(s.id, s), this.persist(), this.events.emit(F2.updated, s));
    }), O2(this, "get", async (i3, s) => (this.isInitialized(), this.logger.debug("Getting record"), this.logger.trace({ type: "method", method: "get", topic: i3, id: s }), await this.getRecord(s))), O2(this, "delete", (i3, s) => {
      this.isInitialized(), this.logger.debug("Deleting record"), this.logger.trace({ type: "method", method: "delete", id: s }), this.values.forEach((n2) => {
        if (n2.topic === i3) {
          if (typeof s < "u" && n2.id !== s) return;
          this.records.delete(n2.id), this.events.emit(F2.deleted, n2);
        }
      }), this.persist();
    }), O2(this, "exists", async (i3, s) => (this.isInitialized(), this.records.has(s) ? (await this.getRecord(s)).topic === i3 : false)), O2(this, "on", (i3, s) => {
      this.events.on(i3, s);
    }), O2(this, "once", (i3, s) => {
      this.events.once(i3, s);
    }), O2(this, "off", (i3, s) => {
      this.events.off(i3, s);
    }), O2(this, "removeListener", (i3, s) => {
      this.events.removeListener(i3, s);
    }), this.logger = E(t, this.name);
  }
  get context() {
    return y(this.logger);
  }
  get storageKey() {
    return this.storagePrefix + this.version + this.core.customStoragePrefix + "//" + this.name;
  }
  get size() {
    return this.records.size;
  }
  get keys() {
    return Array.from(this.records.keys());
  }
  get values() {
    return Array.from(this.records.values());
  }
  get pending() {
    const e = [];
    return this.values.forEach((t) => {
      if (typeof t.response < "u") return;
      const i3 = { topic: t.topic, request: formatJsonRpcRequest(t.request.method, t.request.params, t.id), chainId: t.chainId };
      return e.push(i3);
    }), e;
  }
  async setJsonRpcRecords(e) {
    await this.core.storage.setItem(this.storageKey, e);
  }
  async getJsonRpcRecords() {
    return await this.core.storage.getItem(this.storageKey);
  }
  getRecord(e) {
    this.isInitialized();
    const t = this.records.get(e);
    if (!t) {
      const { message: i3 } = Et("NO_MATCHING_KEY", `${this.name}: ${e}`);
      throw new Error(i3);
    }
    return t;
  }
  async persist() {
    await this.setJsonRpcRecords(this.values), this.events.emit(F2.sync);
  }
  async restore() {
    try {
      const e = await this.getJsonRpcRecords();
      if (typeof e > "u" || !e.length) return;
      if (this.records.size) {
        const { message: t } = Et("RESTORE_WILL_OVERRIDE", this.name);
        throw this.logger.error(t), new Error(t);
      }
      this.cached = e, this.logger.debug(`Successfully Restored records for ${this.name}`), this.logger.trace({ type: "method", method: "restore", records: this.values });
    } catch (e) {
      this.logger.debug(`Failed to Restore records for ${this.name}`), this.logger.error(e);
    }
  }
  registerEventListeners() {
    this.events.on(F2.created, (e) => {
      const t = F2.created;
      this.logger.info(`Emitting ${t}`), this.logger.debug({ type: "event", event: t, record: e });
    }), this.events.on(F2.updated, (e) => {
      const t = F2.updated;
      this.logger.info(`Emitting ${t}`), this.logger.debug({ type: "event", event: t, record: e });
    }), this.events.on(F2.deleted, (e) => {
      const t = F2.deleted;
      this.logger.info(`Emitting ${t}`), this.logger.debug({ type: "event", event: t, record: e });
    }), this.core.heartbeat.on(r.pulse, () => {
      this.cleanup();
    });
  }
  cleanup() {
    try {
      this.isInitialized();
      let e = false;
      this.records.forEach((t) => {
        (0, import_time2.toMiliseconds)(t.expiry || 0) - Date.now() <= 0 && (this.logger.info(`Deleting expired history log: ${t.id}`), this.records.delete(t.id), this.events.emit(F2.deleted, t, false), e = true);
      }), e && this.persist();
    } catch (e) {
      this.logger.warn(e);
    }
  }
  isInitialized() {
    if (!this.initialized) {
      const { message: e } = Et("NOT_INITIALIZED", this.name);
      throw new Error(e);
    }
  }
};
var Fo2 = Object.defineProperty;
var Mo2 = (r2, e, t) => e in r2 ? Fo2(r2, e, { enumerable: true, configurable: true, writable: true, value: t }) : r2[e] = t;
var A2 = (r2, e, t) => Mo2(r2, typeof e != "symbol" ? e + "" : e, t);
var Ui2 = class extends S {
  constructor(e, t) {
    super(e, t), this.core = e, this.logger = t, A2(this, "expirations", /* @__PURE__ */ new Map()), A2(this, "events", new import_events3.EventEmitter()), A2(this, "name", qt2), A2(this, "version", Gt2), A2(this, "cached", []), A2(this, "initialized", false), A2(this, "storagePrefix", B), A2(this, "init", async () => {
      this.initialized || (this.logger.trace("Initialized"), await this.restore(), this.cached.forEach((i3) => this.expirations.set(i3.target, i3)), this.cached = [], this.registerEventListeners(), this.initialized = true);
    }), A2(this, "has", (i3) => {
      try {
        const s = this.formatTarget(i3);
        return typeof this.getExpiration(s) < "u";
      } catch {
        return false;
      }
    }), A2(this, "set", (i3, s) => {
      this.isInitialized();
      const n2 = this.formatTarget(i3), o3 = { target: n2, expiry: s };
      this.expirations.set(n2, o3), this.checkExpiry(n2, o3), this.events.emit(M3.created, { target: n2, expiration: o3 });
    }), A2(this, "get", (i3) => {
      this.isInitialized();
      const s = this.formatTarget(i3);
      return this.getExpiration(s);
    }), A2(this, "del", (i3) => {
      if (this.isInitialized(), this.has(i3)) {
        const s = this.formatTarget(i3), n2 = this.getExpiration(s);
        this.expirations.delete(s), this.events.emit(M3.deleted, { target: s, expiration: n2 });
      }
    }), A2(this, "on", (i3, s) => {
      this.events.on(i3, s);
    }), A2(this, "once", (i3, s) => {
      this.events.once(i3, s);
    }), A2(this, "off", (i3, s) => {
      this.events.off(i3, s);
    }), A2(this, "removeListener", (i3, s) => {
      this.events.removeListener(i3, s);
    }), this.logger = E(t, this.name);
  }
  get context() {
    return y(this.logger);
  }
  get storageKey() {
    return this.storagePrefix + this.version + this.core.customStoragePrefix + "//" + this.name;
  }
  get length() {
    return this.expirations.size;
  }
  get keys() {
    return Array.from(this.expirations.keys());
  }
  get values() {
    return Array.from(this.expirations.values());
  }
  formatTarget(e) {
    if (typeof e == "string") return ri(e);
    if (typeof e == "number") return oi(e);
    const { message: t } = Et("UNKNOWN_TYPE", `Target type: ${typeof e}`);
    throw new Error(t);
  }
  async setExpirations(e) {
    await this.core.storage.setItem(this.storageKey, e);
  }
  async getExpirations() {
    return await this.core.storage.getItem(this.storageKey);
  }
  async persist() {
    await this.setExpirations(this.values), this.events.emit(M3.sync);
  }
  async restore() {
    try {
      const e = await this.getExpirations();
      if (typeof e > "u" || !e.length) return;
      if (this.expirations.size) {
        const { message: t } = Et("RESTORE_WILL_OVERRIDE", this.name);
        throw this.logger.error(t), new Error(t);
      }
      this.cached = e, this.logger.debug(`Successfully Restored expirations for ${this.name}`), this.logger.trace({ type: "method", method: "restore", expirations: this.values });
    } catch (e) {
      this.logger.debug(`Failed to Restore expirations for ${this.name}`), this.logger.error(e);
    }
  }
  getExpiration(e) {
    const t = this.expirations.get(e);
    if (!t) {
      const { message: i3 } = Et("NO_MATCHING_KEY", `${this.name}: ${e}`);
      throw this.logger.warn(i3), new Error(i3);
    }
    return t;
  }
  checkExpiry(e, t) {
    const { expiry: i3 } = t;
    (0, import_time2.toMiliseconds)(i3) - Date.now() <= 0 && this.expire(e, t);
  }
  expire(e, t) {
    this.expirations.delete(e), this.events.emit(M3.expired, { target: e, expiration: t });
  }
  checkExpirations() {
    this.core.relayer.connected && this.expirations.forEach((e, t) => this.checkExpiry(t, e));
  }
  registerEventListeners() {
    this.core.heartbeat.on(r.pulse, () => this.checkExpirations()), this.events.on(M3.created, (e) => {
      const t = M3.created;
      this.logger.info(`Emitting ${t}`), this.logger.debug({ type: "event", event: t, data: e }), this.persist();
    }), this.events.on(M3.expired, (e) => {
      const t = M3.expired;
      this.logger.info(`Emitting ${t}`), this.logger.debug({ type: "event", event: t, data: e }), this.persist();
    }), this.events.on(M3.deleted, (e) => {
      const t = M3.deleted;
      this.logger.info(`Emitting ${t}`), this.logger.debug({ type: "event", event: t, data: e }), this.persist();
    });
  }
  isInitialized() {
    if (!this.initialized) {
      const { message: e } = Et("NOT_INITIALIZED", this.name);
      throw new Error(e);
    }
  }
};
var Ko2 = Object.defineProperty;
var Bo2 = (r2, e, t) => e in r2 ? Ko2(r2, e, { enumerable: true, configurable: true, writable: true, value: t }) : r2[e] = t;
var w = (r2, e, t) => Bo2(r2, typeof e != "symbol" ? e + "" : e, t);
var Fi2 = class extends M {
  constructor(e, t, i3) {
    super(e, t, i3), this.core = e, this.logger = t, this.store = i3, w(this, "name", Wt2), w(this, "abortController"), w(this, "isDevEnv"), w(this, "verifyUrlV3", Yt2), w(this, "storagePrefix", B), w(this, "version", Le2), w(this, "publicKey"), w(this, "fetchPromise"), w(this, "init", async () => {
      var s;
      this.isDevEnv || (this.publicKey = await this.store.getItem(this.storeKey), this.publicKey && (0, import_time2.toMiliseconds)((s = this.publicKey) == null ? void 0 : s.expiresAt) < Date.now() && (this.logger.debug("verify v2 public key expired"), await this.removePublicKey()));
    }), w(this, "register", async (s) => {
      if (!zt() || this.isDevEnv) return;
      const n2 = window.location.origin, { id: o3, decryptedId: a2 } = s, c4 = `${this.verifyUrlV3}/attestation?projectId=${this.core.projectId}&origin=${n2}&id=${o3}&decryptedId=${a2}`;
      try {
        const h4 = (0, import_window_getters2.getDocument)(), l4 = this.startAbortTimer(import_time2.ONE_SECOND * 5), d3 = await new Promise((g2, _) => {
          const u3 = () => {
            window.removeEventListener("message", x3), h4.body.removeChild(b3), _("attestation aborted");
          };
          this.abortController.signal.addEventListener("abort", u3);
          const b3 = h4.createElement("iframe");
          b3.src = c4, b3.style.display = "none", b3.addEventListener("error", u3, { signal: this.abortController.signal });
          const x3 = (I4) => {
            if (I4.data && typeof I4.data == "string") try {
              const D2 = JSON.parse(I4.data);
              if (D2.type === "verify_attestation") {
                if (sn(D2.attestation).payload.id !== o3) return;
                clearInterval(l4), h4.body.removeChild(b3), this.abortController.signal.removeEventListener("abort", u3), window.removeEventListener("message", x3), g2(D2.attestation === null ? "" : D2.attestation);
              }
            } catch (D2) {
              this.logger.warn(D2);
            }
          };
          h4.body.appendChild(b3), window.addEventListener("message", x3, { signal: this.abortController.signal });
        });
        return this.logger.debug("jwt attestation", d3), d3;
      } catch (h4) {
        this.logger.warn(h4);
      }
      return "";
    }), w(this, "resolve", async (s) => {
      if (this.isDevEnv) return "";
      const { attestationId: n2, hash: o3, encryptedId: a2 } = s;
      if (n2 === "") {
        this.logger.debug("resolve: attestationId is empty, skipping");
        return;
      }
      if (n2) {
        if (sn(n2).payload.id !== a2) return;
        const h4 = await this.isValidJwtAttestation(n2);
        if (h4) {
          if (!h4.isVerified) {
            this.logger.warn("resolve: jwt attestation: origin url not verified");
            return;
          }
          return h4;
        }
      }
      if (!o3) return;
      const c4 = this.getVerifyUrl(s == null ? void 0 : s.verifyUrl);
      return this.fetchAttestation(o3, c4);
    }), w(this, "fetchAttestation", async (s, n2) => {
      this.logger.debug(`resolving attestation: ${s} from url: ${n2}`);
      const o3 = this.startAbortTimer(import_time2.ONE_SECOND * 5), a2 = await fetch(`${n2}/attestation/${s}?v2Supported=true`, { signal: this.abortController.signal });
      return clearTimeout(o3), a2.status === 200 ? await a2.json() : void 0;
    }), w(this, "getVerifyUrl", (s) => {
      let n2 = s || ue2;
      return Jt2.includes(n2) || (this.logger.info(`verify url: ${n2}, not included in trusted list, assigning default: ${ue2}`), n2 = ue2), n2;
    }), w(this, "fetchPublicKey", async () => {
      try {
        this.logger.debug(`fetching public key from: ${this.verifyUrlV3}`);
        const s = this.startAbortTimer(import_time2.FIVE_SECONDS), n2 = await fetch(`${this.verifyUrlV3}/public-key`, { signal: this.abortController.signal });
        return clearTimeout(s), await n2.json();
      } catch (s) {
        this.logger.warn(s);
      }
    }), w(this, "persistPublicKey", async (s) => {
      this.logger.debug("persisting public key to local storage", s), await this.store.setItem(this.storeKey, s), this.publicKey = s;
    }), w(this, "removePublicKey", async () => {
      this.logger.debug("removing verify v2 public key from storage"), await this.store.removeItem(this.storeKey), this.publicKey = void 0;
    }), w(this, "isValidJwtAttestation", async (s) => {
      const n2 = await this.getPublicKey();
      try {
        if (n2) return this.validateAttestation(s, n2);
      } catch (a2) {
        this.logger.error(a2), this.logger.warn("error validating attestation");
      }
      const o3 = await this.fetchAndPersistPublicKey();
      try {
        if (o3) return this.validateAttestation(s, o3);
      } catch (a2) {
        this.logger.error(a2), this.logger.warn("error validating attestation");
      }
    }), w(this, "getPublicKey", async () => this.publicKey ? this.publicKey : await this.fetchAndPersistPublicKey()), w(this, "fetchAndPersistPublicKey", async () => {
      if (this.fetchPromise) return await this.fetchPromise, this.publicKey;
      this.fetchPromise = new Promise(async (n2) => {
        const o3 = await this.fetchPublicKey();
        o3 && (await this.persistPublicKey(o3), n2(o3));
      });
      const s = await this.fetchPromise;
      return this.fetchPromise = void 0, s;
    }), w(this, "validateAttestation", (s, n2) => {
      const o3 = ta(s, n2.publicKey), a2 = { hasExpired: (0, import_time2.toMiliseconds)(o3.exp) < Date.now(), payload: o3 };
      if (a2.hasExpired) throw this.logger.warn("resolve: jwt attestation expired"), new Error("JWT attestation expired");
      return { origin: a2.payload.origin, isScam: a2.payload.isScam, isVerified: a2.payload.isVerified };
    }), this.logger = E(t, this.name), this.abortController = new AbortController(), this.isDevEnv = hi(), this.init();
  }
  get storeKey() {
    return this.storagePrefix + this.version + this.core.customStoragePrefix + "//verify:public:key";
  }
  get context() {
    return y(this.logger);
  }
  startAbortTimer(e) {
    return this.abortController = new AbortController(), setTimeout(() => this.abortController.abort(), (0, import_time2.toMiliseconds)(e));
  }
};
var Vo2 = Object.defineProperty;
var qo2 = (r2, e, t) => e in r2 ? Vo2(r2, e, { enumerable: true, configurable: true, writable: true, value: t }) : r2[e] = t;
var Mi2 = (r2, e, t) => qo2(r2, typeof e != "symbol" ? e + "" : e, t);
var Ki2 = class extends O {
  constructor(e, t) {
    super(e, t), this.projectId = e, this.logger = t, Mi2(this, "context", Xt2), Mi2(this, "registerDeviceToken", async (i3) => {
      const { clientId: s, token: n2, notificationType: o3, enableEncrypted: a2 = false } = i3, c4 = `${Zt2}/${this.projectId}/clients`;
      await fetch(c4, { method: "POST", headers: { "Content-Type": "application/json" }, body: JSON.stringify({ client_id: s, type: o3, token: n2, always_raw: a2 }) });
    }), this.logger = E(t, this.context);
  }
};
var Go2 = Object.defineProperty;
var Bi2 = Object.getOwnPropertySymbols;
var Wo2 = Object.prototype.hasOwnProperty;
var Ho2 = Object.prototype.propertyIsEnumerable;
var Ze2 = (r2, e, t) => e in r2 ? Go2(r2, e, { enumerable: true, configurable: true, writable: true, value: t }) : r2[e] = t;
var be2 = (r2, e) => {
  for (var t in e || (e = {})) Wo2.call(e, t) && Ze2(r2, t, e[t]);
  if (Bi2) for (var t of Bi2(e)) Ho2.call(e, t) && Ze2(r2, t, e[t]);
  return r2;
};
var E2 = (r2, e, t) => Ze2(r2, typeof e != "symbol" ? e + "" : e, t);
var Vi2 = class extends R {
  constructor(e, t, i3 = true) {
    super(e, t, i3), this.core = e, this.logger = t, E2(this, "context", ei2), E2(this, "storagePrefix", B), E2(this, "storageVersion", Qt2), E2(this, "events", /* @__PURE__ */ new Map()), E2(this, "shouldPersist", false), E2(this, "init", async () => {
      if (!hi()) try {
        const s = { eventId: di(), timestamp: Date.now(), domain: this.getAppDomain(), props: { event: "INIT", type: "", properties: { client_id: await this.core.crypto.getClientId(), user_agent: cr(this.core.relayer.protocol, this.core.relayer.version, _e2) } } };
        await this.sendEvent([s]);
      } catch (s) {
        this.logger.warn(s);
      }
    }), E2(this, "createEvent", (s) => {
      const { event: n2 = "ERROR", type: o3 = "", properties: { topic: a2, trace: c4 } } = s, h4 = di(), l4 = this.core.projectId || "", d3 = Date.now(), g2 = be2({ eventId: h4, timestamp: d3, props: { event: n2, type: o3, properties: { topic: a2, trace: c4 } }, bundleId: l4, domain: this.getAppDomain() }, this.setMethods(h4));
      return this.telemetryEnabled && (this.events.set(h4, g2), this.shouldPersist = true), g2;
    }), E2(this, "getEvent", (s) => {
      const { eventId: n2, topic: o3 } = s;
      if (n2) return this.events.get(n2);
      const a2 = Array.from(this.events.values()).find((c4) => c4.props.properties.topic === o3);
      if (a2) return be2(be2({}, a2), this.setMethods(a2.eventId));
    }), E2(this, "deleteEvent", (s) => {
      const { eventId: n2 } = s;
      this.events.delete(n2), this.shouldPersist = true;
    }), E2(this, "setEventListeners", () => {
      this.core.heartbeat.on(r.pulse, async () => {
        this.shouldPersist && await this.persist(), this.events.forEach((s) => {
          (0, import_time2.fromMiliseconds)(Date.now()) - (0, import_time2.fromMiliseconds)(s.timestamp) > ti && (this.events.delete(s.eventId), this.shouldPersist = true);
        });
      });
    }), E2(this, "setMethods", (s) => ({ addTrace: (n2) => this.addTrace(s, n2), setError: (n2) => this.setError(s, n2) })), E2(this, "addTrace", (s, n2) => {
      const o3 = this.events.get(s);
      o3 && (o3.props.properties.trace.push(n2), this.events.set(s, o3), this.shouldPersist = true);
    }), E2(this, "setError", (s, n2) => {
      const o3 = this.events.get(s);
      o3 && (o3.props.type = n2, o3.timestamp = Date.now(), this.events.set(s, o3), this.shouldPersist = true);
    }), E2(this, "persist", async () => {
      await this.core.storage.setItem(this.storageKey, Array.from(this.events.values())), this.shouldPersist = false;
    }), E2(this, "restore", async () => {
      try {
        const s = await this.core.storage.getItem(this.storageKey) || [];
        if (!s.length) return;
        s.forEach((n2) => {
          this.events.set(n2.eventId, be2(be2({}, n2), this.setMethods(n2.eventId)));
        });
      } catch (s) {
        this.logger.warn(s);
      }
    }), E2(this, "submit", async () => {
      if (!this.telemetryEnabled || this.events.size === 0) return;
      const s = [];
      for (const [n2, o3] of this.events) o3.props.type && s.push(o3);
      if (s.length !== 0) try {
        if ((await this.sendEvent(s)).ok) for (const n2 of s) this.events.delete(n2.eventId), this.shouldPersist = true;
      } catch (n2) {
        this.logger.warn(n2);
      }
    }), E2(this, "sendEvent", async (s) => {
      const n2 = this.getAppDomain() ? "" : "&sp=desktop";
      return await fetch(`${ii2}?projectId=${this.core.projectId}&st=events_sdk&sv=js-${_e2}${n2}`, { method: "POST", body: JSON.stringify(s) });
    }), E2(this, "getAppDomain", () => sr().url), this.logger = E(t, this.context), this.telemetryEnabled = i3, i3 ? this.restore().then(async () => {
      await this.submit(), this.setEventListeners();
    }) : this.persist();
  }
  get storageKey() {
    return this.storagePrefix + this.storageVersion + this.core.customStoragePrefix + "//" + this.context;
  }
};
var Yo2 = Object.defineProperty;
var qi2 = Object.getOwnPropertySymbols;
var Jo2 = Object.prototype.hasOwnProperty;
var Xo2 = Object.prototype.propertyIsEnumerable;
var Qe3 = (r2, e, t) => e in r2 ? Yo2(r2, e, { enumerable: true, configurable: true, writable: true, value: t }) : r2[e] = t;
var Gi2 = (r2, e) => {
  for (var t in e || (e = {})) Jo2.call(e, t) && Qe3(r2, t, e[t]);
  if (qi2) for (var t of qi2(e)) Xo2.call(e, t) && Qe3(r2, t, e[t]);
  return r2;
};
var v2 = (r2, e, t) => Qe3(r2, typeof e != "symbol" ? e + "" : e, t);
var Te2 = class _Te extends h2 {
  constructor(e) {
    var t;
    super(e), v2(this, "protocol", ze), v2(this, "version", Le2), v2(this, "name", he2), v2(this, "relayUrl"), v2(this, "projectId"), v2(this, "customStoragePrefix"), v2(this, "events", new import_events3.EventEmitter()), v2(this, "logger"), v2(this, "heartbeat"), v2(this, "relayer"), v2(this, "crypto"), v2(this, "storage"), v2(this, "history"), v2(this, "expirer"), v2(this, "pairing"), v2(this, "verify"), v2(this, "echoClient"), v2(this, "linkModeSupportedApps"), v2(this, "eventClient"), v2(this, "initialized", false), v2(this, "logChunkController"), v2(this, "on", (a2, c4) => this.events.on(a2, c4)), v2(this, "once", (a2, c4) => this.events.once(a2, c4)), v2(this, "off", (a2, c4) => this.events.off(a2, c4)), v2(this, "removeListener", (a2, c4) => this.events.removeListener(a2, c4)), v2(this, "dispatchEnvelope", ({ topic: a2, message: c4, sessionExists: h4 }) => {
      if (!a2 || !c4) return;
      const l4 = { topic: a2, message: c4, publishedAt: Date.now(), transportType: Q2.link_mode };
      this.relayer.onLinkMessageEvent(l4, { sessionExists: h4 });
    });
    const i3 = this.getGlobalCore(e == null ? void 0 : e.customStoragePrefix);
    if (i3) try {
      return this.customStoragePrefix = i3.customStoragePrefix, this.logger = i3.logger, this.heartbeat = i3.heartbeat, this.crypto = i3.crypto, this.history = i3.history, this.expirer = i3.expirer, this.storage = i3.storage, this.relayer = i3.relayer, this.pairing = i3.pairing, this.verify = i3.verify, this.echoClient = i3.echoClient, this.linkModeSupportedApps = i3.linkModeSupportedApps, this.eventClient = i3.eventClient, this.initialized = i3.initialized, this.logChunkController = i3.logChunkController, i3;
    } catch (a2) {
      console.warn("Failed to copy global core", a2);
    }
    this.projectId = e == null ? void 0 : e.projectId, this.relayUrl = (e == null ? void 0 : e.relayUrl) || Ue2, this.customStoragePrefix = e != null && e.customStoragePrefix ? `:${e.customStoragePrefix}` : "";
    const s = k({ level: typeof (e == null ? void 0 : e.logger) == "string" && e.logger ? e.logger : Et2.logger, name: he2 }), { logger: n2, chunkLoggerController: o3 } = A({ opts: s, maxSizeInBytes: e == null ? void 0 : e.maxLogBlobSizeInBytes, loggerOverride: e == null ? void 0 : e.logger });
    this.logChunkController = o3, (t = this.logChunkController) != null && t.downloadLogsBlobInBrowser && (window.downloadLogsBlobInBrowser = async () => {
      var a2, c4;
      (a2 = this.logChunkController) != null && a2.downloadLogsBlobInBrowser && ((c4 = this.logChunkController) == null || c4.downloadLogsBlobInBrowser({ clientId: await this.crypto.getClientId() }));
    }), this.logger = E(n2, this.name), this.heartbeat = new i(), this.crypto = new wi2(this, this.logger, e == null ? void 0 : e.keychain), this.history = new ji2(this, this.logger), this.expirer = new Ui2(this, this.logger), this.storage = e != null && e.storage ? e.storage : new h(Gi2(Gi2({}, It2), e == null ? void 0 : e.storageOptions)), this.relayer = new Oi2({ core: this, logger: this.logger, relayUrl: this.relayUrl, projectId: this.projectId }), this.pairing = new ki2(this, this.logger), this.verify = new Fi2(this, this.logger, this.storage), this.echoClient = new Ki2(this.projectId || "", this.logger), this.linkModeSupportedApps = [], this.eventClient = new Vi2(this, this.logger, e == null ? void 0 : e.telemetryEnabled), this.setGlobalCore(this);
  }
  static async init(e) {
    const t = new _Te(e);
    await t.initialize();
    const i3 = await t.crypto.getClientId();
    return await t.storage.setItem(jt2, i3), t;
  }
  get context() {
    return y(this.logger);
  }
  async start() {
    this.initialized || await this.initialize();
  }
  async getLogsBlob() {
    var e;
    return (e = this.logChunkController) == null ? void 0 : e.logsToBlob({ clientId: await this.crypto.getClientId() });
  }
  async addLinkModeSupportedApp(e) {
    this.linkModeSupportedApps.includes(e) || (this.linkModeSupportedApps.push(e), await this.storage.setItem(Fe2, this.linkModeSupportedApps));
  }
  async initialize() {
    this.logger.trace("Initialized");
    try {
      await this.crypto.init(), await this.history.init(), await this.expirer.init(), await this.relayer.init(), await this.heartbeat.init(), await this.pairing.init(), this.linkModeSupportedApps = await this.storage.getItem(Fe2) || [], this.initialized = true, this.logger.info("Core Initialization Success");
    } catch (e) {
      throw this.logger.warn(`Core Initialization Failure at epoch ${Date.now()}`, e), this.logger.error(e.message), e;
    }
  }
  getGlobalCore(e = "") {
    try {
      if (this.isGlobalCoreDisabled()) return;
      const t = `_walletConnectCore_${e}`, i3 = `${t}_count`;
      return globalThis[i3] = (globalThis[i3] || 0) + 1, globalThis[i3] > 1 && console.warn(`WalletConnect Core is already initialized. This is probably a mistake and can lead to unexpected behavior. Init() was called ${globalThis[i3]} times.`), globalThis[t];
    } catch (t) {
      console.warn("Failed to get global WalletConnect core", t);
      return;
    }
  }
  setGlobalCore(e) {
    var t;
    try {
      if (this.isGlobalCoreDisabled()) return;
      const i3 = `_walletConnectCore_${((t = e.opts) == null ? void 0 : t.customStoragePrefix) || ""}`;
      globalThis[i3] = e;
    } catch (i3) {
      console.warn("Failed to set global WalletConnect core", i3);
    }
  }
  isGlobalCoreDisabled() {
    try {
      return typeof process < "u" && process.env.DISABLE_GLOBAL_CORE === "true";
    } catch {
      return true;
    }
  }
};
var Zo2 = Te2;

// node_modules/@walletconnect/universal-provider/node_modules/@walletconnect/sign-client/dist/index.es.js
var import_events4 = __toESM(require_events());
var import_time3 = __toESM(require_cjs());
var Ce3 = "wc";
var ke3 = 2;
var De2 = "client";
var me2 = `${Ce3}@${ke3}:${De2}:`;
var we2 = { name: De2, logger: "error", controller: false, relayUrl: "wss://relay.walletconnect.org" };
var Le3 = "WALLETCONNECT_DEEPLINK_CHOICE";
var ht2 = "proposal";
var Me3 = "Proposal expired";
var dt2 = "session";
var X2 = import_time3.SEVEN_DAYS;
var ut2 = "engine";
var N2 = { wc_sessionPropose: { req: { ttl: import_time3.FIVE_MINUTES, prompt: true, tag: 1100 }, res: { ttl: import_time3.FIVE_MINUTES, prompt: false, tag: 1101 }, reject: { ttl: import_time3.FIVE_MINUTES, prompt: false, tag: 1120 }, autoReject: { ttl: import_time3.FIVE_MINUTES, prompt: false, tag: 1121 } }, wc_sessionSettle: { req: { ttl: import_time3.FIVE_MINUTES, prompt: false, tag: 1102 }, res: { ttl: import_time3.FIVE_MINUTES, prompt: false, tag: 1103 } }, wc_sessionUpdate: { req: { ttl: import_time3.ONE_DAY, prompt: false, tag: 1104 }, res: { ttl: import_time3.ONE_DAY, prompt: false, tag: 1105 } }, wc_sessionExtend: { req: { ttl: import_time3.ONE_DAY, prompt: false, tag: 1106 }, res: { ttl: import_time3.ONE_DAY, prompt: false, tag: 1107 } }, wc_sessionRequest: { req: { ttl: import_time3.FIVE_MINUTES, prompt: true, tag: 1108 }, res: { ttl: import_time3.FIVE_MINUTES, prompt: false, tag: 1109 } }, wc_sessionEvent: { req: { ttl: import_time3.FIVE_MINUTES, prompt: true, tag: 1110 }, res: { ttl: import_time3.FIVE_MINUTES, prompt: false, tag: 1111 } }, wc_sessionDelete: { req: { ttl: import_time3.ONE_DAY, prompt: false, tag: 1112 }, res: { ttl: import_time3.ONE_DAY, prompt: false, tag: 1113 } }, wc_sessionPing: { req: { ttl: import_time3.ONE_DAY, prompt: false, tag: 1114 }, res: { ttl: import_time3.ONE_DAY, prompt: false, tag: 1115 } }, wc_sessionAuthenticate: { req: { ttl: import_time3.ONE_HOUR, prompt: true, tag: 1116 }, res: { ttl: import_time3.ONE_HOUR, prompt: false, tag: 1117 }, reject: { ttl: import_time3.FIVE_MINUTES, prompt: false, tag: 1118 }, autoReject: { ttl: import_time3.FIVE_MINUTES, prompt: false, tag: 1119 } } };
var _e3 = { min: import_time3.FIVE_MINUTES, max: import_time3.SEVEN_DAYS };
var $2 = { idle: "IDLE", active: "ACTIVE" };
var gt2 = { eth_sendTransaction: { key: "" }, eth_sendRawTransaction: { key: "" }, wallet_sendCalls: { key: "" }, solana_signTransaction: { key: "signature" }, solana_signAllTransactions: { key: "transactions" }, solana_signAndSendTransaction: { key: "signature" }, sui_signAndExecuteTransaction: { key: "digest" }, sui_signTransaction: { key: "" }, hedera_signAndExecuteTransaction: { key: "transactionId" }, hedera_executeTransaction: { key: "transactionId" }, near_signTransaction: { key: "" }, near_signTransactions: { key: "" }, tron_signTransaction: { key: "txID" }, xrpl_signTransaction: { key: "" }, xrpl_signTransactionFor: { key: "" }, algo_signTxn: { key: "" }, sendTransfer: { key: "txid" }, stacks_stxTransfer: { key: "txId" }, polkadot_signTransaction: { key: "" }, cosmos_signDirect: { key: "" } };
var yt = "request";
var mt2 = ["wc_sessionPropose", "wc_sessionRequest", "wc_authRequest", "wc_sessionAuthenticate"];
var wt2 = "wc";
var _t2 = "auth";
var Et3 = "authKeys";
var ft = "pairingTopics";
var St3 = "requests";
var ae2 = `${wt2}@${1.5}:${_t2}:`;
var ce2 = `${ae2}:PUB_KEY`;
var Os = Object.defineProperty;
var bs2 = Object.defineProperties;
var As = Object.getOwnPropertyDescriptors;
var Rt3 = Object.getOwnPropertySymbols;
var xs2 = Object.prototype.hasOwnProperty;
var Vs2 = Object.prototype.propertyIsEnumerable;
var $e2 = (S4, o3, t) => o3 in S4 ? Os(S4, o3, { enumerable: true, configurable: true, writable: true, value: t }) : S4[o3] = t;
var I2 = (S4, o3) => {
  for (var t in o3 || (o3 = {})) xs2.call(o3, t) && $e2(S4, t, o3[t]);
  if (Rt3) for (var t of Rt3(o3)) Vs2.call(o3, t) && $e2(S4, t, o3[t]);
  return S4;
};
var x = (S4, o3) => bs2(S4, As(o3));
var c2 = (S4, o3, t) => $e2(S4, typeof o3 != "symbol" ? o3 + "" : o3, t);
var Cs2 = class extends V {
  constructor(o3) {
    super(o3), c2(this, "name", ut2), c2(this, "events", new import_events4.default()), c2(this, "initialized", false), c2(this, "requestQueue", { state: $2.idle, queue: [] }), c2(this, "sessionRequestQueue", { state: $2.idle, queue: [] }), c2(this, "emittedSessionRequests", new gi({ limit: 500 })), c2(this, "requestQueueDelay", import_time3.ONE_SECOND), c2(this, "expectedPairingMethodMap", /* @__PURE__ */ new Map()), c2(this, "recentlyDeletedMap", /* @__PURE__ */ new Map()), c2(this, "recentlyDeletedLimit", 200), c2(this, "relayMessageCache", []), c2(this, "pendingSessions", /* @__PURE__ */ new Map()), c2(this, "init", async () => {
      this.initialized || (await this.cleanup(), this.registerRelayerEvents(), this.registerExpirerEvents(), this.registerPairingEvents(), await this.registerLinkModeListeners(), this.client.core.pairing.register({ methods: Object.keys(N2) }), this.initialized = true, setTimeout(async () => {
        await this.processPendingMessageEvents(), this.sessionRequestQueue.queue = this.getPendingSessionRequests(), this.processSessionRequestQueue();
      }, (0, import_time3.toMiliseconds)(this.requestQueueDelay)));
    }), c2(this, "connect", async (t) => {
      this.isInitialized(), await this.confirmOnlineStateOrThrow();
      const e = x(I2({}, t), { requiredNamespaces: t.requiredNamespaces || {}, optionalNamespaces: t.optionalNamespaces || {} });
      await this.isValidConnect(e), e.optionalNamespaces = ba(e.requiredNamespaces, e.optionalNamespaces), e.requiredNamespaces = {};
      const { pairingTopic: s, requiredNamespaces: i3, optionalNamespaces: r2, sessionProperties: n2, scopedProperties: a2, relays: l4 } = e;
      let p4 = s, h4, u3 = false;
      try {
        if (p4) {
          const T4 = this.client.core.pairing.pairings.get(p4);
          this.client.logger.warn("connect() with existing pairing topic is deprecated and will be removed in the next major release."), u3 = T4.active;
        }
      } catch (T4) {
        throw this.client.logger.error(`connect() -> pairing.get(${p4}) failed`), T4;
      }
      if (!p4 || !u3) {
        const { topic: T4, uri: K3 } = await this.client.core.pairing.create();
        p4 = T4, h4 = K3;
      }
      if (!p4) {
        const { message: T4 } = Et("NO_MATCHING_KEY", `connect() pairing topic: ${p4}`);
        throw new Error(T4);
      }
      const d3 = await this.client.core.crypto.generateKeyPair(), w3 = N2.wc_sessionPropose.req.ttl || import_time3.FIVE_MINUTES, m3 = ii(w3), y5 = x(I2(I2({ requiredNamespaces: i3, optionalNamespaces: r2, relays: l4 ?? [{ protocol: xt2 }], proposer: { publicKey: d3, metadata: this.client.metadata }, expiryTimestamp: m3, pairingTopic: p4 }, n2 && { sessionProperties: n2 }), a2 && { scopedProperties: a2 }), { id: payloadId() }), E5 = ci("session_connect", y5.id), { reject: _, resolve: V4, done: C4 } = ei(w3, Me3), v4 = ({ id: T4 }) => {
        T4 === y5.id && (this.client.events.off("proposal_expire", v4), this.pendingSessions.delete(y5.id), this.events.emit(E5, { error: { message: Me3, code: 0 } }));
      };
      return this.client.events.on("proposal_expire", v4), this.events.once(E5, ({ error: T4, session: K3 }) => {
        this.client.events.off("proposal_expire", v4), T4 ? _(T4) : K3 && V4(K3);
      }), await this.sendRequest({ topic: p4, method: "wc_sessionPropose", params: y5, throwOnFailedPublish: true, clientRpcId: y5.id }), await this.setProposal(y5.id, y5), { uri: h4, approval: C4 };
    }), c2(this, "pair", async (t) => {
      this.isInitialized(), await this.confirmOnlineStateOrThrow();
      try {
        return await this.client.core.pairing.pair(t);
      } catch (e) {
        throw this.client.logger.error("pair() failed"), e;
      }
    }), c2(this, "approve", async (t) => {
      var e, s, i3;
      const r2 = this.client.core.eventClient.createEvent({ properties: { topic: (e = t == null ? void 0 : t.id) == null ? void 0 : e.toString(), trace: [tr2.session_approve_started] } });
      try {
        this.isInitialized(), await this.confirmOnlineStateOrThrow();
      } catch (q2) {
        throw r2.setError(ir2.no_internet_connection), q2;
      }
      try {
        await this.isValidProposalId(t == null ? void 0 : t.id);
      } catch (q2) {
        throw this.client.logger.error(`approve() -> proposal.get(${t == null ? void 0 : t.id}) failed`), r2.setError(ir2.proposal_not_found), q2;
      }
      try {
        await this.isValidApprove(t);
      } catch (q2) {
        throw this.client.logger.error("approve() -> isValidApprove() failed"), r2.setError(ir2.session_approve_namespace_validation_failure), q2;
      }
      const { id: n2, relayProtocol: a2, namespaces: l4, sessionProperties: p4, scopedProperties: h4, sessionConfig: u3 } = t, d3 = this.client.proposal.get(n2);
      this.client.core.eventClient.deleteEvent({ eventId: r2.eventId });
      const { pairingTopic: w3, proposer: m3, requiredNamespaces: y5, optionalNamespaces: E5 } = d3;
      let _ = (s = this.client.core.eventClient) == null ? void 0 : s.getEvent({ topic: w3 });
      _ || (_ = (i3 = this.client.core.eventClient) == null ? void 0 : i3.createEvent({ type: tr2.session_approve_started, properties: { topic: w3, trace: [tr2.session_approve_started, tr2.session_namespaces_validation_success] } }));
      const V4 = await this.client.core.crypto.generateKeyPair(), C4 = m3.publicKey, v4 = await this.client.core.crypto.generateSharedKey(V4, C4), T4 = I2(I2(I2({ relay: { protocol: a2 ?? "irn" }, namespaces: l4, controller: { publicKey: V4, metadata: this.client.metadata }, expiry: ii(X2) }, p4 && { sessionProperties: p4 }), h4 && { scopedProperties: h4 }), u3 && { sessionConfig: u3 }), K3 = Q2.relay;
      _.addTrace(tr2.subscribing_session_topic);
      try {
        await this.client.core.relayer.subscribe(v4, { transportType: K3 });
      } catch (q2) {
        throw _.setError(ir2.subscribe_session_topic_failure), q2;
      }
      _.addTrace(tr2.subscribe_session_topic_success);
      const fe4 = x(I2({}, T4), { topic: v4, requiredNamespaces: y5, optionalNamespaces: E5, pairingTopic: w3, acknowledged: false, self: T4.controller, peer: { publicKey: m3.publicKey, metadata: m3.metadata }, controller: V4, transportType: Q2.relay });
      await this.client.session.set(v4, fe4), _.addTrace(tr2.store_session);
      try {
        _.addTrace(tr2.publishing_session_settle), await this.sendRequest({ topic: v4, method: "wc_sessionSettle", params: T4, throwOnFailedPublish: true }).catch((q2) => {
          throw _ == null ? void 0 : _.setError(ir2.session_settle_publish_failure), q2;
        }), _.addTrace(tr2.session_settle_publish_success), _.addTrace(tr2.publishing_session_approve), await this.sendResult({ id: n2, topic: w3, result: { relay: { protocol: a2 ?? "irn" }, responderPublicKey: V4 }, throwOnFailedPublish: true }).catch((q2) => {
          throw _ == null ? void 0 : _.setError(ir2.session_approve_publish_failure), q2;
        }), _.addTrace(tr2.session_approve_publish_success);
      } catch (q2) {
        throw this.client.logger.error(q2), this.client.session.delete(v4, Kt("USER_DISCONNECTED")), await this.client.core.relayer.unsubscribe(v4), q2;
      }
      return this.client.core.eventClient.deleteEvent({ eventId: _.eventId }), await this.client.core.pairing.updateMetadata({ topic: w3, metadata: m3.metadata }), await this.deleteProposal(n2), await this.client.core.pairing.activate({ topic: w3 }), await this.setExpiry(v4, ii(X2)), { topic: v4, acknowledged: () => Promise.resolve(this.client.session.get(v4)) };
    }), c2(this, "reject", async (t) => {
      this.isInitialized(), await this.confirmOnlineStateOrThrow();
      try {
        await this.isValidReject(t);
      } catch (r2) {
        throw this.client.logger.error("reject() -> isValidReject() failed"), r2;
      }
      const { id: e, reason: s } = t;
      let i3;
      try {
        i3 = this.client.proposal.get(e).pairingTopic;
      } catch (r2) {
        throw this.client.logger.error(`reject() -> proposal.get(${e}) failed`), r2;
      }
      i3 && await this.sendError({ id: e, topic: i3, error: s, rpcOpts: N2.wc_sessionPropose.reject }), await this.deleteProposal(e);
    }), c2(this, "update", async (t) => {
      this.isInitialized(), await this.confirmOnlineStateOrThrow();
      try {
        await this.isValidUpdate(t);
      } catch (h4) {
        throw this.client.logger.error("update() -> isValidUpdate() failed"), h4;
      }
      const { topic: e, namespaces: s } = t, { done: i3, resolve: r2, reject: n2 } = ei(), a2 = payloadId(), l4 = getBigIntRpcId().toString(), p4 = this.client.session.get(e).namespaces;
      return this.events.once(ci("session_update", a2), ({ error: h4 }) => {
        h4 ? n2(h4) : r2();
      }), await this.client.session.update(e, { namespaces: s }), await this.sendRequest({ topic: e, method: "wc_sessionUpdate", params: { namespaces: s }, throwOnFailedPublish: true, clientRpcId: a2, relayRpcId: l4 }).catch((h4) => {
        this.client.logger.error(h4), this.client.session.update(e, { namespaces: p4 }), n2(h4);
      }), { acknowledged: i3 };
    }), c2(this, "extend", async (t) => {
      this.isInitialized(), await this.confirmOnlineStateOrThrow();
      try {
        await this.isValidExtend(t);
      } catch (a2) {
        throw this.client.logger.error("extend() -> isValidExtend() failed"), a2;
      }
      const { topic: e } = t, s = payloadId(), { done: i3, resolve: r2, reject: n2 } = ei();
      return this.events.once(ci("session_extend", s), ({ error: a2 }) => {
        a2 ? n2(a2) : r2();
      }), await this.setExpiry(e, ii(X2)), this.sendRequest({ topic: e, method: "wc_sessionExtend", params: {}, clientRpcId: s, throwOnFailedPublish: true }).catch((a2) => {
        n2(a2);
      }), { acknowledged: i3 };
    }), c2(this, "request", async (t) => {
      this.isInitialized();
      try {
        await this.isValidRequest(t);
      } catch (y5) {
        throw this.client.logger.error("request() -> isValidRequest() failed"), y5;
      }
      const { chainId: e, request: s, topic: i3, expiry: r2 = N2.wc_sessionRequest.req.ttl } = t, n2 = this.client.session.get(i3);
      (n2 == null ? void 0 : n2.transportType) === Q2.relay && await this.confirmOnlineStateOrThrow();
      const a2 = payloadId(), l4 = getBigIntRpcId().toString(), { done: p4, resolve: h4, reject: u3 } = ei(r2, "Request expired. Please try again.");
      this.events.once(ci("session_request", a2), ({ error: y5, result: E5 }) => {
        y5 ? u3(y5) : h4(E5);
      });
      const d3 = "wc_sessionRequest", w3 = this.getAppLinkIfEnabled(n2.peer.metadata, n2.transportType);
      if (w3) return await this.sendRequest({ clientRpcId: a2, relayRpcId: l4, topic: i3, method: d3, params: { request: x(I2({}, s), { expiryTimestamp: ii(r2) }), chainId: e }, expiry: r2, throwOnFailedPublish: true, appLink: w3 }).catch((y5) => u3(y5)), this.client.events.emit("session_request_sent", { topic: i3, request: s, chainId: e, id: a2 }), await p4();
      const m3 = { request: x(I2({}, s), { expiryTimestamp: ii(r2) }), chainId: e };
      return await Promise.all([new Promise(async (y5) => {
        await this.sendRequest({ clientRpcId: a2, relayRpcId: l4, topic: i3, method: d3, params: m3, expiry: r2, throwOnFailedPublish: true, tvf: this.getTVFParams(a2, m3) }).catch((E5) => u3(E5)), this.client.events.emit("session_request_sent", { topic: i3, request: s, chainId: e, id: a2 }), y5();
      }), new Promise(async (y5) => {
        var E5;
        if (!((E5 = n2.sessionConfig) != null && E5.disableDeepLink)) {
          const _ = await ui(this.client.core.storage, Le3);
          await ai({ id: a2, topic: i3, wcDeepLink: _ });
        }
        y5();
      }), p4()]).then((y5) => y5[2]);
    }), c2(this, "respond", async (t) => {
      this.isInitialized(), await this.isValidRespond(t);
      const { topic: e, response: s } = t, { id: i3 } = s, r2 = this.client.session.get(e);
      r2.transportType === Q2.relay && await this.confirmOnlineStateOrThrow();
      const n2 = this.getAppLinkIfEnabled(r2.peer.metadata, r2.transportType);
      isJsonRpcResult(s) ? await this.sendResult({ id: i3, topic: e, result: s.result, throwOnFailedPublish: true, appLink: n2 }) : isJsonRpcError(s) && await this.sendError({ id: i3, topic: e, error: s.error, appLink: n2 }), this.cleanupAfterResponse(t);
    }), c2(this, "ping", async (t) => {
      this.isInitialized(), await this.confirmOnlineStateOrThrow();
      try {
        await this.isValidPing(t);
      } catch (s) {
        throw this.client.logger.error("ping() -> isValidPing() failed"), s;
      }
      const { topic: e } = t;
      if (this.client.session.keys.includes(e)) {
        const s = payloadId(), i3 = getBigIntRpcId().toString(), { done: r2, resolve: n2, reject: a2 } = ei();
        this.events.once(ci("session_ping", s), ({ error: l4 }) => {
          l4 ? a2(l4) : n2();
        }), await Promise.all([this.sendRequest({ topic: e, method: "wc_sessionPing", params: {}, throwOnFailedPublish: true, clientRpcId: s, relayRpcId: i3 }), r2()]);
      } else this.client.core.pairing.pairings.keys.includes(e) && (this.client.logger.warn("ping() on pairing topic is deprecated and will be removed in the next major release."), await this.client.core.pairing.ping({ topic: e }));
    }), c2(this, "emit", async (t) => {
      this.isInitialized(), await this.confirmOnlineStateOrThrow(), await this.isValidEmit(t);
      const { topic: e, event: s, chainId: i3 } = t, r2 = getBigIntRpcId().toString(), n2 = payloadId();
      await this.sendRequest({ topic: e, method: "wc_sessionEvent", params: { event: s, chainId: i3 }, throwOnFailedPublish: true, relayRpcId: r2, clientRpcId: n2 });
    }), c2(this, "disconnect", async (t) => {
      this.isInitialized(), await this.confirmOnlineStateOrThrow(), await this.isValidDisconnect(t);
      const { topic: e } = t;
      if (this.client.session.keys.includes(e)) await this.sendRequest({ topic: e, method: "wc_sessionDelete", params: Kt("USER_DISCONNECTED"), throwOnFailedPublish: true }), await this.deleteSession({ topic: e, emitEvent: false });
      else if (this.client.core.pairing.pairings.keys.includes(e)) await this.client.core.pairing.disconnect({ topic: e });
      else {
        const { message: s } = Et("MISMATCHED_TOPIC", `Session or pairing topic not found: ${e}`);
        throw new Error(s);
      }
    }), c2(this, "find", (t) => (this.isInitialized(), this.client.session.getAll().filter((e) => ya(e, t)))), c2(this, "getPendingSessionRequests", () => this.client.pendingRequest.getAll()), c2(this, "authenticate", async (t, e) => {
      var s;
      this.isInitialized(), this.isValidAuthenticate(t);
      const i3 = e && this.client.core.linkModeSupportedApps.includes(e) && ((s = this.client.metadata.redirect) == null ? void 0 : s.linkMode), r2 = i3 ? Q2.link_mode : Q2.relay;
      r2 === Q2.relay && await this.confirmOnlineStateOrThrow();
      const { chains: n2, statement: a2 = "", uri: l4, domain: p4, nonce: h4, type: u3, exp: d3, nbf: w3, methods: m3 = [], expiry: y5 } = t, E5 = [...t.resources || []], { topic: _, uri: V4 } = await this.client.core.pairing.create({ methods: ["wc_sessionAuthenticate"], transportType: r2 });
      this.client.logger.info({ message: "Generated new pairing", pairing: { topic: _, uri: V4 } });
      const C4 = await this.client.core.crypto.generateKeyPair(), v4 = Fc(C4);
      if (await Promise.all([this.client.auth.authKeys.set(ce2, { responseTopic: v4, publicKey: C4 }), this.client.auth.pairingTopics.set(v4, { topic: v4, pairingTopic: _ })]), await this.client.core.relayer.subscribe(v4, { transportType: r2 }), this.client.logger.info(`sending request to new pairing topic: ${_}`), m3.length > 0) {
        const { namespace: O5 } = Fe(n2[0]);
        let k4 = Ef(O5, "request", m3);
        Oe(E5) && (k4 = Bf(k4, E5.pop())), E5.push(k4);
      }
      const T4 = y5 && y5 > N2.wc_sessionAuthenticate.req.ttl ? y5 : N2.wc_sessionAuthenticate.req.ttl, K3 = { authPayload: { type: u3 ?? "caip122", chains: n2, statement: a2, aud: l4, domain: p4, version: "1", nonce: h4, iat: (/* @__PURE__ */ new Date()).toISOString(), exp: d3, nbf: w3, resources: E5 }, requester: { publicKey: C4, metadata: this.client.metadata }, expiryTimestamp: ii(T4) }, fe4 = { eip155: { chains: n2, methods: [.../* @__PURE__ */ new Set(["personal_sign", ...m3])], events: ["chainChanged", "accountsChanged"] } }, q2 = { requiredNamespaces: {}, optionalNamespaces: fe4, relays: [{ protocol: "irn" }], pairingTopic: _, proposer: { publicKey: C4, metadata: this.client.metadata }, expiryTimestamp: ii(N2.wc_sessionPropose.req.ttl), id: payloadId() }, { done: It4, resolve: Ue4, reject: Se4 } = ei(T4, "Request expired"), te3 = payloadId(), le4 = ci("session_connect", q2.id), Re3 = ci("session_request", te3), pe4 = async ({ error: O5, session: k4 }) => {
        this.events.off(Re3, ve3), O5 ? Se4(O5) : k4 && Ue4({ session: k4 });
      }, ve3 = async (O5) => {
        var k4, Ge3, je4;
        if (await this.deletePendingAuthRequest(te3, { message: "fulfilled", code: 0 }), O5.error) {
          const ie4 = Kt("WC_METHOD_UNSUPPORTED", "wc_sessionAuthenticate");
          return O5.error.code === ie4.code ? void 0 : (this.events.off(le4, pe4), Se4(O5.error.message));
        }
        await this.deleteProposal(q2.id), this.events.off(le4, pe4);
        const { cacaos: Fe4, responder: Q4 } = O5.result, Te4 = [], Qe5 = [];
        for (const ie4 of Fe4) {
          await yf({ cacao: ie4, projectId: this.client.core.projectId }) || (this.client.logger.error(ie4, "Signature verification failed"), Se4(Kt("SESSION_SETTLEMENT_FAILED", "Signature verification failed")));
          const { p: qe4 } = ie4, Pe4 = Oe(qe4.resources), He4 = [Vr(qe4.iss)], Tt4 = dn(qe4.iss);
          if (Pe4) {
            const Ne3 = If(Pe4), qt3 = Af(Pe4);
            Te4.push(...Ne3), He4.push(...qt3);
          }
          for (const Ne3 of He4) Qe5.push(`${Ne3}:${Tt4}`);
        }
        const se4 = await this.client.core.crypto.generateSharedKey(C4, Q4.publicKey);
        let he4;
        Te4.length > 0 && (he4 = { topic: se4, acknowledged: true, self: { publicKey: C4, metadata: this.client.metadata }, peer: Q4, controller: Q4.publicKey, expiry: ii(X2), requiredNamespaces: {}, optionalNamespaces: {}, relay: { protocol: "irn" }, pairingTopic: _, namespaces: ga([...new Set(Te4)], [...new Set(Qe5)]), transportType: r2 }, await this.client.core.relayer.subscribe(se4, { transportType: r2 }), await this.client.session.set(se4, he4), _ && await this.client.core.pairing.updateMetadata({ topic: _, metadata: Q4.metadata }), he4 = this.client.session.get(se4)), (k4 = this.client.metadata.redirect) != null && k4.linkMode && (Ge3 = Q4.metadata.redirect) != null && Ge3.linkMode && (je4 = Q4.metadata.redirect) != null && je4.universal && e && (this.client.core.addLinkModeSupportedApp(Q4.metadata.redirect.universal), this.client.session.update(se4, { transportType: Q2.link_mode })), Ue4({ auths: Fe4, session: he4 });
      };
      this.events.once(le4, pe4), this.events.once(Re3, ve3);
      let Ie4;
      try {
        if (i3) {
          const O5 = formatJsonRpcRequest("wc_sessionAuthenticate", K3, te3);
          this.client.core.history.set(_, O5);
          const k4 = await this.client.core.crypto.encode("", O5, { type: ge, encoding: De });
          Ie4 = sa(e, _, k4);
        } else await Promise.all([this.sendRequest({ topic: _, method: "wc_sessionAuthenticate", params: K3, expiry: t.expiry, throwOnFailedPublish: true, clientRpcId: te3 }), this.sendRequest({ topic: _, method: "wc_sessionPropose", params: q2, expiry: N2.wc_sessionPropose.req.ttl, throwOnFailedPublish: true, clientRpcId: q2.id })]);
      } catch (O5) {
        throw this.events.off(le4, pe4), this.events.off(Re3, ve3), O5;
      }
      return await this.setProposal(q2.id, q2), await this.setAuthRequest(te3, { request: x(I2({}, K3), { verifyContext: {} }), pairingTopic: _, transportType: r2 }), { uri: Ie4 ?? V4, response: It4 };
    }), c2(this, "approveSessionAuthenticate", async (t) => {
      const { id: e, auths: s } = t, i3 = this.client.core.eventClient.createEvent({ properties: { topic: e.toString(), trace: [sr2.authenticated_session_approve_started] } });
      try {
        this.isInitialized();
      } catch (y5) {
        throw i3.setError(rr2.no_internet_connection), y5;
      }
      const r2 = this.getPendingAuthRequest(e);
      if (!r2) throw i3.setError(rr2.authenticated_session_pending_request_not_found), new Error(`Could not find pending auth request with id ${e}`);
      const n2 = r2.transportType || Q2.relay;
      n2 === Q2.relay && await this.confirmOnlineStateOrThrow();
      const a2 = r2.requester.publicKey, l4 = await this.client.core.crypto.generateKeyPair(), p4 = Fc(a2), h4 = { type: ee, receiverPublicKey: a2, senderPublicKey: l4 }, u3 = [], d3 = [];
      for (const y5 of s) {
        if (!await yf({ cacao: y5, projectId: this.client.core.projectId })) {
          i3.setError(rr2.invalid_cacao);
          const v4 = Kt("SESSION_SETTLEMENT_FAILED", "Signature verification failed");
          throw await this.sendError({ id: e, topic: p4, error: v4, encodeOpts: h4 }), new Error(v4.message);
        }
        i3.addTrace(sr2.cacaos_verified);
        const { p: E5 } = y5, _ = Oe(E5.resources), V4 = [Vr(E5.iss)], C4 = dn(E5.iss);
        if (_) {
          const v4 = If(_), T4 = Af(_);
          u3.push(...v4), V4.push(...T4);
        }
        for (const v4 of V4) d3.push(`${v4}:${C4}`);
      }
      const w3 = await this.client.core.crypto.generateSharedKey(l4, a2);
      i3.addTrace(sr2.create_authenticated_session_topic);
      let m3;
      if ((u3 == null ? void 0 : u3.length) > 0) {
        m3 = { topic: w3, acknowledged: true, self: { publicKey: l4, metadata: this.client.metadata }, peer: { publicKey: a2, metadata: r2.requester.metadata }, controller: a2, expiry: ii(X2), authentication: s, requiredNamespaces: {}, optionalNamespaces: {}, relay: { protocol: "irn" }, pairingTopic: r2.pairingTopic, namespaces: ga([...new Set(u3)], [...new Set(d3)]), transportType: n2 }, i3.addTrace(sr2.subscribing_authenticated_session_topic);
        try {
          await this.client.core.relayer.subscribe(w3, { transportType: n2 });
        } catch (y5) {
          throw i3.setError(rr2.subscribe_authenticated_session_topic_failure), y5;
        }
        i3.addTrace(sr2.subscribe_authenticated_session_topic_success), await this.client.session.set(w3, m3), i3.addTrace(sr2.store_authenticated_session), await this.client.core.pairing.updateMetadata({ topic: r2.pairingTopic, metadata: r2.requester.metadata });
      }
      i3.addTrace(sr2.publishing_authenticated_session_approve);
      try {
        await this.sendResult({ topic: p4, id: e, result: { cacaos: s, responder: { publicKey: l4, metadata: this.client.metadata } }, encodeOpts: h4, throwOnFailedPublish: true, appLink: this.getAppLinkIfEnabled(r2.requester.metadata, n2) });
      } catch (y5) {
        throw i3.setError(rr2.authenticated_session_approve_publish_failure), y5;
      }
      return await this.client.auth.requests.delete(e, { message: "fulfilled", code: 0 }), await this.client.core.pairing.activate({ topic: r2.pairingTopic }), this.client.core.eventClient.deleteEvent({ eventId: i3.eventId }), { session: m3 };
    }), c2(this, "rejectSessionAuthenticate", async (t) => {
      this.isInitialized();
      const { id: e, reason: s } = t, i3 = this.getPendingAuthRequest(e);
      if (!i3) throw new Error(`Could not find pending auth request with id ${e}`);
      i3.transportType === Q2.relay && await this.confirmOnlineStateOrThrow();
      const r2 = i3.requester.publicKey, n2 = await this.client.core.crypto.generateKeyPair(), a2 = Fc(r2), l4 = { type: ee, receiverPublicKey: r2, senderPublicKey: n2 };
      await this.sendError({ id: e, topic: a2, error: s, encodeOpts: l4, rpcOpts: N2.wc_sessionAuthenticate.reject, appLink: this.getAppLinkIfEnabled(i3.requester.metadata, i3.transportType) }), await this.client.auth.requests.delete(e, { message: "rejected", code: 0 }), await this.deleteProposal(e);
    }), c2(this, "formatAuthMessage", (t) => {
      this.isInitialized();
      const { request: e, iss: s } = t;
      return qr(e, s);
    }), c2(this, "processRelayMessageCache", () => {
      setTimeout(async () => {
        if (this.relayMessageCache.length !== 0) for (; this.relayMessageCache.length > 0; ) try {
          const t = this.relayMessageCache.shift();
          t && await this.onRelayMessage(t);
        } catch (t) {
          this.client.logger.error(t);
        }
      }, 50);
    }), c2(this, "cleanupDuplicatePairings", async (t) => {
      if (t.pairingTopic) try {
        const e = this.client.core.pairing.pairings.get(t.pairingTopic), s = this.client.core.pairing.pairings.getAll().filter((i3) => {
          var r2, n2;
          return ((r2 = i3.peerMetadata) == null ? void 0 : r2.url) && ((n2 = i3.peerMetadata) == null ? void 0 : n2.url) === t.peer.metadata.url && i3.topic && i3.topic !== e.topic;
        });
        if (s.length === 0) return;
        this.client.logger.info(`Cleaning up ${s.length} duplicate pairing(s)`), await Promise.all(s.map((i3) => this.client.core.pairing.disconnect({ topic: i3.topic }))), this.client.logger.info("Duplicate pairings clean up finished");
      } catch (e) {
        this.client.logger.error(e);
      }
    }), c2(this, "deleteSession", async (t) => {
      var e;
      const { topic: s, expirerHasDeleted: i3 = false, emitEvent: r2 = true, id: n2 = 0 } = t, { self: a2 } = this.client.session.get(s);
      await this.client.core.relayer.unsubscribe(s), await this.client.session.delete(s, Kt("USER_DISCONNECTED")), this.addToRecentlyDeleted(s, "session"), this.client.core.crypto.keychain.has(a2.publicKey) && await this.client.core.crypto.deleteKeyPair(a2.publicKey), this.client.core.crypto.keychain.has(s) && await this.client.core.crypto.deleteSymKey(s), i3 || this.client.core.expirer.del(s), this.client.core.storage.removeItem(Le3).catch((l4) => this.client.logger.warn(l4)), this.getPendingSessionRequests().forEach((l4) => {
        l4.topic === s && this.deletePendingSessionRequest(l4.id, Kt("USER_DISCONNECTED"));
      }), s === ((e = this.sessionRequestQueue.queue[0]) == null ? void 0 : e.topic) && (this.sessionRequestQueue.state = $2.idle), r2 && this.client.events.emit("session_delete", { id: n2, topic: s });
    }), c2(this, "deleteProposal", async (t, e) => {
      if (e) try {
        const s = this.client.proposal.get(t), i3 = this.client.core.eventClient.getEvent({ topic: s.pairingTopic });
        i3 == null ? void 0 : i3.setError(ir2.proposal_expired);
      } catch {
      }
      await Promise.all([this.client.proposal.delete(t, Kt("USER_DISCONNECTED")), e ? Promise.resolve() : this.client.core.expirer.del(t)]), this.addToRecentlyDeleted(t, "proposal");
    }), c2(this, "deletePendingSessionRequest", async (t, e, s = false) => {
      await Promise.all([this.client.pendingRequest.delete(t, e), s ? Promise.resolve() : this.client.core.expirer.del(t)]), this.addToRecentlyDeleted(t, "request"), this.sessionRequestQueue.queue = this.sessionRequestQueue.queue.filter((i3) => i3.id !== t), s && (this.sessionRequestQueue.state = $2.idle, this.client.events.emit("session_request_expire", { id: t }));
    }), c2(this, "deletePendingAuthRequest", async (t, e, s = false) => {
      await Promise.all([this.client.auth.requests.delete(t, e), s ? Promise.resolve() : this.client.core.expirer.del(t)]);
    }), c2(this, "setExpiry", async (t, e) => {
      this.client.session.keys.includes(t) && (this.client.core.expirer.set(t, e), await this.client.session.update(t, { expiry: e }));
    }), c2(this, "setProposal", async (t, e) => {
      this.client.core.expirer.set(t, ii(N2.wc_sessionPropose.req.ttl)), await this.client.proposal.set(t, e);
    }), c2(this, "setAuthRequest", async (t, e) => {
      const { request: s, pairingTopic: i3, transportType: r2 = Q2.relay } = e;
      this.client.core.expirer.set(t, s.expiryTimestamp), await this.client.auth.requests.set(t, { authPayload: s.authPayload, requester: s.requester, expiryTimestamp: s.expiryTimestamp, id: t, pairingTopic: i3, verifyContext: s.verifyContext, transportType: r2 });
    }), c2(this, "setPendingSessionRequest", async (t) => {
      const { id: e, topic: s, params: i3, verifyContext: r2 } = t, n2 = i3.request.expiryTimestamp || ii(N2.wc_sessionRequest.req.ttl);
      this.client.core.expirer.set(e, n2), await this.client.pendingRequest.set(e, { id: e, topic: s, params: i3, verifyContext: r2 });
    }), c2(this, "sendRequest", async (t) => {
      const { topic: e, method: s, params: i3, expiry: r2, relayRpcId: n2, clientRpcId: a2, throwOnFailedPublish: l4, appLink: p4, tvf: h4 } = t, u3 = formatJsonRpcRequest(s, i3, a2);
      let d3;
      const w3 = !!p4;
      try {
        const E5 = w3 ? De : Qt;
        d3 = await this.client.core.crypto.encode(e, u3, { encoding: E5 });
      } catch (E5) {
        throw await this.cleanup(), this.client.logger.error(`sendRequest() -> core.crypto.encode() for topic ${e} failed`), E5;
      }
      let m3;
      if (mt2.includes(s)) {
        const E5 = zc(JSON.stringify(u3)), _ = zc(d3);
        m3 = await this.client.core.verify.register({ id: _, decryptedId: E5 });
      }
      const y5 = N2[s].req;
      if (y5.attestation = m3, r2 && (y5.ttl = r2), n2 && (y5.id = n2), this.client.core.history.set(e, u3), w3) {
        const E5 = sa(p4, e, d3);
        await global.Linking.openURL(E5, this.client.name);
      } else {
        const E5 = N2[s].req;
        r2 && (E5.ttl = r2), n2 && (E5.id = n2), E5.tvf = x(I2({}, h4), { correlationId: u3.id }), l4 ? (E5.internal = x(I2({}, E5.internal), { throwOnFailedPublish: true }), await this.client.core.relayer.publish(e, d3, E5)) : this.client.core.relayer.publish(e, d3, E5).catch((_) => this.client.logger.error(_));
      }
      return u3.id;
    }), c2(this, "sendResult", async (t) => {
      const { id: e, topic: s, result: i3, throwOnFailedPublish: r2, encodeOpts: n2, appLink: a2 } = t, l4 = formatJsonRpcResult(e, i3);
      let p4;
      const h4 = a2 && typeof (global == null ? void 0 : global.Linking) < "u";
      try {
        const w3 = h4 ? De : Qt;
        p4 = await this.client.core.crypto.encode(s, l4, x(I2({}, n2 || {}), { encoding: w3 }));
      } catch (w3) {
        throw await this.cleanup(), this.client.logger.error(`sendResult() -> core.crypto.encode() for topic ${s} failed`), w3;
      }
      let u3, d3;
      try {
        u3 = await this.client.core.history.get(s, e);
        const w3 = u3.request;
        try {
          d3 = this.getTVFParams(e, w3.params, i3);
        } catch (m3) {
          this.client.logger.warn(`sendResult() -> getTVFParams() failed: ${m3 == null ? void 0 : m3.message}`);
        }
      } catch (w3) {
        throw this.client.logger.error(`sendResult() -> history.get(${s}, ${e}) failed`), w3;
      }
      if (h4) {
        const w3 = sa(a2, s, p4);
        await global.Linking.openURL(w3, this.client.name);
      } else {
        const w3 = u3.request.method, m3 = N2[w3].res;
        m3.tvf = x(I2({}, d3), { correlationId: e }), r2 ? (m3.internal = x(I2({}, m3.internal), { throwOnFailedPublish: true }), await this.client.core.relayer.publish(s, p4, m3)) : this.client.core.relayer.publish(s, p4, m3).catch((y5) => this.client.logger.error(y5));
      }
      await this.client.core.history.resolve(l4);
    }), c2(this, "sendError", async (t) => {
      const { id: e, topic: s, error: i3, encodeOpts: r2, rpcOpts: n2, appLink: a2 } = t, l4 = formatJsonRpcError(e, i3);
      let p4;
      const h4 = a2 && typeof (global == null ? void 0 : global.Linking) < "u";
      try {
        const d3 = h4 ? De : Qt;
        p4 = await this.client.core.crypto.encode(s, l4, x(I2({}, r2 || {}), { encoding: d3 }));
      } catch (d3) {
        throw await this.cleanup(), this.client.logger.error(`sendError() -> core.crypto.encode() for topic ${s} failed`), d3;
      }
      let u3;
      try {
        u3 = await this.client.core.history.get(s, e);
      } catch (d3) {
        throw this.client.logger.error(`sendError() -> history.get(${s}, ${e}) failed`), d3;
      }
      if (h4) {
        const d3 = sa(a2, s, p4);
        await global.Linking.openURL(d3, this.client.name);
      } else {
        const d3 = u3.request.method, w3 = n2 || N2[d3].res;
        this.client.core.relayer.publish(s, p4, w3);
      }
      await this.client.core.history.resolve(l4);
    }), c2(this, "cleanup", async () => {
      const t = [], e = [];
      this.client.session.getAll().forEach((s) => {
        let i3 = false;
        fi(s.expiry) && (i3 = true), this.client.core.crypto.keychain.has(s.topic) || (i3 = true), i3 && t.push(s.topic);
      }), this.client.proposal.getAll().forEach((s) => {
        fi(s.expiryTimestamp) && e.push(s.id);
      }), await Promise.all([...t.map((s) => this.deleteSession({ topic: s })), ...e.map((s) => this.deleteProposal(s))]);
    }), c2(this, "onProviderMessageEvent", async (t) => {
      !this.initialized || this.relayMessageCache.length > 0 ? this.relayMessageCache.push(t) : await this.onRelayMessage(t);
    }), c2(this, "onRelayEventRequest", async (t) => {
      this.requestQueue.queue.push(t), await this.processRequestsQueue();
    }), c2(this, "processRequestsQueue", async () => {
      if (this.requestQueue.state === $2.active) {
        this.client.logger.info("Request queue already active, skipping...");
        return;
      }
      for (this.client.logger.info(`Request queue starting with ${this.requestQueue.queue.length} requests`); this.requestQueue.queue.length > 0; ) {
        this.requestQueue.state = $2.active;
        const t = this.requestQueue.queue.shift();
        if (t) try {
          await this.processRequest(t);
        } catch (e) {
          this.client.logger.warn(e);
        }
      }
      this.requestQueue.state = $2.idle;
    }), c2(this, "processRequest", async (t) => {
      const { topic: e, payload: s, attestation: i3, transportType: r2, encryptedId: n2 } = t, a2 = s.method;
      if (!this.shouldIgnorePairingRequest({ topic: e, requestMethod: a2 })) switch (a2) {
        case "wc_sessionPropose":
          return await this.onSessionProposeRequest({ topic: e, payload: s, attestation: i3, encryptedId: n2 });
        case "wc_sessionSettle":
          return await this.onSessionSettleRequest(e, s);
        case "wc_sessionUpdate":
          return await this.onSessionUpdateRequest(e, s);
        case "wc_sessionExtend":
          return await this.onSessionExtendRequest(e, s);
        case "wc_sessionPing":
          return await this.onSessionPingRequest(e, s);
        case "wc_sessionDelete":
          return await this.onSessionDeleteRequest(e, s);
        case "wc_sessionRequest":
          return await this.onSessionRequest({ topic: e, payload: s, attestation: i3, encryptedId: n2, transportType: r2 });
        case "wc_sessionEvent":
          return await this.onSessionEventRequest(e, s);
        case "wc_sessionAuthenticate":
          return await this.onSessionAuthenticateRequest({ topic: e, payload: s, attestation: i3, encryptedId: n2, transportType: r2 });
        default:
          return this.client.logger.info(`Unsupported request method ${a2}`);
      }
    }), c2(this, "onRelayEventResponse", async (t) => {
      const { topic: e, payload: s, transportType: i3 } = t, r2 = (await this.client.core.history.get(e, s.id)).request.method;
      switch (r2) {
        case "wc_sessionPropose":
          return this.onSessionProposeResponse(e, s, i3);
        case "wc_sessionSettle":
          return this.onSessionSettleResponse(e, s);
        case "wc_sessionUpdate":
          return this.onSessionUpdateResponse(e, s);
        case "wc_sessionExtend":
          return this.onSessionExtendResponse(e, s);
        case "wc_sessionPing":
          return this.onSessionPingResponse(e, s);
        case "wc_sessionRequest":
          return this.onSessionRequestResponse(e, s);
        case "wc_sessionAuthenticate":
          return this.onSessionAuthenticateResponse(e, s);
        default:
          return this.client.logger.info(`Unsupported response method ${r2}`);
      }
    }), c2(this, "onRelayEventUnknownPayload", (t) => {
      const { topic: e } = t, { message: s } = Et("MISSING_OR_INVALID", `Decoded payload on topic ${e} is not identifiable as a JSON-RPC request or a response.`);
      throw new Error(s);
    }), c2(this, "shouldIgnorePairingRequest", (t) => {
      const { topic: e, requestMethod: s } = t, i3 = this.expectedPairingMethodMap.get(e);
      return !i3 || i3.includes(s) ? false : !!(i3.includes("wc_sessionAuthenticate") && this.client.events.listenerCount("session_authenticate") > 0);
    }), c2(this, "onSessionProposeRequest", async (t) => {
      const { topic: e, payload: s, attestation: i3, encryptedId: r2 } = t, { params: n2, id: a2 } = s;
      try {
        const l4 = this.client.core.eventClient.getEvent({ topic: e });
        this.client.events.listenerCount("session_proposal") === 0 && (console.warn("No listener for session_proposal event"), l4 == null ? void 0 : l4.setError(Y2.proposal_listener_not_found)), this.isValidConnect(I2({}, s.params));
        const p4 = n2.expiryTimestamp || ii(N2.wc_sessionPropose.req.ttl), h4 = I2({ id: a2, pairingTopic: e, expiryTimestamp: p4, attestation: i3, encryptedId: r2 }, n2);
        await this.setProposal(a2, h4);
        const u3 = await this.getVerifyContext({ attestationId: i3, hash: zc(JSON.stringify(s)), encryptedId: r2, metadata: h4.proposer.metadata });
        l4 == null ? void 0 : l4.addTrace(G2.emit_session_proposal), this.client.events.emit("session_proposal", { id: a2, params: h4, verifyContext: u3 });
      } catch (l4) {
        await this.sendError({ id: a2, topic: e, error: l4, rpcOpts: N2.wc_sessionPropose.autoReject }), this.client.logger.error(l4);
      }
    }), c2(this, "onSessionProposeResponse", async (t, e, s) => {
      const { id: i3 } = e;
      if (isJsonRpcResult(e)) {
        const { result: r2 } = e;
        this.client.logger.trace({ type: "method", method: "onSessionProposeResponse", result: r2 });
        const n2 = this.client.proposal.get(i3);
        this.client.logger.trace({ type: "method", method: "onSessionProposeResponse", proposal: n2 });
        const a2 = n2.proposer.publicKey;
        this.client.logger.trace({ type: "method", method: "onSessionProposeResponse", selfPublicKey: a2 });
        const l4 = r2.responderPublicKey;
        this.client.logger.trace({ type: "method", method: "onSessionProposeResponse", peerPublicKey: l4 });
        const p4 = await this.client.core.crypto.generateSharedKey(a2, l4);
        this.pendingSessions.set(i3, { sessionTopic: p4, pairingTopic: t, proposalId: i3, publicKey: a2 });
        const h4 = await this.client.core.relayer.subscribe(p4, { transportType: s });
        this.client.logger.trace({ type: "method", method: "onSessionProposeResponse", subscriptionId: h4 }), await this.client.core.pairing.activate({ topic: t });
      } else if (isJsonRpcError(e)) {
        await this.deleteProposal(i3);
        const r2 = ci("session_connect", i3);
        if (this.events.listenerCount(r2) === 0) throw new Error(`emitting ${r2} without any listeners, 954`);
        this.events.emit(r2, { error: e.error });
      }
    }), c2(this, "onSessionSettleRequest", async (t, e) => {
      const { id: s, params: i3 } = e;
      try {
        this.isValidSessionSettleRequest(i3);
        const { relay: r2, controller: n2, expiry: a2, namespaces: l4, sessionProperties: p4, scopedProperties: h4, sessionConfig: u3 } = e.params, d3 = [...this.pendingSessions.values()].find((y5) => y5.sessionTopic === t);
        if (!d3) return this.client.logger.error(`Pending session not found for topic ${t}`);
        const w3 = this.client.proposal.get(d3.proposalId), m3 = x(I2(I2(I2({ topic: t, relay: r2, expiry: a2, namespaces: l4, acknowledged: true, pairingTopic: d3.pairingTopic, requiredNamespaces: w3.requiredNamespaces, optionalNamespaces: w3.optionalNamespaces, controller: n2.publicKey, self: { publicKey: d3.publicKey, metadata: this.client.metadata }, peer: { publicKey: n2.publicKey, metadata: n2.metadata } }, p4 && { sessionProperties: p4 }), h4 && { scopedProperties: h4 }), u3 && { sessionConfig: u3 }), { transportType: Q2.relay });
        await this.client.session.set(m3.topic, m3), await this.setExpiry(m3.topic, m3.expiry), await this.client.core.pairing.updateMetadata({ topic: d3.pairingTopic, metadata: m3.peer.metadata }), this.client.events.emit("session_connect", { session: m3 }), this.events.emit(ci("session_connect", d3.proposalId), { session: m3 }), this.pendingSessions.delete(d3.proposalId), this.deleteProposal(d3.proposalId, false), this.cleanupDuplicatePairings(m3), await this.sendResult({ id: e.id, topic: t, result: true });
      } catch (r2) {
        await this.sendError({ id: s, topic: t, error: r2 }), this.client.logger.error(r2);
      }
    }), c2(this, "onSessionSettleResponse", async (t, e) => {
      const { id: s } = e;
      isJsonRpcResult(e) ? (await this.client.session.update(t, { acknowledged: true }), this.events.emit(ci("session_approve", s), {})) : isJsonRpcError(e) && (await this.client.session.delete(t, Kt("USER_DISCONNECTED")), this.events.emit(ci("session_approve", s), { error: e.error }));
    }), c2(this, "onSessionUpdateRequest", async (t, e) => {
      const { params: s, id: i3 } = e;
      try {
        const r2 = `${t}_session_update`, n2 = Ha.get(r2);
        if (n2 && this.isRequestOutOfSync(n2, i3)) {
          this.client.logger.warn(`Discarding out of sync request - ${i3}`), this.sendError({ id: i3, topic: t, error: Kt("INVALID_UPDATE_REQUEST") });
          return;
        }
        this.isValidUpdate(I2({ topic: t }, s));
        try {
          Ha.set(r2, i3), await this.client.session.update(t, { namespaces: s.namespaces }), await this.sendResult({ id: i3, topic: t, result: true });
        } catch (a2) {
          throw Ha.delete(r2), a2;
        }
        this.client.events.emit("session_update", { id: i3, topic: t, params: s });
      } catch (r2) {
        await this.sendError({ id: i3, topic: t, error: r2 }), this.client.logger.error(r2);
      }
    }), c2(this, "isRequestOutOfSync", (t, e) => e.toString().slice(0, -3) < t.toString().slice(0, -3)), c2(this, "onSessionUpdateResponse", (t, e) => {
      const { id: s } = e, i3 = ci("session_update", s);
      if (this.events.listenerCount(i3) === 0) throw new Error(`emitting ${i3} without any listeners`);
      isJsonRpcResult(e) ? this.events.emit(ci("session_update", s), {}) : isJsonRpcError(e) && this.events.emit(ci("session_update", s), { error: e.error });
    }), c2(this, "onSessionExtendRequest", async (t, e) => {
      const { id: s } = e;
      try {
        this.isValidExtend({ topic: t }), await this.setExpiry(t, ii(X2)), await this.sendResult({ id: s, topic: t, result: true }), this.client.events.emit("session_extend", { id: s, topic: t });
      } catch (i3) {
        await this.sendError({ id: s, topic: t, error: i3 }), this.client.logger.error(i3);
      }
    }), c2(this, "onSessionExtendResponse", (t, e) => {
      const { id: s } = e, i3 = ci("session_extend", s);
      if (this.events.listenerCount(i3) === 0) throw new Error(`emitting ${i3} without any listeners`);
      isJsonRpcResult(e) ? this.events.emit(ci("session_extend", s), {}) : isJsonRpcError(e) && this.events.emit(ci("session_extend", s), { error: e.error });
    }), c2(this, "onSessionPingRequest", async (t, e) => {
      const { id: s } = e;
      try {
        this.isValidPing({ topic: t }), await this.sendResult({ id: s, topic: t, result: true, throwOnFailedPublish: true }), this.client.events.emit("session_ping", { id: s, topic: t });
      } catch (i3) {
        await this.sendError({ id: s, topic: t, error: i3 }), this.client.logger.error(i3);
      }
    }), c2(this, "onSessionPingResponse", (t, e) => {
      const { id: s } = e, i3 = ci("session_ping", s);
      setTimeout(() => {
        if (this.events.listenerCount(i3) === 0) throw new Error(`emitting ${i3} without any listeners 2176`);
        isJsonRpcResult(e) ? this.events.emit(ci("session_ping", s), {}) : isJsonRpcError(e) && this.events.emit(ci("session_ping", s), { error: e.error });
      }, 500);
    }), c2(this, "onSessionDeleteRequest", async (t, e) => {
      const { id: s } = e;
      try {
        this.isValidDisconnect({ topic: t, reason: e.params }), Promise.all([new Promise((i3) => {
          this.client.core.relayer.once(C2.publish, async () => {
            i3(await this.deleteSession({ topic: t, id: s }));
          });
        }), this.sendResult({ id: s, topic: t, result: true }), this.cleanupPendingSentRequestsForTopic({ topic: t, error: Kt("USER_DISCONNECTED") })]).catch((i3) => this.client.logger.error(i3));
      } catch (i3) {
        this.client.logger.error(i3);
      }
    }), c2(this, "onSessionRequest", async (t) => {
      var e, s, i3;
      const { topic: r2, payload: n2, attestation: a2, encryptedId: l4, transportType: p4 } = t, { id: h4, params: u3 } = n2;
      try {
        await this.isValidRequest(I2({ topic: r2 }, u3));
        const d3 = this.client.session.get(r2), w3 = await this.getVerifyContext({ attestationId: a2, hash: zc(JSON.stringify(formatJsonRpcRequest("wc_sessionRequest", u3, h4))), encryptedId: l4, metadata: d3.peer.metadata, transportType: p4 }), m3 = { id: h4, topic: r2, params: u3, verifyContext: w3 };
        await this.setPendingSessionRequest(m3), p4 === Q2.link_mode && (e = d3.peer.metadata.redirect) != null && e.universal && this.client.core.addLinkModeSupportedApp((s = d3.peer.metadata.redirect) == null ? void 0 : s.universal), (i3 = this.client.signConfig) != null && i3.disableRequestQueue ? this.emitSessionRequest(m3) : (this.addSessionRequestToSessionRequestQueue(m3), this.processSessionRequestQueue());
      } catch (d3) {
        await this.sendError({ id: h4, topic: r2, error: d3 }), this.client.logger.error(d3);
      }
    }), c2(this, "onSessionRequestResponse", (t, e) => {
      const { id: s } = e, i3 = ci("session_request", s);
      if (this.events.listenerCount(i3) === 0) throw new Error(`emitting ${i3} without any listeners`);
      isJsonRpcResult(e) ? this.events.emit(ci("session_request", s), { result: e.result }) : isJsonRpcError(e) && this.events.emit(ci("session_request", s), { error: e.error });
    }), c2(this, "onSessionEventRequest", async (t, e) => {
      const { id: s, params: i3 } = e;
      try {
        const r2 = `${t}_session_event_${i3.event.name}`, n2 = Ha.get(r2);
        if (n2 && this.isRequestOutOfSync(n2, s)) {
          this.client.logger.info(`Discarding out of sync request - ${s}`);
          return;
        }
        this.isValidEmit(I2({ topic: t }, i3)), this.client.events.emit("session_event", { id: s, topic: t, params: i3 }), Ha.set(r2, s);
      } catch (r2) {
        await this.sendError({ id: s, topic: t, error: r2 }), this.client.logger.error(r2);
      }
    }), c2(this, "onSessionAuthenticateResponse", (t, e) => {
      const { id: s } = e;
      this.client.logger.trace({ type: "method", method: "onSessionAuthenticateResponse", topic: t, payload: e }), isJsonRpcResult(e) ? this.events.emit(ci("session_request", s), { result: e.result }) : isJsonRpcError(e) && this.events.emit(ci("session_request", s), { error: e.error });
    }), c2(this, "onSessionAuthenticateRequest", async (t) => {
      var e;
      const { topic: s, payload: i3, attestation: r2, encryptedId: n2, transportType: a2 } = t;
      try {
        const { requester: l4, authPayload: p4, expiryTimestamp: h4 } = i3.params, u3 = await this.getVerifyContext({ attestationId: r2, hash: zc(JSON.stringify(i3)), encryptedId: n2, metadata: l4.metadata, transportType: a2 }), d3 = { requester: l4, pairingTopic: s, id: i3.id, authPayload: p4, verifyContext: u3, expiryTimestamp: h4 };
        await this.setAuthRequest(i3.id, { request: d3, pairingTopic: s, transportType: a2 }), a2 === Q2.link_mode && (e = l4.metadata.redirect) != null && e.universal && this.client.core.addLinkModeSupportedApp(l4.metadata.redirect.universal), this.client.events.emit("session_authenticate", { topic: s, params: i3.params, id: i3.id, verifyContext: u3 });
      } catch (l4) {
        this.client.logger.error(l4);
        const p4 = i3.params.requester.publicKey, h4 = await this.client.core.crypto.generateKeyPair(), u3 = this.getAppLinkIfEnabled(i3.params.requester.metadata, a2), d3 = { type: ee, receiverPublicKey: p4, senderPublicKey: h4 };
        await this.sendError({ id: i3.id, topic: s, error: l4, encodeOpts: d3, rpcOpts: N2.wc_sessionAuthenticate.autoReject, appLink: u3 });
      }
    }), c2(this, "addSessionRequestToSessionRequestQueue", (t) => {
      this.sessionRequestQueue.queue.push(t);
    }), c2(this, "cleanupAfterResponse", (t) => {
      this.deletePendingSessionRequest(t.response.id, { message: "fulfilled", code: 0 }), setTimeout(() => {
        this.sessionRequestQueue.state = $2.idle, this.processSessionRequestQueue();
      }, (0, import_time3.toMiliseconds)(this.requestQueueDelay));
    }), c2(this, "cleanupPendingSentRequestsForTopic", ({ topic: t, error: e }) => {
      const s = this.client.core.history.pending;
      s.length > 0 && s.filter((i3) => i3.topic === t && i3.request.method === "wc_sessionRequest").forEach((i3) => {
        const r2 = i3.request.id, n2 = ci("session_request", r2);
        if (this.events.listenerCount(n2) === 0) throw new Error(`emitting ${n2} without any listeners`);
        this.events.emit(ci("session_request", i3.request.id), { error: e });
      });
    }), c2(this, "processSessionRequestQueue", () => {
      if (this.sessionRequestQueue.state === $2.active) {
        this.client.logger.info("session request queue is already active.");
        return;
      }
      const t = this.sessionRequestQueue.queue[0];
      if (!t) {
        this.client.logger.info("session request queue is empty.");
        return;
      }
      try {
        this.emitSessionRequest(t);
      } catch (e) {
        this.client.logger.error(e);
      }
    }), c2(this, "emitSessionRequest", (t) => {
      if (this.emittedSessionRequests.has(t.id)) {
        this.client.logger.warn({ id: t.id }, `Skipping emitting \`session_request\` event for duplicate request. id: ${t.id}`);
        return;
      }
      this.sessionRequestQueue.state = $2.active, this.emittedSessionRequests.add(t.id), this.client.events.emit("session_request", t);
    }), c2(this, "onPairingCreated", (t) => {
      if (t.methods && this.expectedPairingMethodMap.set(t.topic, t.methods), t.active) return;
      const e = this.client.proposal.getAll().find((s) => s.pairingTopic === t.topic);
      e && this.onSessionProposeRequest({ topic: t.topic, payload: formatJsonRpcRequest("wc_sessionPropose", x(I2({}, e), { requiredNamespaces: e.requiredNamespaces, optionalNamespaces: e.optionalNamespaces, relays: e.relays, proposer: e.proposer, sessionProperties: e.sessionProperties, scopedProperties: e.scopedProperties }), e.id), attestation: e.attestation, encryptedId: e.encryptedId });
    }), c2(this, "isValidConnect", async (t) => {
      if (!Aa(t)) {
        const { message: l4 } = Et("MISSING_OR_INVALID", `connect() params: ${JSON.stringify(t)}`);
        throw new Error(l4);
      }
      const { pairingTopic: e, requiredNamespaces: s, optionalNamespaces: i3, sessionProperties: r2, scopedProperties: n2, relays: a2 } = t;
      if (kt(e) || await this.isValidPairingTopic(e), !Ba(a2, true)) {
        const { message: l4 } = Et("MISSING_OR_INVALID", `connect() relays: ${a2}`);
        throw new Error(l4);
      }
      if (!kt(s) && Ve(s) !== 0) {
        const l4 = "requiredNamespaces are deprecated and are automatically assigned to optionalNamespaces";
        ["fatal", "error", "silent"].includes(this.client.logger.level) ? console.warn(l4) : this.client.logger.warn(l4), this.validateNamespaces(s, "requiredNamespaces");
      }
      if (!kt(i3) && Ve(i3) !== 0 && this.validateNamespaces(i3, "optionalNamespaces"), kt(r2) || this.validateSessionProps(r2, "sessionProperties"), !kt(n2)) {
        this.validateSessionProps(n2, "scopedProperties");
        const l4 = Object.keys(s || {}).concat(Object.keys(i3 || {}));
        if (!Object.keys(n2).every((p4) => l4.includes(p4.split(":")[0]))) throw new Error(`Scoped properties must be a subset of required/optional namespaces, received: ${JSON.stringify(n2)}, required/optional namespaces: ${JSON.stringify(l4)}`);
      }
    }), c2(this, "validateNamespaces", (t, e) => {
      const s = Ea(t, "connect()", e);
      if (s) throw new Error(s.message);
    }), c2(this, "isValidApprove", async (t) => {
      if (!Aa(t)) throw new Error(Et("MISSING_OR_INVALID", `approve() params: ${t}`).message);
      const { id: e, namespaces: s, relayProtocol: i3, sessionProperties: r2, scopedProperties: n2 } = t;
      this.checkRecentlyDeleted(e), await this.isValidProposalId(e);
      const a2 = this.client.proposal.get(e), l4 = is(s, "approve()");
      if (l4) throw new Error(l4.message);
      const p4 = cs(a2.requiredNamespaces, s, "approve()");
      if (p4) throw new Error(p4.message);
      if (!it(i3, true)) {
        const { message: h4 } = Et("MISSING_OR_INVALID", `approve() relayProtocol: ${i3}`);
        throw new Error(h4);
      }
      if (kt(r2) || this.validateSessionProps(r2, "sessionProperties"), !kt(n2)) {
        this.validateSessionProps(n2, "scopedProperties");
        const h4 = new Set(Object.keys(s));
        if (!Object.keys(n2).every((u3) => h4.has(u3.split(":")[0]))) throw new Error(`Scoped properties must be a subset of approved namespaces, received: ${JSON.stringify(n2)}, approved namespaces: ${Array.from(h4).join(", ")}`);
      }
    }), c2(this, "isValidReject", async (t) => {
      if (!Aa(t)) {
        const { message: i3 } = Et("MISSING_OR_INVALID", `reject() params: ${t}`);
        throw new Error(i3);
      }
      const { id: e, reason: s } = t;
      if (this.checkRecentlyDeleted(e), await this.isValidProposalId(e), !Sa(s)) {
        const { message: i3 } = Et("MISSING_OR_INVALID", `reject() reason: ${JSON.stringify(s)}`);
        throw new Error(i3);
      }
    }), c2(this, "isValidSessionSettleRequest", (t) => {
      if (!Aa(t)) {
        const { message: l4 } = Et("MISSING_OR_INVALID", `onSessionSettleRequest() params: ${t}`);
        throw new Error(l4);
      }
      const { relay: e, controller: s, namespaces: i3, expiry: r2 } = t;
      if (!fs(e)) {
        const { message: l4 } = Et("MISSING_OR_INVALID", "onSessionSettleRequest() relay protocol should be a string");
        throw new Error(l4);
      }
      const n2 = va(s, "onSessionSettleRequest()");
      if (n2) throw new Error(n2.message);
      const a2 = is(i3, "onSessionSettleRequest()");
      if (a2) throw new Error(a2.message);
      if (fi(r2)) {
        const { message: l4 } = Et("EXPIRED", "onSessionSettleRequest()");
        throw new Error(l4);
      }
    }), c2(this, "isValidUpdate", async (t) => {
      if (!Aa(t)) {
        const { message: a2 } = Et("MISSING_OR_INVALID", `update() params: ${t}`);
        throw new Error(a2);
      }
      const { topic: e, namespaces: s } = t;
      this.checkRecentlyDeleted(e), await this.isValidSessionTopic(e);
      const i3 = this.client.session.get(e), r2 = is(s, "update()");
      if (r2) throw new Error(r2.message);
      const n2 = cs(i3.requiredNamespaces, s, "update()");
      if (n2) throw new Error(n2.message);
    }), c2(this, "isValidExtend", async (t) => {
      if (!Aa(t)) {
        const { message: s } = Et("MISSING_OR_INVALID", `extend() params: ${t}`);
        throw new Error(s);
      }
      const { topic: e } = t;
      this.checkRecentlyDeleted(e), await this.isValidSessionTopic(e);
    }), c2(this, "isValidRequest", async (t) => {
      if (!Aa(t)) {
        const { message: a2 } = Et("MISSING_OR_INVALID", `request() params: ${t}`);
        throw new Error(a2);
      }
      const { topic: e, request: s, chainId: i3, expiry: r2 } = t;
      this.checkRecentlyDeleted(e), await this.isValidSessionTopic(e);
      const { namespaces: n2 } = this.client.session.get(e);
      if (!_a(n2, i3)) {
        const { message: a2 } = Et("MISSING_OR_INVALID", `request() chainId: ${i3}`);
        throw new Error(a2);
      }
      if (!Na(s)) {
        const { message: a2 } = Et("MISSING_OR_INVALID", `request() ${JSON.stringify(s)}`);
        throw new Error(a2);
      }
      if (!Ta(n2, i3, s.method)) {
        const { message: a2 } = Et("MISSING_OR_INVALID", `request() method: ${s.method}`);
        throw new Error(a2);
      }
      if (r2 && !La(r2, _e3)) {
        const { message: a2 } = Et("MISSING_OR_INVALID", `request() expiry: ${r2}. Expiry must be a number (in seconds) between ${_e3.min} and ${_e3.max}`);
        throw new Error(a2);
      }
    }), c2(this, "isValidRespond", async (t) => {
      var e;
      if (!Aa(t)) {
        const { message: r2 } = Et("MISSING_OR_INVALID", `respond() params: ${t}`);
        throw new Error(r2);
      }
      const { topic: s, response: i3 } = t;
      try {
        await this.isValidSessionTopic(s);
      } catch (r2) {
        throw (e = t == null ? void 0 : t.response) != null && e.id && this.cleanupAfterResponse(t), r2;
      }
      if (!Oa(i3)) {
        const { message: r2 } = Et("MISSING_OR_INVALID", `respond() response: ${JSON.stringify(i3)}`);
        throw new Error(r2);
      }
    }), c2(this, "isValidPing", async (t) => {
      if (!Aa(t)) {
        const { message: s } = Et("MISSING_OR_INVALID", `ping() params: ${t}`);
        throw new Error(s);
      }
      const { topic: e } = t;
      await this.isValidSessionOrPairingTopic(e);
    }), c2(this, "isValidEmit", async (t) => {
      if (!Aa(t)) {
        const { message: n2 } = Et("MISSING_OR_INVALID", `emit() params: ${t}`);
        throw new Error(n2);
      }
      const { topic: e, event: s, chainId: i3 } = t;
      await this.isValidSessionTopic(e);
      const { namespaces: r2 } = this.client.session.get(e);
      if (!_a(r2, i3)) {
        const { message: n2 } = Et("MISSING_OR_INVALID", `emit() chainId: ${i3}`);
        throw new Error(n2);
      }
      if (!Ua(s)) {
        const { message: n2 } = Et("MISSING_OR_INVALID", `emit() event: ${JSON.stringify(s)}`);
        throw new Error(n2);
      }
      if (!Ra(r2, i3, s.name)) {
        const { message: n2 } = Et("MISSING_OR_INVALID", `emit() event: ${JSON.stringify(s)}`);
        throw new Error(n2);
      }
    }), c2(this, "isValidDisconnect", async (t) => {
      if (!Aa(t)) {
        const { message: s } = Et("MISSING_OR_INVALID", `disconnect() params: ${t}`);
        throw new Error(s);
      }
      const { topic: e } = t;
      await this.isValidSessionOrPairingTopic(e);
    }), c2(this, "isValidAuthenticate", (t) => {
      const { chains: e, uri: s, domain: i3, nonce: r2 } = t;
      if (!Array.isArray(e) || e.length === 0) throw new Error("chains is required and must be a non-empty array");
      if (!it(s, false)) throw new Error("uri is required parameter");
      if (!it(i3, false)) throw new Error("domain is required parameter");
      if (!it(r2, false)) throw new Error("nonce is required parameter");
      if ([...new Set(e.map((a2) => Fe(a2).namespace))].length > 1) throw new Error("Multi-namespace requests are not supported. Please request single namespace only.");
      const { namespace: n2 } = Fe(e[0]);
      if (n2 !== "eip155") throw new Error("Only eip155 namespace is supported for authenticated sessions. Please use .connect() for non-eip155 chains.");
    }), c2(this, "getVerifyContext", async (t) => {
      const { attestationId: e, hash: s, encryptedId: i3, metadata: r2, transportType: n2 } = t, a2 = { verified: { verifyUrl: r2.verifyUrl || ue2, validation: "UNKNOWN", origin: r2.url || "" } };
      try {
        if (n2 === Q2.link_mode) {
          const p4 = this.getAppLinkIfEnabled(r2, n2);
          return a2.verified.validation = p4 && new URL(p4).origin === new URL(r2.url).origin ? "VALID" : "INVALID", a2;
        }
        const l4 = await this.client.core.verify.resolve({ attestationId: e, hash: s, encryptedId: i3, verifyUrl: r2.verifyUrl });
        l4 && (a2.verified.origin = l4.origin, a2.verified.isScam = l4.isScam, a2.verified.validation = l4.origin === new URL(r2.url).origin ? "VALID" : "INVALID");
      } catch (l4) {
        this.client.logger.warn(l4);
      }
      return this.client.logger.debug(`Verify context: ${JSON.stringify(a2)}`), a2;
    }), c2(this, "validateSessionProps", (t, e) => {
      Object.values(t).forEach((s, i3) => {
        if (s == null) {
          const { message: r2 } = Et("MISSING_OR_INVALID", `${e} must contain an existing value for each key. Received: ${s} for key ${Object.keys(t)[i3]}`);
          throw new Error(r2);
        }
      });
    }), c2(this, "getPendingAuthRequest", (t) => {
      const e = this.client.auth.requests.get(t);
      return typeof e == "object" ? e : void 0;
    }), c2(this, "addToRecentlyDeleted", (t, e) => {
      if (this.recentlyDeletedMap.set(t, e), this.recentlyDeletedMap.size >= this.recentlyDeletedLimit) {
        let s = 0;
        const i3 = this.recentlyDeletedLimit / 2;
        for (const r2 of this.recentlyDeletedMap.keys()) {
          if (s++ >= i3) break;
          this.recentlyDeletedMap.delete(r2);
        }
      }
    }), c2(this, "checkRecentlyDeleted", (t) => {
      const e = this.recentlyDeletedMap.get(t);
      if (e) {
        const { message: s } = Et("MISSING_OR_INVALID", `Record was recently deleted - ${e}: ${t}`);
        throw new Error(s);
      }
    }), c2(this, "isLinkModeEnabled", (t, e) => {
      var s, i3, r2, n2, a2, l4, p4, h4, u3;
      return !t || e !== Q2.link_mode ? false : ((i3 = (s = this.client.metadata) == null ? void 0 : s.redirect) == null ? void 0 : i3.linkMode) === true && ((n2 = (r2 = this.client.metadata) == null ? void 0 : r2.redirect) == null ? void 0 : n2.universal) !== void 0 && ((l4 = (a2 = this.client.metadata) == null ? void 0 : a2.redirect) == null ? void 0 : l4.universal) !== "" && ((p4 = t == null ? void 0 : t.redirect) == null ? void 0 : p4.universal) !== void 0 && ((h4 = t == null ? void 0 : t.redirect) == null ? void 0 : h4.universal) !== "" && ((u3 = t == null ? void 0 : t.redirect) == null ? void 0 : u3.linkMode) === true && this.client.core.linkModeSupportedApps.includes(t.redirect.universal) && typeof (global == null ? void 0 : global.Linking) < "u";
    }), c2(this, "getAppLinkIfEnabled", (t, e) => {
      var s;
      return this.isLinkModeEnabled(t, e) ? (s = t == null ? void 0 : t.redirect) == null ? void 0 : s.universal : void 0;
    }), c2(this, "handleLinkModeMessage", ({ url: t }) => {
      if (!t || !t.includes("wc_ev") || !t.includes("topic")) return;
      const e = li(t, "topic") || "", s = decodeURIComponent(li(t, "wc_ev") || ""), i3 = this.client.session.keys.includes(e);
      i3 && this.client.session.update(e, { transportType: Q2.link_mode }), this.client.core.dispatchEnvelope({ topic: e, message: s, sessionExists: i3 });
    }), c2(this, "registerLinkModeListeners", async () => {
      var t;
      if (hi() || Bt() && (t = this.client.metadata.redirect) != null && t.linkMode) {
        const e = global == null ? void 0 : global.Linking;
        if (typeof e < "u") {
          e.addEventListener("url", this.handleLinkModeMessage, this.client.name);
          const s = await e.getInitialURL();
          s && setTimeout(() => {
            this.handleLinkModeMessage({ url: s });
          }, 50);
        }
      }
    }), c2(this, "getTVFParams", (t, e, s) => {
      var i3, r2, n2;
      if (!((i3 = e.request) != null && i3.method)) return {};
      const a2 = { correlationId: t, rpcMethods: [e.request.method], chainId: e.chainId };
      try {
        const l4 = this.extractTxHashesFromResult(e.request, s);
        a2.txHashes = l4, a2.contractAddresses = this.isValidContractData(e.request.params) ? [(n2 = (r2 = e.request.params) == null ? void 0 : r2[0]) == null ? void 0 : n2.to] : [];
      } catch (l4) {
        this.client.logger.warn("Error getting TVF params", l4);
      }
      return a2;
    }), c2(this, "isValidContractData", (t) => {
      var e;
      if (!t) return false;
      try {
        const s = (t == null ? void 0 : t.data) || ((e = t == null ? void 0 : t[0]) == null ? void 0 : e.data);
        if (!s.startsWith("0x")) return false;
        const i3 = s.slice(2);
        return /^[0-9a-fA-F]*$/.test(i3) ? i3.length % 2 === 0 : false;
      } catch {
      }
      return false;
    }), c2(this, "extractTxHashesFromResult", (t, e) => {
      var s;
      try {
        if (!e) return [];
        const i3 = t.method, r2 = gt2[i3];
        if (i3 === "sui_signTransaction") return [ff(e.transactionBytes)];
        if (i3 === "near_signTransaction") return [cf(e)];
        if (i3 === "near_signTransactions") return e.map((a2) => cf(a2));
        if (i3 === "xrpl_signTransactionFor" || i3 === "xrpl_signTransaction") return [(s = e.tx_json) == null ? void 0 : s.hash];
        if (i3 === "polkadot_signTransaction") return [Ka({ transaction: t.params.transactionPayload, signature: e.signature })];
        if (i3 === "algo_signTxn") return me(e) ? e.map((a2) => af(a2)) : [af(e)];
        if (i3 === "cosmos_signDirect") return [uf(e)];
        if (typeof e == "string") return [e];
        const n2 = e[r2.key];
        if (me(n2)) return i3 === "solana_signAllTransactions" ? n2.map((a2) => sf(a2)) : n2;
        if (typeof n2 == "string") return [n2];
      } catch (i3) {
        this.client.logger.warn("Error extracting tx hashes from result", i3);
      }
      return [];
    });
  }
  async processPendingMessageEvents() {
    try {
      const o3 = this.client.session.keys, t = this.client.core.relayer.messages.getWithoutAck(o3);
      for (const [e, s] of Object.entries(t)) for (const i3 of s) try {
        await this.onProviderMessageEvent({ topic: e, message: i3, publishedAt: Date.now() });
      } catch {
        this.client.logger.warn(`Error processing pending message event for topic: ${e}, message: ${i3}`);
      }
    } catch (o3) {
      this.client.logger.warn("processPendingMessageEvents failed", o3);
    }
  }
  isInitialized() {
    if (!this.initialized) {
      const { message: o3 } = Et("NOT_INITIALIZED", this.name);
      throw new Error(o3);
    }
  }
  async confirmOnlineStateOrThrow() {
    await this.client.core.relayer.confirmOnlineStateOrThrow();
  }
  registerRelayerEvents() {
    this.client.core.relayer.on(C2.message, (o3) => {
      this.onProviderMessageEvent(o3);
    });
  }
  async onRelayMessage(o3) {
    const { topic: t, message: e, attestation: s, transportType: i3 } = o3, { publicKey: r2 } = this.client.auth.authKeys.keys.includes(ce2) ? this.client.auth.authKeys.get(ce2) : { responseTopic: void 0, publicKey: void 0 };
    try {
      const n2 = await this.client.core.crypto.decode(t, e, { receiverPublicKey: r2, encoding: i3 === Q2.link_mode ? De : Qt });
      isJsonRpcRequest(n2) ? (this.client.core.history.set(t, n2), await this.onRelayEventRequest({ topic: t, payload: n2, attestation: s, transportType: i3, encryptedId: zc(e) })) : isJsonRpcResponse(n2) ? (await this.client.core.history.resolve(n2), await this.onRelayEventResponse({ topic: t, payload: n2, transportType: i3 }), this.client.core.history.delete(t, n2.id)) : await this.onRelayEventUnknownPayload({ topic: t, payload: n2, transportType: i3 }), await this.client.core.relayer.messages.ack(t, e);
    } catch (n2) {
      this.client.logger.error(n2);
    }
  }
  registerExpirerEvents() {
    this.client.core.expirer.on(M3.expired, async (o3) => {
      const { topic: t, id: e } = si(o3.target);
      if (e && this.client.pendingRequest.keys.includes(e)) return await this.deletePendingSessionRequest(e, Et("EXPIRED"), true);
      if (e && this.client.auth.requests.keys.includes(e)) return await this.deletePendingAuthRequest(e, Et("EXPIRED"), true);
      t ? this.client.session.keys.includes(t) && (await this.deleteSession({ topic: t, expirerHasDeleted: true }), this.client.events.emit("session_expire", { topic: t })) : e && (await this.deleteProposal(e, true), this.client.events.emit("proposal_expire", { id: e }));
    });
  }
  registerPairingEvents() {
    this.client.core.pairing.events.on(re.create, (o3) => this.onPairingCreated(o3)), this.client.core.pairing.events.on(re.delete, (o3) => {
      this.addToRecentlyDeleted(o3.topic, "pairing");
    });
  }
  isValidPairingTopic(o3) {
    if (!it(o3, false)) {
      const { message: t } = Et("MISSING_OR_INVALID", `pairing topic should be a string: ${o3}`);
      throw new Error(t);
    }
    if (!this.client.core.pairing.pairings.keys.includes(o3)) {
      const { message: t } = Et("NO_MATCHING_KEY", `pairing topic doesn't exist: ${o3}`);
      throw new Error(t);
    }
    if (fi(this.client.core.pairing.pairings.get(o3).expiry)) {
      const { message: t } = Et("EXPIRED", `pairing topic: ${o3}`);
      throw new Error(t);
    }
  }
  async isValidSessionTopic(o3) {
    if (!it(o3, false)) {
      const { message: t } = Et("MISSING_OR_INVALID", `session topic should be a string: ${o3}`);
      throw new Error(t);
    }
    if (this.checkRecentlyDeleted(o3), !this.client.session.keys.includes(o3)) {
      const { message: t } = Et("NO_MATCHING_KEY", `session topic doesn't exist: ${o3}`);
      throw new Error(t);
    }
    if (fi(this.client.session.get(o3).expiry)) {
      await this.deleteSession({ topic: o3 });
      const { message: t } = Et("EXPIRED", `session topic: ${o3}`);
      throw new Error(t);
    }
    if (!this.client.core.crypto.keychain.has(o3)) {
      const { message: t } = Et("MISSING_OR_INVALID", `session topic does not exist in keychain: ${o3}`);
      throw await this.deleteSession({ topic: o3 }), new Error(t);
    }
  }
  async isValidSessionOrPairingTopic(o3) {
    if (this.checkRecentlyDeleted(o3), this.client.session.keys.includes(o3)) await this.isValidSessionTopic(o3);
    else if (this.client.core.pairing.pairings.keys.includes(o3)) this.isValidPairingTopic(o3);
    else if (it(o3, false)) {
      const { message: t } = Et("NO_MATCHING_KEY", `session or pairing topic doesn't exist: ${o3}`);
      throw new Error(t);
    } else {
      const { message: t } = Et("MISSING_OR_INVALID", `session or pairing topic should be a string: ${o3}`);
      throw new Error(t);
    }
  }
  async isValidProposalId(o3) {
    if (!Ia(o3)) {
      const { message: t } = Et("MISSING_OR_INVALID", `proposal id should be a number: ${o3}`);
      throw new Error(t);
    }
    if (!this.client.proposal.keys.includes(o3)) {
      const { message: t } = Et("NO_MATCHING_KEY", `proposal id doesn't exist: ${o3}`);
      throw new Error(t);
    }
    if (fi(this.client.proposal.get(o3).expiryTimestamp)) {
      await this.deleteProposal(o3);
      const { message: t } = Et("EXPIRED", `proposal id: ${o3}`);
      throw new Error(t);
    }
  }
};
var ks2 = class extends Li2 {
  constructor(o3, t) {
    super(o3, t, ht2, me2), this.core = o3, this.logger = t;
  }
};
var vt2 = class extends Li2 {
  constructor(o3, t) {
    super(o3, t, dt2, me2), this.core = o3, this.logger = t;
  }
};
var Ds = class extends Li2 {
  constructor(o3, t) {
    super(o3, t, yt, me2, (e) => e.id), this.core = o3, this.logger = t;
  }
};
var Ls2 = class extends Li2 {
  constructor(o3, t) {
    super(o3, t, Et3, ae2, () => ce2), this.core = o3, this.logger = t;
  }
};
var Ms2 = class extends Li2 {
  constructor(o3, t) {
    super(o3, t, ft, ae2), this.core = o3, this.logger = t;
  }
};
var $s2 = class extends Li2 {
  constructor(o3, t) {
    super(o3, t, St3, ae2, (e) => e.id), this.core = o3, this.logger = t;
  }
};
var Ks2 = Object.defineProperty;
var Us = (S4, o3, t) => o3 in S4 ? Ks2(S4, o3, { enumerable: true, configurable: true, writable: true, value: t }) : S4[o3] = t;
var Ke3 = (S4, o3, t) => Us(S4, typeof o3 != "symbol" ? o3 + "" : o3, t);
var Gs2 = class {
  constructor(o3, t) {
    this.core = o3, this.logger = t, Ke3(this, "authKeys"), Ke3(this, "pairingTopics"), Ke3(this, "requests"), this.authKeys = new Ls2(this.core, this.logger), this.pairingTopics = new Ms2(this.core, this.logger), this.requests = new $s2(this.core, this.logger);
  }
  async init() {
    await this.authKeys.init(), await this.pairingTopics.init(), await this.requests.init();
  }
};
var js2 = Object.defineProperty;
var Fs = (S4, o3, t) => o3 in S4 ? js2(S4, o3, { enumerable: true, configurable: true, writable: true, value: t }) : S4[o3] = t;
var f4 = (S4, o3, t) => Fs(S4, typeof o3 != "symbol" ? o3 + "" : o3, t);
var Ee2 = class _Ee extends J {
  constructor(o3) {
    super(o3), f4(this, "protocol", Ce3), f4(this, "version", ke3), f4(this, "name", we2.name), f4(this, "metadata"), f4(this, "core"), f4(this, "logger"), f4(this, "events", new import_events4.EventEmitter()), f4(this, "engine"), f4(this, "session"), f4(this, "proposal"), f4(this, "pendingRequest"), f4(this, "auth"), f4(this, "signConfig"), f4(this, "on", (e, s) => this.events.on(e, s)), f4(this, "once", (e, s) => this.events.once(e, s)), f4(this, "off", (e, s) => this.events.off(e, s)), f4(this, "removeListener", (e, s) => this.events.removeListener(e, s)), f4(this, "removeAllListeners", (e) => this.events.removeAllListeners(e)), f4(this, "connect", async (e) => {
      try {
        return await this.engine.connect(e);
      } catch (s) {
        throw this.logger.error(s.message), s;
      }
    }), f4(this, "pair", async (e) => {
      try {
        return await this.engine.pair(e);
      } catch (s) {
        throw this.logger.error(s.message), s;
      }
    }), f4(this, "approve", async (e) => {
      try {
        return await this.engine.approve(e);
      } catch (s) {
        throw this.logger.error(s.message), s;
      }
    }), f4(this, "reject", async (e) => {
      try {
        return await this.engine.reject(e);
      } catch (s) {
        throw this.logger.error(s.message), s;
      }
    }), f4(this, "update", async (e) => {
      try {
        return await this.engine.update(e);
      } catch (s) {
        throw this.logger.error(s.message), s;
      }
    }), f4(this, "extend", async (e) => {
      try {
        return await this.engine.extend(e);
      } catch (s) {
        throw this.logger.error(s.message), s;
      }
    }), f4(this, "request", async (e) => {
      try {
        return await this.engine.request(e);
      } catch (s) {
        throw this.logger.error(s.message), s;
      }
    }), f4(this, "respond", async (e) => {
      try {
        return await this.engine.respond(e);
      } catch (s) {
        throw this.logger.error(s.message), s;
      }
    }), f4(this, "ping", async (e) => {
      try {
        return await this.engine.ping(e);
      } catch (s) {
        throw this.logger.error(s.message), s;
      }
    }), f4(this, "emit", async (e) => {
      try {
        return await this.engine.emit(e);
      } catch (s) {
        throw this.logger.error(s.message), s;
      }
    }), f4(this, "disconnect", async (e) => {
      try {
        return await this.engine.disconnect(e);
      } catch (s) {
        throw this.logger.error(s.message), s;
      }
    }), f4(this, "find", (e) => {
      try {
        return this.engine.find(e);
      } catch (s) {
        throw this.logger.error(s.message), s;
      }
    }), f4(this, "getPendingSessionRequests", () => {
      try {
        return this.engine.getPendingSessionRequests();
      } catch (e) {
        throw this.logger.error(e.message), e;
      }
    }), f4(this, "authenticate", async (e, s) => {
      try {
        return await this.engine.authenticate(e, s);
      } catch (i3) {
        throw this.logger.error(i3.message), i3;
      }
    }), f4(this, "formatAuthMessage", (e) => {
      try {
        return this.engine.formatAuthMessage(e);
      } catch (s) {
        throw this.logger.error(s.message), s;
      }
    }), f4(this, "approveSessionAuthenticate", async (e) => {
      try {
        return await this.engine.approveSessionAuthenticate(e);
      } catch (s) {
        throw this.logger.error(s.message), s;
      }
    }), f4(this, "rejectSessionAuthenticate", async (e) => {
      try {
        return await this.engine.rejectSessionAuthenticate(e);
      } catch (s) {
        throw this.logger.error(s.message), s;
      }
    }), this.name = (o3 == null ? void 0 : o3.name) || we2.name, this.metadata = Ks(o3 == null ? void 0 : o3.metadata), this.signConfig = o3 == null ? void 0 : o3.signConfig;
    const t = typeof (o3 == null ? void 0 : o3.logger) < "u" && typeof (o3 == null ? void 0 : o3.logger) != "string" ? o3.logger : (0, import_pino.default)(k({ level: (o3 == null ? void 0 : o3.logger) || we2.logger }));
    this.core = (o3 == null ? void 0 : o3.core) || new Zo2(o3), this.logger = E(t, this.name), this.session = new vt2(this.core, this.logger), this.proposal = new ks2(this.core, this.logger), this.pendingRequest = new Ds(this.core, this.logger), this.engine = new Cs2(this), this.auth = new Gs2(this.core, this.logger);
  }
  static async init(o3) {
    const t = new _Ee(o3);
    return await t.initialize(), t;
  }
  get context() {
    return y(this.logger);
  }
  get pairing() {
    return this.core.pairing.pairings;
  }
  async initialize() {
    this.logger.trace("Initialized");
    try {
      await this.core.start(), await this.session.init(), await this.proposal.init(), await this.pendingRequest.init(), await this.auth.init(), await this.engine.init(), this.logger.info("SignClient Initialization Success");
    } catch (o3) {
      throw this.logger.info("SignClient Initialization Failure"), this.logger.error(o3.message), o3;
    }
  }
};

// node_modules/@walletconnect/jsonrpc-http-connection/dist/index.es.js
var import_events5 = __toESM(require_events());
var import_cross_fetch = __toESM(require_browser_ponyfill());
var P3 = Object.defineProperty;
var w2 = Object.defineProperties;
var E3 = Object.getOwnPropertyDescriptors;
var c3 = Object.getOwnPropertySymbols;
var L2 = Object.prototype.hasOwnProperty;
var O3 = Object.prototype.propertyIsEnumerable;
var l2 = (r2, t, e) => t in r2 ? P3(r2, t, { enumerable: true, configurable: true, writable: true, value: e }) : r2[t] = e;
var p3 = (r2, t) => {
  for (var e in t || (t = {})) L2.call(t, e) && l2(r2, e, t[e]);
  if (c3) for (var e of c3(t)) O3.call(t, e) && l2(r2, e, t[e]);
  return r2;
};
var v3 = (r2, t) => w2(r2, E3(t));
var j = { Accept: "application/json", "Content-Type": "application/json" };
var T2 = "POST";
var d2 = { headers: j, method: T2 };
var g = 10;
var f5 = class {
  constructor(t, e = false) {
    if (this.url = t, this.disableProviderPing = e, this.events = new import_events5.EventEmitter(), this.isAvailable = false, this.registering = false, !isHttpUrl(t)) throw new Error(`Provided URL is not compatible with HTTP connection: ${t}`);
    this.url = t, this.disableProviderPing = e;
  }
  get connected() {
    return this.isAvailable;
  }
  get connecting() {
    return this.registering;
  }
  on(t, e) {
    this.events.on(t, e);
  }
  once(t, e) {
    this.events.once(t, e);
  }
  off(t, e) {
    this.events.off(t, e);
  }
  removeListener(t, e) {
    this.events.removeListener(t, e);
  }
  async open(t = this.url) {
    await this.register(t);
  }
  async close() {
    if (!this.isAvailable) throw new Error("Connection already closed");
    this.onClose();
  }
  async send(t) {
    this.isAvailable || await this.register();
    try {
      const e = safeJsonStringify(t), s = await (await (0, import_cross_fetch.default)(this.url, v3(p3({}, d2), { body: e }))).json();
      this.onPayload({ data: s });
    } catch (e) {
      this.onError(t.id, e);
    }
  }
  async register(t = this.url) {
    if (!isHttpUrl(t)) throw new Error(`Provided URL is not compatible with HTTP connection: ${t}`);
    if (this.registering) {
      const e = this.events.getMaxListeners();
      return (this.events.listenerCount("register_error") >= e || this.events.listenerCount("open") >= e) && this.events.setMaxListeners(e + 1), new Promise((s, i3) => {
        this.events.once("register_error", (n2) => {
          this.resetMaxListeners(), i3(n2);
        }), this.events.once("open", () => {
          if (this.resetMaxListeners(), typeof this.isAvailable > "u") return i3(new Error("HTTP connection is missing or invalid"));
          s();
        });
      });
    }
    this.url = t, this.registering = true;
    try {
      if (!this.disableProviderPing) {
        const e = safeJsonStringify({ id: 1, jsonrpc: "2.0", method: "test", params: [] });
        await (0, import_cross_fetch.default)(t, v3(p3({}, d2), { body: e }));
      }
      this.onOpen();
    } catch (e) {
      const s = this.parseError(e);
      throw this.events.emit("register_error", s), this.onClose(), s;
    }
  }
  onOpen() {
    this.isAvailable = true, this.registering = false, this.events.emit("open");
  }
  onClose() {
    this.isAvailable = false, this.registering = false, this.events.emit("close");
  }
  onPayload(t) {
    if (typeof t.data > "u") return;
    const e = typeof t.data == "string" ? safeJsonParse(t.data) : t.data;
    this.events.emit("payload", e);
  }
  onError(t, e) {
    const s = this.parseError(e), i3 = s.message || s.toString(), n2 = formatJsonRpcError(t, i3);
    this.events.emit("payload", n2);
  }
  parseError(t, e = this.url) {
    return parseConnectionError(t, e, "HTTP");
  }
  resetMaxListeners() {
    this.events.getMaxListeners() > g && this.events.setMaxListeners(g);
  }
};

// node_modules/@walletconnect/universal-provider/dist/index.es.js
var import_events6 = __toESM(require_events());
var rt2 = "error";
var xt3 = "wss://relay.walletconnect.org";
var Lt3 = "wc";
var Mt3 = "universal_provider";
var U3 = `${Lt3}@2:${Mt3}:`;
var nt2 = "https://rpc.walletconnect.org/v1/";
var I3 = "generic";
var Bt3 = `${nt2}bundler`;
var l3 = { DEFAULT_CHAIN_CHANGED: "default_chain_changed" };
function W3(s) {
  return s == null || typeof s != "object" && typeof s != "function";
}
function at2(s) {
  return Object.getOwnPropertySymbols(s).filter((t) => Object.prototype.propertyIsEnumerable.call(s, t));
}
function ct3(s) {
  return s == null ? s === void 0 ? "[object Undefined]" : "[object Null]" : Object.prototype.toString.call(s);
}
var Gt3 = "[object RegExp]";
var ot2 = "[object String]";
var ht3 = "[object Number]";
var pt3 = "[object Boolean]";
var dt3 = "[object Arguments]";
var Jt3 = "[object Symbol]";
var zt3 = "[object Date]";
var kt3 = "[object Map]";
var Wt3 = "[object Set]";
var Kt3 = "[object Array]";
var Vt3 = "[object ArrayBuffer]";
var Xt3 = "[object Object]";
var Yt3 = "[object DataView]";
var Qt3 = "[object Uint8Array]";
var Zt3 = "[object Uint8ClampedArray]";
var Tt3 = "[object Uint16Array]";
var te2 = "[object Uint32Array]";
var ee3 = "[object Int8Array]";
var se3 = "[object Int16Array]";
var ie3 = "[object Int32Array]";
var re2 = "[object Float32Array]";
var ne3 = "[object Float64Array]";
function K2(s) {
  return ArrayBuffer.isView(s) && !(s instanceof DataView);
}
function ae3(s, t) {
  return $3(s, void 0, s, /* @__PURE__ */ new Map(), t);
}
function $3(s, t, e, i3 = /* @__PURE__ */ new Map(), n2 = void 0) {
  const a2 = n2 == null ? void 0 : n2(s, t, e, i3);
  if (a2 != null) return a2;
  if (W3(s)) return s;
  if (i3.has(s)) return i3.get(s);
  if (Array.isArray(s)) {
    const r2 = new Array(s.length);
    i3.set(s, r2);
    for (let c4 = 0; c4 < s.length; c4++) r2[c4] = $3(s[c4], c4, e, i3, n2);
    return Object.hasOwn(s, "index") && (r2.index = s.index), Object.hasOwn(s, "input") && (r2.input = s.input), r2;
  }
  if (s instanceof Date) return new Date(s.getTime());
  if (s instanceof RegExp) {
    const r2 = new RegExp(s.source, s.flags);
    return r2.lastIndex = s.lastIndex, r2;
  }
  if (s instanceof Map) {
    const r2 = /* @__PURE__ */ new Map();
    i3.set(s, r2);
    for (const [c4, o3] of s) r2.set(c4, $3(o3, c4, e, i3, n2));
    return r2;
  }
  if (s instanceof Set) {
    const r2 = /* @__PURE__ */ new Set();
    i3.set(s, r2);
    for (const c4 of s) r2.add($3(c4, void 0, e, i3, n2));
    return r2;
  }
  if (typeof Buffer < "u" && Buffer.isBuffer(s)) return s.subarray();
  if (K2(s)) {
    const r2 = new (Object.getPrototypeOf(s)).constructor(s.length);
    i3.set(s, r2);
    for (let c4 = 0; c4 < s.length; c4++) r2[c4] = $3(s[c4], c4, e, i3, n2);
    return r2;
  }
  if (s instanceof ArrayBuffer || typeof SharedArrayBuffer < "u" && s instanceof SharedArrayBuffer) return s.slice(0);
  if (s instanceof DataView) {
    const r2 = new DataView(s.buffer.slice(0), s.byteOffset, s.byteLength);
    return i3.set(s, r2), y4(r2, s, e, i3, n2), r2;
  }
  if (typeof File < "u" && s instanceof File) {
    const r2 = new File([s], s.name, { type: s.type });
    return i3.set(s, r2), y4(r2, s, e, i3, n2), r2;
  }
  if (s instanceof Blob) {
    const r2 = new Blob([s], { type: s.type });
    return i3.set(s, r2), y4(r2, s, e, i3, n2), r2;
  }
  if (s instanceof Error) {
    const r2 = new s.constructor();
    return i3.set(s, r2), r2.message = s.message, r2.name = s.name, r2.stack = s.stack, r2.cause = s.cause, y4(r2, s, e, i3, n2), r2;
  }
  if (typeof s == "object" && ce3(s)) {
    const r2 = Object.create(Object.getPrototypeOf(s));
    return i3.set(s, r2), y4(r2, s, e, i3, n2), r2;
  }
  return s;
}
function y4(s, t, e = s, i3, n2) {
  const a2 = [...Object.keys(t), ...at2(t)];
  for (let r2 = 0; r2 < a2.length; r2++) {
    const c4 = a2[r2], o3 = Object.getOwnPropertyDescriptor(s, c4);
    (o3 == null || o3.writable) && (s[c4] = $3(t[c4], c4, e, i3, n2));
  }
}
function ce3(s) {
  switch (ct3(s)) {
    case dt3:
    case Kt3:
    case Vt3:
    case Yt3:
    case pt3:
    case zt3:
    case re2:
    case ne3:
    case ee3:
    case se3:
    case ie3:
    case kt3:
    case ht3:
    case Xt3:
    case Gt3:
    case Wt3:
    case ot2:
    case Jt3:
    case Qt3:
    case Zt3:
    case Tt3:
    case te2:
      return true;
    default:
      return false;
  }
}
function oe(s, t) {
  return ae3(s, (e, i3, n2, a2) => {
    const r2 = t == null ? void 0 : t(e, i3, n2, a2);
    if (r2 != null) return r2;
    if (typeof s == "object") switch (Object.prototype.toString.call(s)) {
      case ht3:
      case ot2:
      case pt3: {
        const c4 = new s.constructor(s == null ? void 0 : s.valueOf());
        return y4(c4, s), c4;
      }
      case dt3: {
        const c4 = {};
        return y4(c4, s), c4.length = s.length, c4[Symbol.iterator] = s[Symbol.iterator], c4;
      }
      default:
        return;
    }
  });
}
function ut3(s) {
  return oe(s);
}
function lt3(s) {
  return s !== null && typeof s == "object" && ct3(s) === "[object Arguments]";
}
function ft2(s) {
  return typeof s == "object" && s !== null;
}
function he3() {
}
function pe3(s) {
  return K2(s);
}
function de3(s) {
  var _a2;
  if (typeof s != "object" || s == null) return false;
  if (Object.getPrototypeOf(s) === null) return true;
  if (Object.prototype.toString.call(s) !== "[object Object]") {
    const e = s[Symbol.toStringTag];
    return e == null || !((_a2 = Object.getOwnPropertyDescriptor(s, Symbol.toStringTag)) == null ? void 0 : _a2.writable) ? false : s.toString() === `[object ${e}]`;
  }
  let t = s;
  for (; Object.getPrototypeOf(t) !== null; ) t = Object.getPrototypeOf(t);
  return Object.getPrototypeOf(s) === t;
}
function ue3(s) {
  if (W3(s)) return s;
  if (Array.isArray(s) || K2(s) || s instanceof ArrayBuffer || typeof SharedArrayBuffer < "u" && s instanceof SharedArrayBuffer) return s.slice(0);
  const t = Object.getPrototypeOf(s), e = t.constructor;
  if (s instanceof Date || s instanceof Map || s instanceof Set) return new e(s);
  if (s instanceof RegExp) {
    const i3 = new e(s);
    return i3.lastIndex = s.lastIndex, i3;
  }
  if (s instanceof DataView) return new e(s.buffer.slice(0));
  if (s instanceof Error) {
    const i3 = new e(s.message);
    return i3.stack = s.stack, i3.name = s.name, i3.cause = s.cause, i3;
  }
  if (typeof File < "u" && s instanceof File) return new e([s], s.name, { type: s.type, lastModified: s.lastModified });
  if (typeof s == "object") {
    const i3 = Object.create(t);
    return Object.assign(i3, s);
  }
  return s;
}
function le3(s, ...t) {
  const e = t.slice(0, -1), i3 = t[t.length - 1];
  let n2 = s;
  for (let a2 = 0; a2 < e.length; a2++) {
    const r2 = e[a2];
    n2 = x2(n2, r2, i3, /* @__PURE__ */ new Map());
  }
  return n2;
}
function x2(s, t, e, i3) {
  if (W3(s) && (s = Object(s)), t == null || typeof t != "object") return s;
  if (i3.has(t)) return ue3(i3.get(t));
  if (i3.set(t, s), Array.isArray(t)) {
    t = t.slice();
    for (let a2 = 0; a2 < t.length; a2++) t[a2] = t[a2] ?? void 0;
  }
  const n2 = [...Object.keys(t), ...at2(t)];
  for (let a2 = 0; a2 < n2.length; a2++) {
    const r2 = n2[a2];
    let c4 = t[r2], o3 = s[r2];
    if (lt3(c4) && (c4 = { ...c4 }), lt3(o3) && (o3 = { ...o3 }), typeof Buffer < "u" && Buffer.isBuffer(c4) && (c4 = ut3(c4)), Array.isArray(c4)) if (typeof o3 == "object" && o3 != null) {
      const v4 = [], w3 = Reflect.ownKeys(o3);
      for (let P4 = 0; P4 < w3.length; P4++) {
        const d3 = w3[P4];
        v4[d3] = o3[d3];
      }
      o3 = v4;
    } else o3 = [];
    const p4 = e(o3, c4, r2, s, t, i3);
    p4 != null ? s[r2] = p4 : Array.isArray(c4) || ft2(o3) && ft2(c4) ? s[r2] = x2(o3, c4, e, i3) : o3 == null && de3(c4) ? s[r2] = x2({}, c4, e, i3) : o3 == null && pe3(c4) ? s[r2] = ut3(c4) : (o3 === void 0 || c4 !== void 0) && (s[r2] = c4);
  }
  return s;
}
function fe3(s, ...t) {
  return le3(s, ...t, he3);
}
var me3 = Object.defineProperty;
var ve2 = Object.defineProperties;
var ge3 = Object.getOwnPropertyDescriptors;
var mt3 = Object.getOwnPropertySymbols;
var Pe3 = Object.prototype.hasOwnProperty;
var we3 = Object.prototype.propertyIsEnumerable;
var vt3 = (s, t, e) => t in s ? me3(s, t, { enumerable: true, configurable: true, writable: true, value: e }) : s[t] = e;
var L3 = (s, t) => {
  for (var e in t || (t = {})) Pe3.call(t, e) && vt3(s, e, t[e]);
  if (mt3) for (var e of mt3(t)) we3.call(t, e) && vt3(s, e, t[e]);
  return s;
};
var ye3 = (s, t) => ve2(s, ge3(t));
function u2(s, t, e) {
  var i3;
  const n2 = Fe(s);
  return ((i3 = t.rpcMap) == null ? void 0 : i3[n2.reference]) || `${nt2}?chainId=${n2.namespace}:${n2.reference}&projectId=${e}`;
}
function b2(s) {
  return s.includes(":") ? s.split(":")[1] : s;
}
function gt3(s) {
  return s.map((t) => `${t.split(":")[0]}:${t.split(":")[1]}`);
}
function be3(s, t) {
  const e = Object.keys(t.namespaces).filter((n2) => n2.includes(s));
  if (!e.length) return [];
  const i3 = [];
  return e.forEach((n2) => {
    const a2 = t.namespaces[n2].accounts;
    i3.push(...a2);
  }), i3;
}
function M4(s = {}, t = {}) {
  const e = Pt3(s), i3 = Pt3(t);
  return fe3(e, i3);
}
function Pt3(s) {
  var t, e, i3, n2, a2;
  const r2 = {};
  if (!Ve(s)) return r2;
  for (const [c4, o3] of Object.entries(s)) {
    const p4 = Pn(c4) ? [c4] : o3.chains, v4 = o3.methods || [], w3 = o3.events || [], P4 = o3.rpcMap || {}, d3 = Yo(c4);
    r2[d3] = ye3(L3(L3({}, r2[d3]), o3), { chains: ct(p4, (t = r2[d3]) == null ? void 0 : t.chains), methods: ct(v4, (e = r2[d3]) == null ? void 0 : e.methods), events: ct(w3, (i3 = r2[d3]) == null ? void 0 : i3.events) }), (Ve(P4) || Ve(((n2 = r2[d3]) == null ? void 0 : n2.rpcMap) || {})) && (r2[d3].rpcMap = L3(L3({}, P4), (a2 = r2[d3]) == null ? void 0 : a2.rpcMap));
  }
  return r2;
}
function wt3(s) {
  return s.includes(":") ? s.split(":")[2] : s;
}
function yt2(s) {
  const t = {};
  for (const [e, i3] of Object.entries(s)) {
    const n2 = i3.methods || [], a2 = i3.events || [], r2 = i3.accounts || [], c4 = Pn(e) ? [e] : i3.chains ? i3.chains : gt3(i3.accounts);
    t[e] = { chains: c4, methods: n2, events: a2, accounts: r2 };
  }
  return t;
}
function V3(s) {
  return typeof s == "number" ? s : s.includes("0x") ? parseInt(s, 16) : (s = s.includes(":") ? s.split(":")[1] : s, isNaN(Number(s)) ? s : Number(s));
}
var bt2 = {};
var h3 = (s) => bt2[s];
var X3 = (s, t) => {
  bt2[s] = t;
};
var Ie3 = Object.defineProperty;
var It3 = Object.getOwnPropertySymbols;
var $e3 = Object.prototype.hasOwnProperty;
var Oe2 = Object.prototype.propertyIsEnumerable;
var $t3 = (s, t, e) => t in s ? Ie3(s, t, { enumerable: true, configurable: true, writable: true, value: e }) : s[t] = e;
var Ot3 = (s, t) => {
  for (var e in t || (t = {})) $e3.call(t, e) && $t3(s, e, t[e]);
  if (It3) for (var e of It3(t)) Oe2.call(t, e) && $t3(s, e, t[e]);
  return s;
};
var At3 = "eip155";
var Ae2 = ["atomic", "flow-control", "paymasterService", "sessionKeys", "auxiliaryFunds"];
var Ce4 = (s) => s && s.startsWith("0x") ? BigInt(s).toString(10) : s;
var Y3 = (s) => s && s.startsWith("0x") ? s : `0x${BigInt(s).toString(16)}`;
var Ct3 = (s) => Object.keys(s).filter((t) => Ae2.includes(t)).reduce((t, e) => (t[e] = s[e], t), {});
var Ee3 = (s, t, e) => {
  const { sessionProperties: i3 = {}, scopedProperties: n2 = {} } = s, a2 = {};
  if (!Ve(n2) && !Ve(i3)) return;
  const r2 = Ct3(i3);
  for (const c4 of e) {
    const o3 = Ce4(c4);
    if (!o3) continue;
    a2[Y3(o3)] = r2;
    const p4 = n2 == null ? void 0 : n2[`${At3}:${o3}`];
    if (p4) {
      const v4 = p4 == null ? void 0 : p4[`${At3}:${o3}:${t}`];
      a2[Y3(o3)] = Ot3(Ot3({}, a2[Y3(o3)]), Ct3(v4 || p4));
    }
  }
  for (const [c4, o3] of Object.entries(a2)) Object.keys(o3).length === 0 && delete a2[c4];
  return Object.keys(a2).length > 0 ? a2 : void 0;
};
var He3 = Object.defineProperty;
var Se3 = (s, t, e) => t in s ? He3(s, t, { enumerable: true, configurable: true, writable: true, value: e }) : s[t] = e;
var O4 = (s, t, e) => Se3(s, typeof t != "symbol" ? t + "" : t, e);
var Ne2 = class {
  constructor(t) {
    O4(this, "name", "polkadot"), O4(this, "client"), O4(this, "httpProviders"), O4(this, "events"), O4(this, "namespace"), O4(this, "chainId"), this.namespace = t.namespace, this.events = h3("events"), this.client = h3("client"), this.chainId = this.getDefaultChain(), this.httpProviders = this.createHttpProviders();
  }
  updateNamespace(t) {
    this.namespace = Object.assign(this.namespace, t);
  }
  requestAccounts() {
    return this.getAccounts();
  }
  getDefaultChain() {
    if (this.chainId) return this.chainId;
    if (this.namespace.defaultChain) return this.namespace.defaultChain;
    const t = this.namespace.chains[0];
    if (!t) throw new Error("ChainId not found");
    return t.split(":")[1];
  }
  request(t) {
    return this.namespace.methods.includes(t.request.method) ? this.client.request(t) : this.getHttpProvider().request(t.request);
  }
  setDefaultChain(t, e) {
    this.httpProviders[t] || this.setHttpProvider(t, e), this.chainId = t, this.events.emit(l3.DEFAULT_CHAIN_CHANGED, `${this.name}:${t}`);
  }
  getAccounts() {
    const t = this.namespace.accounts;
    return t ? t.filter((e) => e.split(":")[1] === this.chainId.toString()).map((e) => e.split(":")[2]) || [] : [];
  }
  createHttpProviders() {
    const t = {};
    return this.namespace.chains.forEach((e) => {
      var i3;
      const n2 = b2(e);
      t[n2] = this.createHttpProvider(n2, (i3 = this.namespace.rpcMap) == null ? void 0 : i3[e]);
    }), t;
  }
  getHttpProvider() {
    const t = `${this.name}:${this.chainId}`, e = this.httpProviders[t];
    if (typeof e > "u") throw new Error(`JSON-RPC provider for ${t} not found`);
    return e;
  }
  setHttpProvider(t, e) {
    const i3 = this.createHttpProvider(t, e);
    i3 && (this.httpProviders[t] = i3);
  }
  createHttpProvider(t, e) {
    const i3 = e || u2(t, this.namespace, this.client.core.projectId);
    if (!i3) throw new Error(`No RPC url provided for chainId: ${t}`);
    return new o(new f5(i3, h3("disableProviderPing")));
  }
};
var De3 = Object.defineProperty;
var qe3 = Object.defineProperties;
var je3 = Object.getOwnPropertyDescriptors;
var Et4 = Object.getOwnPropertySymbols;
var Re2 = Object.prototype.hasOwnProperty;
var _e4 = Object.prototype.propertyIsEnumerable;
var Q3 = (s, t, e) => t in s ? De3(s, t, { enumerable: true, configurable: true, writable: true, value: e }) : s[t] = e;
var Ht3 = (s, t) => {
  for (var e in t || (t = {})) Re2.call(t, e) && Q3(s, e, t[e]);
  if (Et4) for (var e of Et4(t)) _e4.call(t, e) && Q3(s, e, t[e]);
  return s;
};
var St4 = (s, t) => qe3(s, je3(t));
var A4 = (s, t, e) => Q3(s, typeof t != "symbol" ? t + "" : t, e);
var Fe3 = class {
  constructor(t) {
    A4(this, "name", "eip155"), A4(this, "client"), A4(this, "chainId"), A4(this, "namespace"), A4(this, "httpProviders"), A4(this, "events"), this.namespace = t.namespace, this.events = h3("events"), this.client = h3("client"), this.httpProviders = this.createHttpProviders(), this.chainId = parseInt(this.getDefaultChain());
  }
  async request(t) {
    switch (t.request.method) {
      case "eth_requestAccounts":
        return this.getAccounts();
      case "eth_accounts":
        return this.getAccounts();
      case "wallet_switchEthereumChain":
        return await this.handleSwitchChain(t);
      case "eth_chainId":
        return parseInt(this.getDefaultChain());
      case "wallet_getCapabilities":
        return await this.getCapabilities(t);
      case "wallet_getCallsStatus":
        return await this.getCallStatus(t);
    }
    return this.namespace.methods.includes(t.request.method) ? await this.client.request(t) : this.getHttpProvider().request(t.request);
  }
  updateNamespace(t) {
    this.namespace = Object.assign(this.namespace, t);
  }
  setDefaultChain(t, e) {
    this.httpProviders[t] || this.setHttpProvider(parseInt(t), e), this.chainId = parseInt(t), this.events.emit(l3.DEFAULT_CHAIN_CHANGED, `${this.name}:${t}`);
  }
  requestAccounts() {
    return this.getAccounts();
  }
  getDefaultChain() {
    if (this.chainId) return this.chainId.toString();
    if (this.namespace.defaultChain) return this.namespace.defaultChain;
    const t = this.namespace.chains[0];
    if (!t) throw new Error("ChainId not found");
    return t.split(":")[1];
  }
  createHttpProvider(t, e) {
    const i3 = e || u2(`${this.name}:${t}`, this.namespace, this.client.core.projectId);
    if (!i3) throw new Error(`No RPC url provided for chainId: ${t}`);
    return new o(new f5(i3, h3("disableProviderPing")));
  }
  setHttpProvider(t, e) {
    const i3 = this.createHttpProvider(t, e);
    i3 && (this.httpProviders[t] = i3);
  }
  createHttpProviders() {
    const t = {};
    return this.namespace.chains.forEach((e) => {
      var i3;
      const n2 = parseInt(b2(e));
      t[n2] = this.createHttpProvider(n2, (i3 = this.namespace.rpcMap) == null ? void 0 : i3[e]);
    }), t;
  }
  getAccounts() {
    const t = this.namespace.accounts;
    return t ? [...new Set(t.filter((e) => e.split(":")[1] === this.chainId.toString()).map((e) => e.split(":")[2]))] : [];
  }
  getHttpProvider() {
    const t = this.chainId, e = this.httpProviders[t];
    if (typeof e > "u") throw new Error(`JSON-RPC provider for ${t} not found`);
    return e;
  }
  async handleSwitchChain(t) {
    var e, i3;
    let n2 = t.request.params ? (e = t.request.params[0]) == null ? void 0 : e.chainId : "0x0";
    n2 = n2.startsWith("0x") ? n2 : `0x${n2}`;
    const a2 = parseInt(n2, 16);
    if (this.isChainApproved(a2)) this.setDefaultChain(`${a2}`);
    else if (this.namespace.methods.includes("wallet_switchEthereumChain")) await this.client.request({ topic: t.topic, request: { method: t.request.method, params: [{ chainId: n2 }] }, chainId: (i3 = this.namespace.chains) == null ? void 0 : i3[0] }), this.setDefaultChain(`${a2}`);
    else throw new Error(`Failed to switch to chain 'eip155:${a2}'. The chain is not approved or the wallet does not support 'wallet_switchEthereumChain' method.`);
    return null;
  }
  isChainApproved(t) {
    return this.namespace.chains.includes(`${this.name}:${t}`);
  }
  async getCapabilities(t) {
    var e, i3, n2, a2, r2;
    const c4 = (i3 = (e = t.request) == null ? void 0 : e.params) == null ? void 0 : i3[0], o3 = ((a2 = (n2 = t.request) == null ? void 0 : n2.params) == null ? void 0 : a2[1]) || [];
    if (!c4) throw new Error("Missing address parameter in `wallet_getCapabilities` request");
    const p4 = this.client.session.get(t.topic), v4 = ((r2 = p4 == null ? void 0 : p4.sessionProperties) == null ? void 0 : r2.capabilities) || {}, w3 = `${c4}${o3.join(",")}`, P4 = v4 == null ? void 0 : v4[w3];
    if (P4) return P4;
    let d3;
    try {
      d3 = Ee3(p4, c4, o3);
    } catch (J3) {
      console.warn("Failed to extract capabilities from session", J3);
    }
    if (d3) return d3;
    const tt3 = await this.client.request(t);
    try {
      await this.client.session.update(t.topic, { sessionProperties: St4(Ht3({}, p4.sessionProperties || {}), { capabilities: St4(Ht3({}, v4 || {}), { [w3]: tt3 }) }) });
    } catch (J3) {
      console.warn("Failed to update session with capabilities", J3);
    }
    return tt3;
  }
  async getCallStatus(t) {
    var e, i3;
    const n2 = this.client.session.get(t.topic), a2 = (e = n2.sessionProperties) == null ? void 0 : e.bundler_name;
    if (a2) {
      const c4 = this.getBundlerUrl(t.chainId, a2);
      try {
        return await this.getUserOperationReceipt(c4, t);
      } catch (o3) {
        console.warn("Failed to fetch call status from bundler", o3, c4);
      }
    }
    const r2 = (i3 = n2.sessionProperties) == null ? void 0 : i3.bundler_url;
    if (r2) try {
      return await this.getUserOperationReceipt(r2, t);
    } catch (c4) {
      console.warn("Failed to fetch call status from custom bundler", c4, r2);
    }
    if (this.namespace.methods.includes(t.request.method)) return await this.client.request(t);
    throw new Error("Fetching call status not approved by the wallet.");
  }
  async getUserOperationReceipt(t, e) {
    var i3;
    const n2 = new URL(t), a2 = await fetch(n2, { method: "POST", headers: { "Content-Type": "application/json" }, body: JSON.stringify(formatJsonRpcRequest("eth_getUserOperationReceipt", [(i3 = e.request.params) == null ? void 0 : i3[0]])) });
    if (!a2.ok) throw new Error(`Failed to fetch user operation receipt - ${a2.status}`);
    return await a2.json();
  }
  getBundlerUrl(t, e) {
    return `${Bt3}?projectId=${this.client.core.projectId}&chainId=${t}&bundler=${e}`;
  }
};
var Ue3 = Object.defineProperty;
var xe2 = (s, t, e) => t in s ? Ue3(s, t, { enumerable: true, configurable: true, writable: true, value: e }) : s[t] = e;
var C3 = (s, t, e) => xe2(s, typeof t != "symbol" ? t + "" : t, e);
var Le4 = class {
  constructor(t) {
    C3(this, "name", "solana"), C3(this, "client"), C3(this, "httpProviders"), C3(this, "events"), C3(this, "namespace"), C3(this, "chainId"), this.namespace = t.namespace, this.events = h3("events"), this.client = h3("client"), this.chainId = this.getDefaultChain(), this.httpProviders = this.createHttpProviders();
  }
  updateNamespace(t) {
    this.namespace = Object.assign(this.namespace, t);
  }
  requestAccounts() {
    return this.getAccounts();
  }
  request(t) {
    return this.namespace.methods.includes(t.request.method) ? this.client.request(t) : this.getHttpProvider().request(t.request);
  }
  setDefaultChain(t, e) {
    this.httpProviders[t] || this.setHttpProvider(t, e), this.chainId = t, this.events.emit(l3.DEFAULT_CHAIN_CHANGED, `${this.name}:${t}`);
  }
  getDefaultChain() {
    if (this.chainId) return this.chainId;
    if (this.namespace.defaultChain) return this.namespace.defaultChain;
    const t = this.namespace.chains[0];
    if (!t) throw new Error("ChainId not found");
    return t.split(":")[1];
  }
  getAccounts() {
    const t = this.namespace.accounts;
    return t ? [...new Set(t.filter((e) => e.split(":")[1] === this.chainId.toString()).map((e) => e.split(":")[2]))] : [];
  }
  createHttpProviders() {
    const t = {};
    return this.namespace.chains.forEach((e) => {
      var i3;
      const n2 = b2(e);
      t[n2] = this.createHttpProvider(n2, (i3 = this.namespace.rpcMap) == null ? void 0 : i3[e]);
    }), t;
  }
  getHttpProvider() {
    const t = `${this.name}:${this.chainId}`, e = this.httpProviders[t];
    if (typeof e > "u") throw new Error(`JSON-RPC provider for ${t} not found`);
    return e;
  }
  setHttpProvider(t, e) {
    const i3 = this.createHttpProvider(t, e);
    i3 && (this.httpProviders[t] = i3);
  }
  createHttpProvider(t, e) {
    const i3 = e || u2(t, this.namespace, this.client.core.projectId);
    if (!i3) throw new Error(`No RPC url provided for chainId: ${t}`);
    return new o(new f5(i3, h3("disableProviderPing")));
  }
};
var Me4 = Object.defineProperty;
var Be3 = (s, t, e) => t in s ? Me4(s, t, { enumerable: true, configurable: true, writable: true, value: e }) : s[t] = e;
var E4 = (s, t, e) => Be3(s, typeof t != "symbol" ? t + "" : t, e);
var Ge2 = class {
  constructor(t) {
    E4(this, "name", "cosmos"), E4(this, "client"), E4(this, "httpProviders"), E4(this, "events"), E4(this, "namespace"), E4(this, "chainId"), this.namespace = t.namespace, this.events = h3("events"), this.client = h3("client"), this.chainId = this.getDefaultChain(), this.httpProviders = this.createHttpProviders();
  }
  updateNamespace(t) {
    this.namespace = Object.assign(this.namespace, t);
  }
  requestAccounts() {
    return this.getAccounts();
  }
  getDefaultChain() {
    if (this.chainId) return this.chainId;
    if (this.namespace.defaultChain) return this.namespace.defaultChain;
    const t = this.namespace.chains[0];
    if (!t) throw new Error("ChainId not found");
    return t.split(":")[1];
  }
  request(t) {
    return this.namespace.methods.includes(t.request.method) ? this.client.request(t) : this.getHttpProvider().request(t.request);
  }
  setDefaultChain(t, e) {
    this.httpProviders[t] || this.setHttpProvider(t, e), this.chainId = t, this.events.emit(l3.DEFAULT_CHAIN_CHANGED, `${this.name}:${this.chainId}`);
  }
  getAccounts() {
    const t = this.namespace.accounts;
    return t ? [...new Set(t.filter((e) => e.split(":")[1] === this.chainId.toString()).map((e) => e.split(":")[2]))] : [];
  }
  createHttpProviders() {
    const t = {};
    return this.namespace.chains.forEach((e) => {
      var i3;
      const n2 = b2(e);
      t[n2] = this.createHttpProvider(n2, (i3 = this.namespace.rpcMap) == null ? void 0 : i3[e]);
    }), t;
  }
  getHttpProvider() {
    const t = `${this.name}:${this.chainId}`, e = this.httpProviders[t];
    if (typeof e > "u") throw new Error(`JSON-RPC provider for ${t} not found`);
    return e;
  }
  setHttpProvider(t, e) {
    const i3 = this.createHttpProvider(t, e);
    i3 && (this.httpProviders[t] = i3);
  }
  createHttpProvider(t, e) {
    const i3 = e || u2(t, this.namespace, this.client.core.projectId);
    if (!i3) throw new Error(`No RPC url provided for chainId: ${t}`);
    return new o(new f5(i3, h3("disableProviderPing")));
  }
};
var Je2 = Object.defineProperty;
var ze2 = (s, t, e) => t in s ? Je2(s, t, { enumerable: true, configurable: true, writable: true, value: e }) : s[t] = e;
var H = (s, t, e) => ze2(s, typeof t != "symbol" ? t + "" : t, e);
var ke4 = class {
  constructor(t) {
    H(this, "name", "algorand"), H(this, "client"), H(this, "httpProviders"), H(this, "events"), H(this, "namespace"), H(this, "chainId"), this.namespace = t.namespace, this.events = h3("events"), this.client = h3("client"), this.chainId = this.getDefaultChain(), this.httpProviders = this.createHttpProviders();
  }
  updateNamespace(t) {
    this.namespace = Object.assign(this.namespace, t);
  }
  requestAccounts() {
    return this.getAccounts();
  }
  request(t) {
    return this.namespace.methods.includes(t.request.method) ? this.client.request(t) : this.getHttpProvider().request(t.request);
  }
  setDefaultChain(t, e) {
    if (!this.httpProviders[t]) {
      const i3 = e || u2(`${this.name}:${t}`, this.namespace, this.client.core.projectId);
      if (!i3) throw new Error(`No RPC url provided for chainId: ${t}`);
      this.setHttpProvider(t, i3);
    }
    this.chainId = t, this.events.emit(l3.DEFAULT_CHAIN_CHANGED, `${this.name}:${this.chainId}`);
  }
  getDefaultChain() {
    if (this.chainId) return this.chainId;
    if (this.namespace.defaultChain) return this.namespace.defaultChain;
    const t = this.namespace.chains[0];
    if (!t) throw new Error("ChainId not found");
    return t.split(":")[1];
  }
  getAccounts() {
    const t = this.namespace.accounts;
    return t ? [...new Set(t.filter((e) => e.split(":")[1] === this.chainId.toString()).map((e) => e.split(":")[2]))] : [];
  }
  createHttpProviders() {
    const t = {};
    return this.namespace.chains.forEach((e) => {
      var i3;
      t[e] = this.createHttpProvider(e, (i3 = this.namespace.rpcMap) == null ? void 0 : i3[e]);
    }), t;
  }
  getHttpProvider() {
    const t = `${this.name}:${this.chainId}`, e = this.httpProviders[t];
    if (typeof e > "u") throw new Error(`JSON-RPC provider for ${t} not found`);
    return e;
  }
  setHttpProvider(t, e) {
    const i3 = this.createHttpProvider(t, e);
    i3 && (this.httpProviders[t] = i3);
  }
  createHttpProvider(t, e) {
    const i3 = e || u2(t, this.namespace, this.client.core.projectId);
    return typeof i3 > "u" ? void 0 : new o(new f5(i3, h3("disableProviderPing")));
  }
};
var We2 = Object.defineProperty;
var Ke4 = (s, t, e) => t in s ? We2(s, t, { enumerable: true, configurable: true, writable: true, value: e }) : s[t] = e;
var S3 = (s, t, e) => Ke4(s, typeof t != "symbol" ? t + "" : t, e);
var Ve3 = class {
  constructor(t) {
    S3(this, "name", "cip34"), S3(this, "client"), S3(this, "httpProviders"), S3(this, "events"), S3(this, "namespace"), S3(this, "chainId"), this.namespace = t.namespace, this.events = h3("events"), this.client = h3("client"), this.chainId = this.getDefaultChain(), this.httpProviders = this.createHttpProviders();
  }
  updateNamespace(t) {
    this.namespace = Object.assign(this.namespace, t);
  }
  requestAccounts() {
    return this.getAccounts();
  }
  getDefaultChain() {
    if (this.chainId) return this.chainId;
    if (this.namespace.defaultChain) return this.namespace.defaultChain;
    const t = this.namespace.chains[0];
    if (!t) throw new Error("ChainId not found");
    return t.split(":")[1];
  }
  request(t) {
    return this.namespace.methods.includes(t.request.method) ? this.client.request(t) : this.getHttpProvider().request(t.request);
  }
  setDefaultChain(t, e) {
    this.httpProviders[t] || this.setHttpProvider(t, e), this.chainId = t, this.events.emit(l3.DEFAULT_CHAIN_CHANGED, `${this.name}:${this.chainId}`);
  }
  getAccounts() {
    const t = this.namespace.accounts;
    return t ? [...new Set(t.filter((e) => e.split(":")[1] === this.chainId.toString()).map((e) => e.split(":")[2]))] : [];
  }
  createHttpProviders() {
    const t = {};
    return this.namespace.chains.forEach((e) => {
      const i3 = this.getCardanoRPCUrl(e), n2 = b2(e);
      t[n2] = this.createHttpProvider(n2, i3);
    }), t;
  }
  getHttpProvider() {
    const t = `${this.name}:${this.chainId}`, e = this.httpProviders[t];
    if (typeof e > "u") throw new Error(`JSON-RPC provider for ${t} not found`);
    return e;
  }
  getCardanoRPCUrl(t) {
    const e = this.namespace.rpcMap;
    if (e) return e[t];
  }
  setHttpProvider(t, e) {
    const i3 = this.createHttpProvider(t, e);
    i3 && (this.httpProviders[t] = i3);
  }
  createHttpProvider(t, e) {
    const i3 = e || this.getCardanoRPCUrl(t);
    if (!i3) throw new Error(`No RPC url provided for chainId: ${t}`);
    return new o(new f5(i3, h3("disableProviderPing")));
  }
};
var Xe3 = Object.defineProperty;
var Ye3 = (s, t, e) => t in s ? Xe3(s, t, { enumerable: true, configurable: true, writable: true, value: e }) : s[t] = e;
var N3 = (s, t, e) => Ye3(s, typeof t != "symbol" ? t + "" : t, e);
var Qe4 = class {
  constructor(t) {
    N3(this, "name", "elrond"), N3(this, "client"), N3(this, "httpProviders"), N3(this, "events"), N3(this, "namespace"), N3(this, "chainId"), this.namespace = t.namespace, this.events = h3("events"), this.client = h3("client"), this.chainId = this.getDefaultChain(), this.httpProviders = this.createHttpProviders();
  }
  updateNamespace(t) {
    this.namespace = Object.assign(this.namespace, t);
  }
  requestAccounts() {
    return this.getAccounts();
  }
  request(t) {
    return this.namespace.methods.includes(t.request.method) ? this.client.request(t) : this.getHttpProvider().request(t.request);
  }
  setDefaultChain(t, e) {
    this.httpProviders[t] || this.setHttpProvider(t, e), this.chainId = t, this.events.emit(l3.DEFAULT_CHAIN_CHANGED, `${this.name}:${t}`);
  }
  getDefaultChain() {
    if (this.chainId) return this.chainId;
    if (this.namespace.defaultChain) return this.namespace.defaultChain;
    const t = this.namespace.chains[0];
    if (!t) throw new Error("ChainId not found");
    return t.split(":")[1];
  }
  getAccounts() {
    const t = this.namespace.accounts;
    return t ? [...new Set(t.filter((e) => e.split(":")[1] === this.chainId.toString()).map((e) => e.split(":")[2]))] : [];
  }
  createHttpProviders() {
    const t = {};
    return this.namespace.chains.forEach((e) => {
      var i3;
      const n2 = b2(e);
      t[n2] = this.createHttpProvider(n2, (i3 = this.namespace.rpcMap) == null ? void 0 : i3[e]);
    }), t;
  }
  getHttpProvider() {
    const t = `${this.name}:${this.chainId}`, e = this.httpProviders[t];
    if (typeof e > "u") throw new Error(`JSON-RPC provider for ${t} not found`);
    return e;
  }
  setHttpProvider(t, e) {
    const i3 = this.createHttpProvider(t, e);
    i3 && (this.httpProviders[t] = i3);
  }
  createHttpProvider(t, e) {
    const i3 = e || u2(t, this.namespace, this.client.core.projectId);
    if (!i3) throw new Error(`No RPC url provided for chainId: ${t}`);
    return new o(new f5(i3, h3("disableProviderPing")));
  }
};
var Ze3 = Object.defineProperty;
var Te3 = (s, t, e) => t in s ? Ze3(s, t, { enumerable: true, configurable: true, writable: true, value: e }) : s[t] = e;
var D = (s, t, e) => Te3(s, typeof t != "symbol" ? t + "" : t, e);
var ts2 = class {
  constructor(t) {
    D(this, "name", "multiversx"), D(this, "client"), D(this, "httpProviders"), D(this, "events"), D(this, "namespace"), D(this, "chainId"), this.namespace = t.namespace, this.events = h3("events"), this.client = h3("client"), this.chainId = this.getDefaultChain(), this.httpProviders = this.createHttpProviders();
  }
  updateNamespace(t) {
    this.namespace = Object.assign(this.namespace, t);
  }
  requestAccounts() {
    return this.getAccounts();
  }
  request(t) {
    return this.namespace.methods.includes(t.request.method) ? this.client.request(t) : this.getHttpProvider().request(t.request);
  }
  setDefaultChain(t, e) {
    this.httpProviders[t] || this.setHttpProvider(t, e), this.chainId = t, this.events.emit(l3.DEFAULT_CHAIN_CHANGED, `${this.name}:${t}`);
  }
  getDefaultChain() {
    if (this.chainId) return this.chainId;
    if (this.namespace.defaultChain) return this.namespace.defaultChain;
    const t = this.namespace.chains[0];
    if (!t) throw new Error("ChainId not found");
    return t.split(":")[1];
  }
  getAccounts() {
    const t = this.namespace.accounts;
    return t ? [...new Set(t.filter((e) => e.split(":")[1] === this.chainId.toString()).map((e) => e.split(":")[2]))] : [];
  }
  createHttpProviders() {
    const t = {};
    return this.namespace.chains.forEach((e) => {
      var i3;
      const n2 = b2(e);
      t[n2] = this.createHttpProvider(n2, (i3 = this.namespace.rpcMap) == null ? void 0 : i3[e]);
    }), t;
  }
  getHttpProvider() {
    const t = `${this.name}:${this.chainId}`, e = this.httpProviders[t];
    if (typeof e > "u") throw new Error(`JSON-RPC provider for ${t} not found`);
    return e;
  }
  setHttpProvider(t, e) {
    const i3 = this.createHttpProvider(t, e);
    i3 && (this.httpProviders[t] = i3);
  }
  createHttpProvider(t, e) {
    const i3 = e || u2(t, this.namespace, this.client.core.projectId);
    if (!i3) throw new Error(`No RPC url provided for chainId: ${t}`);
    return new o(new f5(i3, h3("disableProviderPing")));
  }
};
var es2 = Object.defineProperty;
var ss2 = (s, t, e) => t in s ? es2(s, t, { enumerable: true, configurable: true, writable: true, value: e }) : s[t] = e;
var q = (s, t, e) => ss2(s, typeof t != "symbol" ? t + "" : t, e);
var is2 = class {
  constructor(t) {
    q(this, "name", "near"), q(this, "client"), q(this, "httpProviders"), q(this, "events"), q(this, "namespace"), q(this, "chainId"), this.namespace = t.namespace, this.events = h3("events"), this.client = h3("client"), this.chainId = this.getDefaultChain(), this.httpProviders = this.createHttpProviders();
  }
  updateNamespace(t) {
    this.namespace = Object.assign(this.namespace, t);
  }
  requestAccounts() {
    return this.getAccounts();
  }
  getDefaultChain() {
    if (this.chainId) return this.chainId;
    if (this.namespace.defaultChain) return this.namespace.defaultChain;
    const t = this.namespace.chains[0];
    if (!t) throw new Error("ChainId not found");
    return t.split(":")[1];
  }
  request(t) {
    return this.namespace.methods.includes(t.request.method) ? this.client.request(t) : this.getHttpProvider().request(t.request);
  }
  setDefaultChain(t, e) {
    if (this.chainId = t, !this.httpProviders[t]) {
      const i3 = e || u2(`${this.name}:${t}`, this.namespace);
      if (!i3) throw new Error(`No RPC url provided for chainId: ${t}`);
      this.setHttpProvider(t, i3);
    }
    this.events.emit(l3.DEFAULT_CHAIN_CHANGED, `${this.name}:${this.chainId}`);
  }
  getAccounts() {
    const t = this.namespace.accounts;
    return t ? t.filter((e) => e.split(":")[1] === this.chainId.toString()).map((e) => e.split(":")[2]) || [] : [];
  }
  createHttpProviders() {
    const t = {};
    return this.namespace.chains.forEach((e) => {
      var i3;
      t[e] = this.createHttpProvider(e, (i3 = this.namespace.rpcMap) == null ? void 0 : i3[e]);
    }), t;
  }
  getHttpProvider() {
    const t = `${this.name}:${this.chainId}`, e = this.httpProviders[t];
    if (typeof e > "u") throw new Error(`JSON-RPC provider for ${t} not found`);
    return e;
  }
  setHttpProvider(t, e) {
    const i3 = this.createHttpProvider(t, e);
    i3 && (this.httpProviders[t] = i3);
  }
  createHttpProvider(t, e) {
    const i3 = e || u2(t, this.namespace);
    return typeof i3 > "u" ? void 0 : new o(new f5(i3, h3("disableProviderPing")));
  }
};
var rs2 = Object.defineProperty;
var ns2 = (s, t, e) => t in s ? rs2(s, t, { enumerable: true, configurable: true, writable: true, value: e }) : s[t] = e;
var j2 = (s, t, e) => ns2(s, typeof t != "symbol" ? t + "" : t, e);
var as2 = class {
  constructor(t) {
    j2(this, "name", "tezos"), j2(this, "client"), j2(this, "httpProviders"), j2(this, "events"), j2(this, "namespace"), j2(this, "chainId"), this.namespace = t.namespace, this.events = h3("events"), this.client = h3("client"), this.chainId = this.getDefaultChain(), this.httpProviders = this.createHttpProviders();
  }
  updateNamespace(t) {
    this.namespace = Object.assign(this.namespace, t);
  }
  requestAccounts() {
    return this.getAccounts();
  }
  getDefaultChain() {
    if (this.chainId) return this.chainId;
    if (this.namespace.defaultChain) return this.namespace.defaultChain;
    const t = this.namespace.chains[0];
    if (!t) throw new Error("ChainId not found");
    return t.split(":")[1];
  }
  request(t) {
    return this.namespace.methods.includes(t.request.method) ? this.client.request(t) : this.getHttpProvider().request(t.request);
  }
  setDefaultChain(t, e) {
    if (this.chainId = t, !this.httpProviders[t]) {
      const i3 = e || u2(`${this.name}:${t}`, this.namespace);
      if (!i3) throw new Error(`No RPC url provided for chainId: ${t}`);
      this.setHttpProvider(t, i3);
    }
    this.events.emit(l3.DEFAULT_CHAIN_CHANGED, `${this.name}:${this.chainId}`);
  }
  getAccounts() {
    const t = this.namespace.accounts;
    return t ? t.filter((e) => e.split(":")[1] === this.chainId.toString()).map((e) => e.split(":")[2]) || [] : [];
  }
  createHttpProviders() {
    const t = {};
    return this.namespace.chains.forEach((e) => {
      t[e] = this.createHttpProvider(e);
    }), t;
  }
  getHttpProvider() {
    const t = `${this.name}:${this.chainId}`, e = this.httpProviders[t];
    if (typeof e > "u") throw new Error(`JSON-RPC provider for ${t} not found`);
    return e;
  }
  setHttpProvider(t, e) {
    const i3 = this.createHttpProvider(t, e);
    i3 && (this.httpProviders[t] = i3);
  }
  createHttpProvider(t, e) {
    const i3 = e || u2(t, this.namespace);
    return typeof i3 > "u" ? void 0 : new o(new f5(i3));
  }
};
var cs2 = Object.defineProperty;
var os2 = (s, t, e) => t in s ? cs2(s, t, { enumerable: true, configurable: true, writable: true, value: e }) : s[t] = e;
var R3 = (s, t, e) => os2(s, typeof t != "symbol" ? t + "" : t, e);
var hs3 = class {
  constructor(t) {
    R3(this, "name", I3), R3(this, "client"), R3(this, "httpProviders"), R3(this, "events"), R3(this, "namespace"), R3(this, "chainId"), this.namespace = t.namespace, this.events = h3("events"), this.client = h3("client"), this.chainId = this.getDefaultChain(), this.httpProviders = this.createHttpProviders();
  }
  updateNamespace(t) {
    this.namespace.chains = [...new Set((this.namespace.chains || []).concat(t.chains || []))], this.namespace.accounts = [...new Set((this.namespace.accounts || []).concat(t.accounts || []))], this.namespace.methods = [...new Set((this.namespace.methods || []).concat(t.methods || []))], this.namespace.events = [...new Set((this.namespace.events || []).concat(t.events || []))], this.httpProviders = this.createHttpProviders();
  }
  requestAccounts() {
    return this.getAccounts();
  }
  request(t) {
    return this.namespace.methods.includes(t.request.method) ? this.client.request(t) : this.getHttpProvider(t.chainId).request(t.request);
  }
  setDefaultChain(t, e) {
    this.httpProviders[t] || this.setHttpProvider(t, e), this.chainId = t, this.events.emit(l3.DEFAULT_CHAIN_CHANGED, `${this.name}:${t}`);
  }
  getDefaultChain() {
    if (this.chainId) return this.chainId;
    if (this.namespace.defaultChain) return this.namespace.defaultChain;
    const t = this.namespace.chains[0];
    if (!t) throw new Error("ChainId not found");
    return t.split(":")[1];
  }
  getAccounts() {
    const t = this.namespace.accounts;
    return t ? [...new Set(t.filter((e) => e.split(":")[1] === this.chainId.toString()).map((e) => e.split(":")[2]))] : [];
  }
  createHttpProviders() {
    var t, e;
    const i3 = {};
    return (e = (t = this.namespace) == null ? void 0 : t.accounts) == null || e.forEach((n2) => {
      const a2 = Fe(n2);
      i3[`${a2.namespace}:${a2.reference}`] = this.createHttpProvider(n2);
    }), i3;
  }
  getHttpProvider(t) {
    const e = this.httpProviders[t];
    if (typeof e > "u") throw new Error(`JSON-RPC provider for ${t} not found`);
    return e;
  }
  setHttpProvider(t, e) {
    const i3 = this.createHttpProvider(t, e);
    i3 && (this.httpProviders[t] = i3);
  }
  createHttpProvider(t, e) {
    const i3 = e || u2(t, this.namespace, this.client.core.projectId);
    if (!i3) throw new Error(`No RPC url provided for chainId: ${t}`);
    return new o(new f5(i3, h3("disableProviderPing")));
  }
};
var ps2 = Object.defineProperty;
var ds2 = Object.defineProperties;
var us2 = Object.getOwnPropertyDescriptors;
var Nt3 = Object.getOwnPropertySymbols;
var ls2 = Object.prototype.hasOwnProperty;
var fs2 = Object.prototype.propertyIsEnumerable;
var Z2 = (s, t, e) => t in s ? ps2(s, t, { enumerable: true, configurable: true, writable: true, value: e }) : s[t] = e;
var B2 = (s, t) => {
  for (var e in t || (t = {})) ls2.call(t, e) && Z2(s, e, t[e]);
  if (Nt3) for (var e of Nt3(t)) fs2.call(t, e) && Z2(s, e, t[e]);
  return s;
};
var T3 = (s, t) => ds2(s, us2(t));
var f6 = (s, t, e) => Z2(s, typeof t != "symbol" ? t + "" : t, e);
var G3 = class _G {
  constructor(t) {
    f6(this, "client"), f6(this, "namespaces"), f6(this, "optionalNamespaces"), f6(this, "sessionProperties"), f6(this, "scopedProperties"), f6(this, "events", new import_events6.default()), f6(this, "rpcProviders", {}), f6(this, "session"), f6(this, "providerOpts"), f6(this, "logger"), f6(this, "uri"), f6(this, "disableProviderPing", false), this.providerOpts = t, this.logger = typeof (t == null ? void 0 : t.logger) < "u" && typeof (t == null ? void 0 : t.logger) != "string" ? t.logger : (0, import_pino.default)(k({ level: (t == null ? void 0 : t.logger) || rt2 })), this.disableProviderPing = (t == null ? void 0 : t.disableProviderPing) || false;
  }
  static async init(t) {
    const e = new _G(t);
    return await e.initialize(), e;
  }
  async request(t, e, i3) {
    const [n2, a2] = this.validateChain(e);
    if (!this.session) throw new Error("Please call connect() before request()");
    return await this.getProvider(n2).request({ request: B2({}, t), chainId: `${n2}:${a2}`, topic: this.session.topic, expiry: i3 });
  }
  sendAsync(t, e, i3, n2) {
    const a2 = (/* @__PURE__ */ new Date()).getTime();
    this.request(t, i3, n2).then((r2) => e(null, formatJsonRpcResult(a2, r2))).catch((r2) => e(r2, void 0));
  }
  async enable() {
    if (!this.client) throw new Error("Sign Client not initialized");
    return this.session || await this.connect({ namespaces: this.namespaces, optionalNamespaces: this.optionalNamespaces, sessionProperties: this.sessionProperties, scopedProperties: this.scopedProperties }), await this.requestAccounts();
  }
  async disconnect() {
    var t;
    if (!this.session) throw new Error("Please call connect() before enable()");
    await this.client.disconnect({ topic: (t = this.session) == null ? void 0 : t.topic, reason: Kt("USER_DISCONNECTED") }), await this.cleanup();
  }
  async connect(t) {
    if (!this.client) throw new Error("Sign Client not initialized");
    if (this.setNamespaces(t), await this.cleanupPendingPairings(), !t.skipPairing) return await this.pair(t.pairingTopic);
  }
  async authenticate(t, e) {
    if (!this.client) throw new Error("Sign Client not initialized");
    this.setNamespaces(t), await this.cleanupPendingPairings();
    const { uri: i3, response: n2 } = await this.client.authenticate(t, e);
    i3 && (this.uri = i3, this.events.emit("display_uri", i3));
    const a2 = await n2();
    if (this.session = a2.session, this.session) {
      const r2 = yt2(this.session.namespaces);
      this.namespaces = M4(this.namespaces, r2), await this.persist("namespaces", this.namespaces), this.onConnect();
    }
    return a2;
  }
  on(t, e) {
    this.events.on(t, e);
  }
  once(t, e) {
    this.events.once(t, e);
  }
  removeListener(t, e) {
    this.events.removeListener(t, e);
  }
  off(t, e) {
    this.events.off(t, e);
  }
  get isWalletConnect() {
    return true;
  }
  async pair(t) {
    const { uri: e, approval: i3 } = await this.client.connect({ pairingTopic: t, requiredNamespaces: this.namespaces, optionalNamespaces: this.optionalNamespaces, sessionProperties: this.sessionProperties, scopedProperties: this.scopedProperties });
    e && (this.uri = e, this.events.emit("display_uri", e));
    const n2 = await i3();
    this.session = n2;
    const a2 = yt2(n2.namespaces);
    return this.namespaces = M4(this.namespaces, a2), await this.persist("namespaces", this.namespaces), await this.persist("optionalNamespaces", this.optionalNamespaces), this.onConnect(), this.session;
  }
  setDefaultChain(t, e) {
    try {
      if (!this.session) return;
      const [i3, n2] = this.validateChain(t), a2 = this.getProvider(i3);
      a2.name === I3 ? a2.setDefaultChain(`${i3}:${n2}`, e) : a2.setDefaultChain(n2, e);
    } catch (i3) {
      if (!/Please call connect/.test(i3.message)) throw i3;
    }
  }
  async cleanupPendingPairings(t = {}) {
    this.logger.info("Cleaning up inactive pairings...");
    const e = this.client.pairing.getAll();
    if (me(e)) {
      for (const i3 of e) t.deletePairings ? this.client.core.expirer.set(i3.topic, 0) : await this.client.core.relayer.subscriber.unsubscribe(i3.topic);
      this.logger.info(`Inactive pairings cleared: ${e.length}`);
    }
  }
  abortPairingAttempt() {
    this.logger.warn("abortPairingAttempt is deprecated. This is now a no-op.");
  }
  async checkStorage() {
    this.namespaces = await this.getFromStore("namespaces") || {}, this.optionalNamespaces = await this.getFromStore("optionalNamespaces") || {}, this.session && this.createProviders();
  }
  async initialize() {
    this.logger.trace("Initialized"), await this.createClient(), await this.checkStorage(), this.registerEventListeners();
  }
  async createClient() {
    var t, e;
    if (this.client = this.providerOpts.client || await Ee2.init({ core: this.providerOpts.core, logger: this.providerOpts.logger || rt2, relayUrl: this.providerOpts.relayUrl || xt3, projectId: this.providerOpts.projectId, metadata: this.providerOpts.metadata, storageOptions: this.providerOpts.storageOptions, storage: this.providerOpts.storage, name: this.providerOpts.name, customStoragePrefix: this.providerOpts.customStoragePrefix, telemetryEnabled: this.providerOpts.telemetryEnabled }), this.providerOpts.session) try {
      this.session = this.client.session.get(this.providerOpts.session.topic);
    } catch (i3) {
      throw this.logger.error("Failed to get session", i3), new Error(`The provided session: ${(e = (t = this.providerOpts) == null ? void 0 : t.session) == null ? void 0 : e.topic} doesn't exist in the Sign client`);
    }
    else {
      const i3 = this.client.session.getAll();
      this.session = i3[0];
    }
    this.logger.trace("SignClient Initialized");
  }
  createProviders() {
    if (!this.client) throw new Error("Sign Client not initialized");
    if (!this.session) throw new Error("Session not initialized. Please call connect() before enable()");
    const t = [...new Set(Object.keys(this.session.namespaces).map((e) => Yo(e)))];
    X3("client", this.client), X3("events", this.events), X3("disableProviderPing", this.disableProviderPing), t.forEach((e) => {
      if (!this.session) return;
      const i3 = be3(e, this.session), n2 = gt3(i3), a2 = M4(this.namespaces, this.optionalNamespaces), r2 = T3(B2({}, a2[e]), { accounts: i3, chains: n2 });
      switch (e) {
        case "eip155":
          this.rpcProviders[e] = new Fe3({ namespace: r2 });
          break;
        case "algorand":
          this.rpcProviders[e] = new ke4({ namespace: r2 });
          break;
        case "solana":
          this.rpcProviders[e] = new Le4({ namespace: r2 });
          break;
        case "cosmos":
          this.rpcProviders[e] = new Ge2({ namespace: r2 });
          break;
        case "polkadot":
          this.rpcProviders[e] = new Ne2({ namespace: r2 });
          break;
        case "cip34":
          this.rpcProviders[e] = new Ve3({ namespace: r2 });
          break;
        case "elrond":
          this.rpcProviders[e] = new Qe4({ namespace: r2 });
          break;
        case "multiversx":
          this.rpcProviders[e] = new ts2({ namespace: r2 });
          break;
        case "near":
          this.rpcProviders[e] = new is2({ namespace: r2 });
          break;
        case "tezos":
          this.rpcProviders[e] = new as2({ namespace: r2 });
          break;
        default:
          this.rpcProviders[I3] ? this.rpcProviders[I3].updateNamespace(r2) : this.rpcProviders[I3] = new hs3({ namespace: r2 });
      }
    });
  }
  registerEventListeners() {
    if (typeof this.client > "u") throw new Error("Sign Client is not initialized");
    this.client.on("session_ping", (t) => {
      var e;
      const { topic: i3 } = t;
      i3 === ((e = this.session) == null ? void 0 : e.topic) && this.events.emit("session_ping", t);
    }), this.client.on("session_event", (t) => {
      var e;
      const { params: i3, topic: n2 } = t;
      if (n2 !== ((e = this.session) == null ? void 0 : e.topic)) return;
      const { event: a2 } = i3;
      if (a2.name === "accountsChanged") {
        const r2 = a2.data;
        r2 && me(r2) && this.events.emit("accountsChanged", r2.map(wt3));
      } else if (a2.name === "chainChanged") {
        const r2 = i3.chainId, c4 = i3.event.data, o3 = Yo(r2), p4 = V3(r2) !== V3(c4) ? `${o3}:${V3(c4)}` : r2;
        this.onChainChanged(p4);
      } else this.events.emit(a2.name, a2.data);
      this.events.emit("session_event", t);
    }), this.client.on("session_update", ({ topic: t, params: e }) => {
      var i3, n2;
      if (t !== ((i3 = this.session) == null ? void 0 : i3.topic)) return;
      const { namespaces: a2 } = e, r2 = (n2 = this.client) == null ? void 0 : n2.session.get(t);
      this.session = T3(B2({}, r2), { namespaces: a2 }), this.onSessionUpdate(), this.events.emit("session_update", { topic: t, params: e });
    }), this.client.on("session_delete", async (t) => {
      var e;
      t.topic === ((e = this.session) == null ? void 0 : e.topic) && (await this.cleanup(), this.events.emit("session_delete", t), this.events.emit("disconnect", T3(B2({}, Kt("USER_DISCONNECTED")), { data: t.topic })));
    }), this.on(l3.DEFAULT_CHAIN_CHANGED, (t) => {
      this.onChainChanged(t, true);
    });
  }
  getProvider(t) {
    return this.rpcProviders[t] || this.rpcProviders[I3];
  }
  onSessionUpdate() {
    Object.keys(this.rpcProviders).forEach((t) => {
      var e;
      this.getProvider(t).updateNamespace((e = this.session) == null ? void 0 : e.namespaces[t]);
    });
  }
  setNamespaces(t) {
    const { namespaces: e = {}, optionalNamespaces: i3 = {}, sessionProperties: n2, scopedProperties: a2 } = t;
    this.optionalNamespaces = M4(e, i3), this.sessionProperties = n2, this.scopedProperties = a2;
  }
  validateChain(t) {
    const [e, i3] = (t == null ? void 0 : t.split(":")) || ["", ""];
    if (!this.namespaces || !Object.keys(this.namespaces).length) return [e, i3];
    if (e && !Object.keys(this.namespaces || {}).map((r2) => Yo(r2)).includes(e)) throw new Error(`Namespace '${e}' is not configured. Please call connect() first with namespace config.`);
    if (e && i3) return [e, i3];
    const n2 = Yo(Object.keys(this.namespaces)[0]), a2 = this.rpcProviders[n2].getDefaultChain();
    return [n2, a2];
  }
  async requestAccounts() {
    const [t] = this.validateChain();
    return await this.getProvider(t).requestAccounts();
  }
  async onChainChanged(t, e = false) {
    if (!this.namespaces) return;
    const [i3, n2] = this.validateChain(t);
    if (!n2) return;
    this.updateNamespaceChain(i3, n2), this.events.emit("chainChanged", n2);
    const a2 = this.getProvider(i3).getDefaultChain();
    e || this.getProvider(i3).setDefaultChain(n2), this.emitAccountsChangedOnChainChange({ namespace: i3, previousChainId: a2, newChainId: t }), await this.persist("namespaces", this.namespaces);
  }
  emitAccountsChangedOnChainChange({ namespace: t, previousChainId: e, newChainId: i3 }) {
    var n2, a2;
    try {
      if (e === i3) return;
      const r2 = (a2 = (n2 = this.session) == null ? void 0 : n2.namespaces[t]) == null ? void 0 : a2.accounts;
      if (!r2) return;
      const c4 = r2.filter((o3) => o3.includes(`${i3}:`)).map(wt3);
      if (!me(c4)) return;
      this.events.emit("accountsChanged", c4);
    } catch (r2) {
      this.logger.warn("Failed to emit accountsChanged on chain change", r2);
    }
  }
  updateNamespaceChain(t, e) {
    if (!this.namespaces) return;
    const i3 = this.namespaces[t] ? t : `${t}:${e}`, n2 = { chains: [], methods: [], events: [], defaultChain: e };
    this.namespaces[i3] ? this.namespaces[i3] && (this.namespaces[i3].defaultChain = e) : this.namespaces[i3] = n2;
  }
  onConnect() {
    this.createProviders(), this.events.emit("connect", { session: this.session });
  }
  async cleanup() {
    this.namespaces = void 0, this.optionalNamespaces = void 0, this.sessionProperties = void 0, await this.deleteFromStore("namespaces"), await this.deleteFromStore("optionalNamespaces"), await this.deleteFromStore("sessionProperties"), this.session = void 0, await this.cleanupPendingPairings({ deletePairings: true }), await this.cleanupStorage();
  }
  async persist(t, e) {
    var i3;
    const n2 = ((i3 = this.session) == null ? void 0 : i3.topic) || "";
    await this.client.core.storage.setItem(`${U3}/${t}${n2}`, e);
  }
  async getFromStore(t) {
    var e;
    const i3 = ((e = this.session) == null ? void 0 : e.topic) || "";
    return await this.client.core.storage.getItem(`${U3}/${t}${i3}`);
  }
  async deleteFromStore(t) {
    var e;
    const i3 = ((e = this.session) == null ? void 0 : e.topic) || "";
    await this.client.core.storage.removeItem(`${U3}/${t}${i3}`);
  }
  async cleanupStorage() {
    var t;
    try {
      if (((t = this.client) == null ? void 0 : t.session.length) > 0) return;
      const e = await this.client.core.storage.getKeys();
      for (const i3 of e) i3.startsWith(U3) && await this.client.core.storage.removeItem(i3);
    } catch (e) {
      this.logger.warn("Failed to cleanup storage", e);
    }
  }
};
var ms2 = G3;
export {
  ms2 as UniversalProvider,
  G3 as default
};
/*! Bundled license information:

@walletconnect/utils/dist/index.es.js:
  (*! noble-ciphers - MIT License (c) 2023 Paul Miller (paulmillr.com) *)
*/
//# sourceMappingURL=index.es-SWNRHQKU.js.map

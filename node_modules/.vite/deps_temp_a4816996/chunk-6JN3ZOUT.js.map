{
  "version": 3,
  "sources": ["../../thirdweb/src/extensions/erc721/__generated__/IERC721A/read/balanceOf.ts", "../../thirdweb/src/extensions/erc721/__generated__/IERC721AQueryable/read/tokensOfOwner.ts", "../../thirdweb/src/extensions/erc721/__generated__/IERC721Enumerable/read/tokenOfOwnerByIndex.ts", "../../thirdweb/src/extensions/erc721/read/getOwnedTokenIds.ts", "../../thirdweb/src/extensions/erc721/read/getOwnedNFTs.ts"],
  "sourcesContent": ["import type { AbiParameterToPrimitiveType } from \"abitype\";\nimport { decodeAbiParameters } from \"viem\";\nimport { readContract } from \"../../../../../transaction/read-contract.js\";\nimport type { BaseTransactionOptions } from \"../../../../../transaction/types.js\";\nimport { encodeAbiParameters } from \"../../../../../utils/abi/encodeAbiParameters.js\";\nimport { detectMethod } from \"../../../../../utils/bytecode/detectExtension.js\";\nimport type { Hex } from \"../../../../../utils/encoding/hex.js\";\n\n/**\n * Represents the parameters for the \"balanceOf\" function.\n */\nexport type BalanceOfParams = {\n  owner: AbiParameterToPrimitiveType<{ type: \"address\"; name: \"owner\" }>;\n};\n\nexport const FN_SELECTOR = \"0x70a08231\" as const;\nconst FN_INPUTS = [\n  {\n    name: \"owner\",\n    type: \"address\",\n  },\n] as const;\nconst FN_OUTPUTS = [\n  {\n    type: \"uint256\",\n  },\n] as const;\n\n/**\n * Checks if the `balanceOf` method is supported by the given contract.\n * @param availableSelectors An array of 4byte function selectors of the contract. You can get this in various ways, such as using \"whatsabi\" or if you have the ABI of the contract available you can use it to generate the selectors.\n * @returns A boolean indicating if the `balanceOf` method is supported.\n * @extension ERC721\n * @example\n * ```ts\n * import { isBalanceOfSupported } from \"thirdweb/extensions/erc721\";\n * const supported = isBalanceOfSupported([\"0x...\"]);\n * ```\n */\nexport function isBalanceOfSupported(availableSelectors: string[]) {\n  return detectMethod({\n    availableSelectors,\n    method: [FN_SELECTOR, FN_INPUTS, FN_OUTPUTS] as const,\n  });\n}\n\n/**\n * Encodes the parameters for the \"balanceOf\" function.\n * @param options - The options for the balanceOf function.\n * @returns The encoded ABI parameters.\n * @extension ERC721\n * @example\n * ```ts\n * import { encodeBalanceOfParams } from \"thirdweb/extensions/erc721\";\n * const result = encodeBalanceOfParams({\n *  owner: ...,\n * });\n * ```\n */\nexport function encodeBalanceOfParams(options: BalanceOfParams) {\n  return encodeAbiParameters(FN_INPUTS, [options.owner]);\n}\n\n/**\n * Encodes the \"balanceOf\" function into a Hex string with its parameters.\n * @param options - The options for the balanceOf function.\n * @returns The encoded hexadecimal string.\n * @extension ERC721\n * @example\n * ```ts\n * import { encodeBalanceOf } from \"thirdweb/extensions/erc721\";\n * const result = encodeBalanceOf({\n *  owner: ...,\n * });\n * ```\n */\nexport function encodeBalanceOf(options: BalanceOfParams) {\n  // we do a \"manual\" concat here to avoid the overhead of the \"concatHex\" function\n  // we can do this because we know the specific formats of the values\n  return (FN_SELECTOR +\n    encodeBalanceOfParams(options).slice(\n      2,\n    )) as `${typeof FN_SELECTOR}${string}`;\n}\n\n/**\n * Decodes the result of the balanceOf function call.\n * @param result - The hexadecimal result to decode.\n * @returns The decoded result as per the FN_OUTPUTS definition.\n * @extension ERC721\n * @example\n * ```ts\n * import { decodeBalanceOfResult } from \"thirdweb/extensions/erc721\";\n * const result = decodeBalanceOfResultResult(\"...\");\n * ```\n */\nexport function decodeBalanceOfResult(result: Hex) {\n  return decodeAbiParameters(FN_OUTPUTS, result)[0];\n}\n\n/**\n * Calls the \"balanceOf\" function on the contract.\n * @param options - The options for the balanceOf function.\n * @returns The parsed result of the function call.\n * @extension ERC721\n * @example\n * ```ts\n * import { balanceOf } from \"thirdweb/extensions/erc721\";\n *\n * const result = await balanceOf({\n *  contract,\n *  owner: ...,\n * });\n *\n * ```\n */\nexport async function balanceOf(\n  options: BaseTransactionOptions<BalanceOfParams>,\n) {\n  return readContract({\n    contract: options.contract,\n    method: [FN_SELECTOR, FN_INPUTS, FN_OUTPUTS] as const,\n    params: [options.owner],\n  });\n}\n", "import type { AbiParameterToPrimitiveType } from \"abitype\";\nimport { decodeAbiParameters } from \"viem\";\nimport { readContract } from \"../../../../../transaction/read-contract.js\";\nimport type { BaseTransactionOptions } from \"../../../../../transaction/types.js\";\nimport { encodeAbiParameters } from \"../../../../../utils/abi/encodeAbiParameters.js\";\nimport { detectMethod } from \"../../../../../utils/bytecode/detectExtension.js\";\nimport type { Hex } from \"../../../../../utils/encoding/hex.js\";\n\n/**\n * Represents the parameters for the \"tokensOfOwner\" function.\n */\nexport type TokensOfOwnerParams = {\n  owner: AbiParameterToPrimitiveType<{ type: \"address\"; name: \"owner\" }>;\n};\n\nexport const FN_SELECTOR = \"0x8462151c\" as const;\nconst FN_INPUTS = [\n  {\n    name: \"owner\",\n    type: \"address\",\n  },\n] as const;\nconst FN_OUTPUTS = [\n  {\n    type: \"uint256[]\",\n  },\n] as const;\n\n/**\n * Checks if the `tokensOfOwner` method is supported by the given contract.\n * @param availableSelectors An array of 4byte function selectors of the contract. You can get this in various ways, such as using \"whatsabi\" or if you have the ABI of the contract available you can use it to generate the selectors.\n * @returns A boolean indicating if the `tokensOfOwner` method is supported.\n * @extension ERC721\n * @example\n * ```ts\n * import { isTokensOfOwnerSupported } from \"thirdweb/extensions/erc721\";\n * const supported = isTokensOfOwnerSupported([\"0x...\"]);\n * ```\n */\nexport function isTokensOfOwnerSupported(availableSelectors: string[]) {\n  return detectMethod({\n    availableSelectors,\n    method: [FN_SELECTOR, FN_INPUTS, FN_OUTPUTS] as const,\n  });\n}\n\n/**\n * Encodes the parameters for the \"tokensOfOwner\" function.\n * @param options - The options for the tokensOfOwner function.\n * @returns The encoded ABI parameters.\n * @extension ERC721\n * @example\n * ```ts\n * import { encodeTokensOfOwnerParams } from \"thirdweb/extensions/erc721\";\n * const result = encodeTokensOfOwnerParams({\n *  owner: ...,\n * });\n * ```\n */\nexport function encodeTokensOfOwnerParams(options: TokensOfOwnerParams) {\n  return encodeAbiParameters(FN_INPUTS, [options.owner]);\n}\n\n/**\n * Encodes the \"tokensOfOwner\" function into a Hex string with its parameters.\n * @param options - The options for the tokensOfOwner function.\n * @returns The encoded hexadecimal string.\n * @extension ERC721\n * @example\n * ```ts\n * import { encodeTokensOfOwner } from \"thirdweb/extensions/erc721\";\n * const result = encodeTokensOfOwner({\n *  owner: ...,\n * });\n * ```\n */\nexport function encodeTokensOfOwner(options: TokensOfOwnerParams) {\n  // we do a \"manual\" concat here to avoid the overhead of the \"concatHex\" function\n  // we can do this because we know the specific formats of the values\n  return (FN_SELECTOR +\n    encodeTokensOfOwnerParams(options).slice(\n      2,\n    )) as `${typeof FN_SELECTOR}${string}`;\n}\n\n/**\n * Decodes the result of the tokensOfOwner function call.\n * @param result - The hexadecimal result to decode.\n * @returns The decoded result as per the FN_OUTPUTS definition.\n * @extension ERC721\n * @example\n * ```ts\n * import { decodeTokensOfOwnerResult } from \"thirdweb/extensions/erc721\";\n * const result = decodeTokensOfOwnerResultResult(\"...\");\n * ```\n */\nexport function decodeTokensOfOwnerResult(result: Hex) {\n  return decodeAbiParameters(FN_OUTPUTS, result)[0];\n}\n\n/**\n * Calls the \"tokensOfOwner\" function on the contract.\n * @param options - The options for the tokensOfOwner function.\n * @returns The parsed result of the function call.\n * @extension ERC721\n * @example\n * ```ts\n * import { tokensOfOwner } from \"thirdweb/extensions/erc721\";\n *\n * const result = await tokensOfOwner({\n *  contract,\n *  owner: ...,\n * });\n *\n * ```\n */\nexport async function tokensOfOwner(\n  options: BaseTransactionOptions<TokensOfOwnerParams>,\n) {\n  return readContract({\n    contract: options.contract,\n    method: [FN_SELECTOR, FN_INPUTS, FN_OUTPUTS] as const,\n    params: [options.owner],\n  });\n}\n", "import type { AbiParameterToPrimitiveType } from \"abitype\";\nimport { decodeAbiParameters } from \"viem\";\nimport { readContract } from \"../../../../../transaction/read-contract.js\";\nimport type { BaseTransactionOptions } from \"../../../../../transaction/types.js\";\nimport { encodeAbiParameters } from \"../../../../../utils/abi/encodeAbiParameters.js\";\nimport { detectMethod } from \"../../../../../utils/bytecode/detectExtension.js\";\nimport type { Hex } from \"../../../../../utils/encoding/hex.js\";\n\n/**\n * Represents the parameters for the \"tokenOfOwnerByIndex\" function.\n */\nexport type TokenOfOwnerByIndexParams = {\n  owner: AbiParameterToPrimitiveType<{ type: \"address\"; name: \"_owner\" }>;\n  index: AbiParameterToPrimitiveType<{ type: \"uint256\"; name: \"_index\" }>;\n};\n\nexport const FN_SELECTOR = \"0x2f745c59\" as const;\nconst FN_INPUTS = [\n  {\n    name: \"_owner\",\n    type: \"address\",\n  },\n  {\n    name: \"_index\",\n    type: \"uint256\",\n  },\n] as const;\nconst FN_OUTPUTS = [\n  {\n    type: \"uint256\",\n  },\n] as const;\n\n/**\n * Checks if the `tokenOfOwnerByIndex` method is supported by the given contract.\n * @param availableSelectors An array of 4byte function selectors of the contract. You can get this in various ways, such as using \"whatsabi\" or if you have the ABI of the contract available you can use it to generate the selectors.\n * @returns A boolean indicating if the `tokenOfOwnerByIndex` method is supported.\n * @extension ERC721\n * @example\n * ```ts\n * import { isTokenOfOwnerByIndexSupported } from \"thirdweb/extensions/erc721\";\n * const supported = isTokenOfOwnerByIndexSupported([\"0x...\"]);\n * ```\n */\nexport function isTokenOfOwnerByIndexSupported(availableSelectors: string[]) {\n  return detectMethod({\n    availableSelectors,\n    method: [FN_SELECTOR, FN_INPUTS, FN_OUTPUTS] as const,\n  });\n}\n\n/**\n * Encodes the parameters for the \"tokenOfOwnerByIndex\" function.\n * @param options - The options for the tokenOfOwnerByIndex function.\n * @returns The encoded ABI parameters.\n * @extension ERC721\n * @example\n * ```ts\n * import { encodeTokenOfOwnerByIndexParams } from \"thirdweb/extensions/erc721\";\n * const result = encodeTokenOfOwnerByIndexParams({\n *  owner: ...,\n *  index: ...,\n * });\n * ```\n */\nexport function encodeTokenOfOwnerByIndexParams(\n  options: TokenOfOwnerByIndexParams,\n) {\n  return encodeAbiParameters(FN_INPUTS, [options.owner, options.index]);\n}\n\n/**\n * Encodes the \"tokenOfOwnerByIndex\" function into a Hex string with its parameters.\n * @param options - The options for the tokenOfOwnerByIndex function.\n * @returns The encoded hexadecimal string.\n * @extension ERC721\n * @example\n * ```ts\n * import { encodeTokenOfOwnerByIndex } from \"thirdweb/extensions/erc721\";\n * const result = encodeTokenOfOwnerByIndex({\n *  owner: ...,\n *  index: ...,\n * });\n * ```\n */\nexport function encodeTokenOfOwnerByIndex(options: TokenOfOwnerByIndexParams) {\n  // we do a \"manual\" concat here to avoid the overhead of the \"concatHex\" function\n  // we can do this because we know the specific formats of the values\n  return (FN_SELECTOR +\n    encodeTokenOfOwnerByIndexParams(options).slice(\n      2,\n    )) as `${typeof FN_SELECTOR}${string}`;\n}\n\n/**\n * Decodes the result of the tokenOfOwnerByIndex function call.\n * @param result - The hexadecimal result to decode.\n * @returns The decoded result as per the FN_OUTPUTS definition.\n * @extension ERC721\n * @example\n * ```ts\n * import { decodeTokenOfOwnerByIndexResult } from \"thirdweb/extensions/erc721\";\n * const result = decodeTokenOfOwnerByIndexResultResult(\"...\");\n * ```\n */\nexport function decodeTokenOfOwnerByIndexResult(result: Hex) {\n  return decodeAbiParameters(FN_OUTPUTS, result)[0];\n}\n\n/**\n * Calls the \"tokenOfOwnerByIndex\" function on the contract.\n * @param options - The options for the tokenOfOwnerByIndex function.\n * @returns The parsed result of the function call.\n * @extension ERC721\n * @example\n * ```ts\n * import { tokenOfOwnerByIndex } from \"thirdweb/extensions/erc721\";\n *\n * const result = await tokenOfOwnerByIndex({\n *  contract,\n *  owner: ...,\n *  index: ...,\n * });\n *\n * ```\n */\nexport async function tokenOfOwnerByIndex(\n  options: BaseTransactionOptions<TokenOfOwnerByIndexParams>,\n) {\n  return readContract({\n    contract: options.contract,\n    method: [FN_SELECTOR, FN_INPUTS, FN_OUTPUTS] as const,\n    params: [options.owner, options.index],\n  });\n}\n", "import type { BaseTransactionOptions } from \"../../../transaction/types.js\";\nimport {\n  type BalanceOfParams,\n  balanceOf,\n} from \"../__generated__/IERC721A/read/balanceOf.js\";\nimport { tokensOfOwner } from \"../__generated__/IERC721AQueryable/read/tokensOfOwner.js\";\nimport { tokenOfOwnerByIndex } from \"../__generated__/IERC721Enumerable/read/tokenOfOwnerByIndex.js\";\n\n/**\n * @extension ERC721\n */\nexport type GetOwnedTokenIdsParams = BalanceOfParams;\n\n/**\n * Retrieves the token IDs owned by a specific address.\n * @param options - The options for retrieving the owned token IDs.\n * @returns A promise that resolves to an array of bigint representing the owned token IDs.\n * @extension ERC721\n * @example\n * ```ts\n * import { getOwnedTokenIds } from \"thirdweb/extensions/erc721\";\n *\n * const ownedTokenIds = await getOwnedTokenIds({\n *  contract,\n *  owner: \"0x1234...\",\n * });\n * ```\n */\nexport async function getOwnedTokenIds(\n  options: BaseTransactionOptions<GetOwnedTokenIdsParams>,\n): Promise<bigint[]> {\n  // try both paths, we take whichever one resolves first\n  const result = await Promise.any([\n    // get all the tokens owned by the owner\n    tokensOfOwner({ ...options }) as Promise<bigint[]>,\n    // get the balance of the owner and then fetch each token ID\n    // this is the \"fallback\" path really\n    (async () => {\n      const balanceOfResult = await balanceOf(options);\n      const promises: ReturnType<typeof tokenOfOwnerByIndex>[] = [];\n\n      for (let i = 0n; i < balanceOfResult; i++) {\n        promises.push(tokenOfOwnerByIndex({ ...options, index: i }));\n      }\n\n      return Promise.all(promises);\n    })(),\n  ]).catch(() => null);\n\n  if (result) {\n    return result;\n  }\n\n  throw new Error(\n    `The contract at ${options.contract.address} on chain ${options.contract.chain.id} does not support the tokenOfOwnerByIndex or tokensOfOwner interface`,\n  );\n}\n", "import { getOwnedNFTs as getInsightNFTs } from \"../../../insight/index.js\";\nimport type { BaseTransactionOptions } from \"../../../transaction/types.js\";\nimport type { NFT } from \"../../../utils/nft/parseNft.js\";\nimport { getNFT } from \"./getNFT.js\";\nimport {\n  type GetOwnedTokenIdsParams,\n  getOwnedTokenIds,\n} from \"./getOwnedTokenIds.js\";\n\n/**\n * @extension ERC721\n */\nexport type GetOwnedNFTsParams = GetOwnedTokenIdsParams & {\n  useIndexer?: boolean;\n};\n\n/**\n * Retrieves the owned NFTs for a given owner.\n * This extension only works with ERC721 contracts that support the [`tokenOfOwnerByIndex`](https://portal.thirdweb.com/references/typescript/v5/erc721/tokenOfOwnerByIndex) method\n * @param options - The options for retrieving the owned NFTs.\n * @returns A promise that resolves to an array of NFTs owned by the specified owner.\n * @extension ERC721\n * @example\n * ```ts\n * import { getOwnedNFTs } from \"thirdweb/extensions/erc721\";\n *\n * const ownedNFTs = await getOwnedNFTs({\n *  contract,\n *  owner: \"0x1234...\",\n * });\n * ```\n */\nexport async function getOwnedNFTs(\n  options: BaseTransactionOptions<GetOwnedNFTsParams>,\n): Promise<NFT[]> {\n  const { useIndexer = true } = options;\n  if (useIndexer) {\n    try {\n      return await getOwnedNFTsFromInsight(options);\n    } catch {\n      return await getOwnedNFTsFromRPC(options);\n    }\n  }\n  return await getOwnedNFTsFromRPC(options);\n}\n\nasync function getOwnedNFTsFromRPC(\n  options: BaseTransactionOptions<GetOwnedNFTsParams>,\n): Promise<NFT[]> {\n  const tokenIds = await getOwnedTokenIds(options);\n\n  return Promise.all(\n    tokenIds.map((tokenId) =>\n      getNFT({\n        contract: options.contract,\n        tokenId,\n        useIndexer: false,\n      }).then((nft) => ({\n        ...nft,\n        // add the owner to the NFT since we know it\n        owner: options.owner,\n      })),\n    ),\n  );\n}\n\nasync function getOwnedNFTsFromInsight(\n  options: BaseTransactionOptions<GetOwnedNFTsParams>,\n): Promise<NFT[]> {\n  const limit = 50;\n  const nfts: NFT[] = [];\n  let page = 0;\n  let hasMore = true;\n\n  // TODO (insight): add support for contract address filters\n  while (hasMore) {\n    const pageResults = await getInsightNFTs({\n      chains: [options.contract.chain],\n      client: options.contract.client,\n      ownerAddress: options.owner,\n      contractAddresses: [options.contract.address],\n      queryOptions: {\n        limit,\n        page,\n      },\n    });\n\n    nfts.push(...pageResults);\n\n    // If we got fewer results than the limit, we've reached the end\n    if (pageResults.length < limit) {\n      hasMore = false;\n    } else {\n      page++;\n    }\n  }\n\n  const results = nfts;\n\n  return results\n    .filter(\n      (n) =>\n        n.tokenAddress.toLowerCase() === options.contract.address.toLowerCase(),\n    )\n    .map((result) => ({\n      ...result,\n      owner: options.owner,\n    }));\n}\n"],
  "mappings": "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",
  "names": ["FN_SELECTOR", "FN_INPUTS", "FN_OUTPUTS", "FN_SELECTOR", "FN_INPUTS", "FN_OUTPUTS", "FN_SELECTOR", "FN_INPUTS", "FN_OUTPUTS", "FN_SELECTOR", "FN_INPUTS", "FN_OUTPUTS", "getOwnedNFTs"]
}

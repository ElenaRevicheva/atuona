import {
  sendAndConfirmTransaction
} from "./chunk-R2DSX65K.js";
import {
  eth_getTransactionReceipt
} from "./chunk-GWGIUX4W.js";
import "./chunk-QWTK625L.js";
import {
  sendBatchTransaction
} from "./chunk-YELJORP3.js";
import "./chunk-XS7FEBDW.js";
import "./chunk-VONE2WQV.js";
import "./chunk-2BVO2OWV.js";
import "./chunk-OIIGC4IN.js";
import "./chunk-MKB46BXW.js";
import "./chunk-2RIDIBOQ.js";
import "./chunk-WZWH6DQ2.js";
import "./chunk-QP4NW4MI.js";
import "./chunk-7OH7LVST.js";
import "./chunk-L4NN5UUQ.js";
import "./chunk-HAADYJEF.js";
import "./chunk-ALXM2V2D.js";
import "./chunk-JTQFPYF6.js";
import {
  randomBytesHex
} from "./chunk-EAI6ZE6R.js";
import "./chunk-SJUTDOTM.js";
import "./chunk-7ZAXHZVK.js";
import "./chunk-2OMZKD5Y.js";
import "./chunk-UG6X6BL6.js";
import "./chunk-4HC36SBT.js";
import "./chunk-HXWRQBIO.js";
import "./chunk-FLUAB4EX.js";
import {
  getRpcClient
} from "./chunk-B5MBRYI6.js";
import "./chunk-KWGI5LSL.js";
import "./chunk-6JZ5SMSC.js";
import "./chunk-AMOBGZPQ.js";
import "./chunk-Q7YW2IAU.js";
import "./chunk-XEGDYWOA.js";
import "./chunk-2CIJO3V3.js";
import "./chunk-SPUJ3V7I.js";
import "./chunk-G24WGTAU.js";
import "./chunk-3HQSRVBD.js";
import "./chunk-3OXDSLPJ.js";
import {
  LruMap
} from "./chunk-PPP72TBL.js";
import "./chunk-HARK4W7T.js";
import "./chunk-5JRVV4XU.js";

// node_modules/thirdweb/dist/esm/wallets/in-app/core/eip5792/in-app-wallet-calls.js
var bundlesToTransactions = new LruMap(1e3);
async function inAppWalletSendCalls(args) {
  const { account, calls } = args;
  const hashes = [];
  const id = randomBytesHex(65);
  bundlesToTransactions.set(id, hashes);
  if (account.sendBatchTransaction) {
    const receipt = await sendBatchTransaction({
      account,
      transactions: calls
    });
    hashes.push(receipt.transactionHash);
    bundlesToTransactions.set(id, hashes);
  } else {
    for (const tx of calls) {
      const receipt = await sendAndConfirmTransaction({
        account,
        transaction: tx
      });
      hashes.push(receipt.transactionHash);
      bundlesToTransactions.set(id, hashes);
    }
  }
  return id;
}
async function inAppWalletGetCallsStatus(args) {
  const { chain, client, id } = args;
  const bundle = bundlesToTransactions.get(id);
  if (!bundle) {
    throw new Error("Failed to get calls status, unknown bundle id");
  }
  const request = getRpcClient({ chain, client });
  let status = "success";
  const receipts = await Promise.all(bundle.map((hash) => eth_getTransactionReceipt(request, { hash }).then((receipt) => ({
    blockHash: receipt.blockHash,
    blockNumber: receipt.blockNumber,
    gasUsed: receipt.gasUsed,
    logs: receipt.logs.map((l) => ({
      address: l.address,
      data: l.data,
      topics: l.topics
    })),
    status: receipt.status,
    transactionHash: receipt.transactionHash
  })).catch(() => {
    status = "pending";
    return null;
  })));
  return {
    atomic: false,
    chainId: chain.id,
    id,
    receipts: receipts.filter((r) => r !== null),
    status,
    statusCode: 200,
    version: "2.0.0"
  };
}
export {
  inAppWalletGetCallsStatus,
  inAppWalletSendCalls
};
//# sourceMappingURL=in-app-wallet-calls-QEYXIKGY.js.map

{
  "version": 3,
  "sources": ["../../thirdweb/src/transaction/serialize-transaction.ts"],
  "sourcesContent": ["import * as ox__Hex from \"ox/Hex\";\nimport * as ox__Signature from \"ox/Signature\";\nimport * as ox__TransactionEnvelopeEip1559 from \"ox/TransactionEnvelopeEip1559\";\nimport * as ox__TransactionEnvelopeEip2930 from \"ox/TransactionEnvelopeEip2930\";\nimport * as ox__TransactionEnvelopeEip7702 from \"ox/TransactionEnvelopeEip7702\";\nimport * as ox__TransactionEnvelopeLegacy from \"ox/TransactionEnvelopeLegacy\";\nimport type { Hex } from \"../utils/encoding/hex.js\";\n\nexport type SerializableTransaction = {\n  type?: string | undefined;\n  r?: Hex | bigint;\n  s?: Hex | bigint;\n  v?: bigint | number;\n  yParity?: bigint | number;\n  accessList?:\n    | ox__TransactionEnvelopeEip2930.TransactionEnvelopeEip2930[\"accessList\"]\n    | undefined;\n  chainId?: number | undefined;\n  gasPrice?: bigint | undefined;\n  maxFeePerGas?: bigint | undefined;\n  maxPriorityFeePerGas?: bigint | undefined;\n  data?: Hex | undefined;\n  to?: string | null | undefined; // Must allow null for backwards compatibility\n  nonce?: number | bigint | undefined;\n  value?: bigint | undefined;\n  gas?: bigint | undefined;\n  gasLimit?: bigint | undefined;\n  authorizationList?:\n    | ox__TransactionEnvelopeEip7702.TransactionEnvelopeEip7702[\"authorizationList\"]\n    | undefined;\n};\n\nexport type SerializeTransactionOptions = {\n  transaction: SerializableTransaction;\n  signature?:\n    | ox__Signature.Signature<true, Hex>\n    | ox__Signature.Legacy<Hex, bigint>\n    | undefined;\n};\n\n/**\n * Serializes a legacy, EIP-1559, EIP-2930, EIP-4844, or EIP-7702 transaction object.\n *\n * @param options - The serialization options.\n * @param options.transaction - The transaction object to be serialized.\n * @param [options.signature] - The signature to include with the transaction, if necessary.\n * @returns The serialized transaction.\n * @throws An error if the provided transaction object is invalid.\n * @transaction\n * @example\n * ```ts\n * import { serializeTransaction } from \"thirdweb\";\n *\n * const serializedTransaction = serializeTransaction({ transaction: {\n *    to: \"0x\",\n *    value: 0n,\n *  }\n * });\n * ```\n */\nexport function serializeTransaction(\n  options: SerializeTransactionOptions,\n): Hex {\n  const { transaction } = options;\n\n  const type = getTransactionEnvelopeType(transaction);\n\n  // This is to maintain compatibility with our old interface (including the signature in the transaction object)\n  const signature = (() => {\n    if (options.signature) {\n      if (\n        \"v\" in options.signature &&\n        typeof options.signature.v !== \"undefined\"\n      ) {\n        return ox__Signature.fromLegacy({\n          r: ox__Hex.toBigInt(options.signature.r),\n          s: ox__Hex.toBigInt(options.signature.s),\n          v: Number(options.signature.v),\n        });\n      }\n\n      return {\n        r: ox__Hex.toBigInt(options.signature.r),\n        s: ox__Hex.toBigInt(options.signature.s),\n        // We force the Signature type here because we filter for legacy type above\n        yParity: (options.signature as unknown as ox__Signature.Signature)\n          .yParity,\n      };\n    }\n    if (\n      typeof transaction.v === \"undefined\" &&\n      typeof transaction.yParity === \"undefined\"\n    ) {\n      return undefined;\n    }\n\n    if (transaction.r === undefined || transaction.s === undefined) {\n      throw new Error(\"Invalid signature provided with transaction\");\n    }\n\n    return {\n      r:\n        typeof transaction.r === \"bigint\"\n          ? transaction.r\n          : ox__Hex.toBigInt(transaction.r),\n      s:\n        typeof transaction.s === \"bigint\"\n          ? transaction.s\n          : ox__Hex.toBigInt(transaction.s),\n      yParity:\n        typeof transaction.v !== \"undefined\" &&\n        typeof transaction.yParity === \"undefined\"\n          ? ox__Signature.vToYParity(Number(transaction.v))\n          : Number(transaction.yParity),\n    };\n  })();\n\n  if (type === \"eip1559\") {\n    const typedTransaction =\n      transaction as ox__TransactionEnvelopeEip1559.TransactionEnvelopeEip1559;\n    ox__TransactionEnvelopeEip1559.assert(typedTransaction);\n\n    return ox__TransactionEnvelopeEip1559.serialize(typedTransaction, {\n      signature,\n    });\n  }\n\n  if (type === \"legacy\") {\n    const typedTransaction =\n      transaction as ox__TransactionEnvelopeLegacy.TransactionEnvelopeLegacy;\n    ox__TransactionEnvelopeLegacy.assert(typedTransaction);\n\n    return ox__TransactionEnvelopeLegacy.serialize(typedTransaction, {\n      signature,\n    });\n  }\n\n  if (type === \"eip2930\") {\n    const typedTransaction =\n      transaction as ox__TransactionEnvelopeEip2930.TransactionEnvelopeEip2930;\n    ox__TransactionEnvelopeEip2930.assert(typedTransaction);\n\n    return ox__TransactionEnvelopeEip2930.serialize(typedTransaction, {\n      signature,\n    });\n  }\n\n  if (type === \"eip7702\") {\n    const typedTransaction =\n      transaction as ox__TransactionEnvelopeEip7702.TransactionEnvelopeEip7702;\n    ox__TransactionEnvelopeEip7702.assert(typedTransaction);\n\n    return ox__TransactionEnvelopeEip7702.serialize(typedTransaction, {\n      signature,\n    });\n  }\n\n  throw new Error(\"Invalid transaction type\");\n}\n\n/**\n * @internal\n */\nfunction getTransactionEnvelopeType(\n  transactionEnvelope: SerializableTransaction,\n) {\n  if (typeof transactionEnvelope.type !== \"undefined\") {\n    return transactionEnvelope.type;\n  }\n\n  if (typeof transactionEnvelope.authorizationList !== \"undefined\") {\n    return \"eip7702\";\n  }\n\n  if (\n    typeof transactionEnvelope.maxFeePerGas !== \"undefined\" ||\n    typeof transactionEnvelope.maxPriorityFeePerGas !== \"undefined\"\n  ) {\n    return \"eip1559\";\n  }\n\n  if (typeof transactionEnvelope.gasPrice !== \"undefined\") {\n    if (typeof transactionEnvelope.accessList !== \"undefined\") {\n      return \"eip2930\";\n    }\n    return \"legacy\";\n  }\n\n  throw new Error(\"Invalid transaction type\");\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;AA4DM,SAAU,qBACd,SAAoC;AAEpC,QAAM,EAAE,YAAW,IAAK;AAExB,QAAM,OAAO,2BAA2B,WAAW;AAGnD,QAAM,aAAa,MAAK;AACtB,QAAI,QAAQ,WAAW;AACrB,UACE,OAAO,QAAQ,aACf,OAAO,QAAQ,UAAU,MAAM,aAC/B;AACA,eAAqB,WAAW;UAC9B,GAAW,SAAS,QAAQ,UAAU,CAAC;UACvC,GAAW,SAAS,QAAQ,UAAU,CAAC;UACvC,GAAG,OAAO,QAAQ,UAAU,CAAC;SAC9B;MACH;AAEA,aAAO;QACL,GAAW,SAAS,QAAQ,UAAU,CAAC;QACvC,GAAW,SAAS,QAAQ,UAAU,CAAC;;QAEvC,SAAU,QAAQ,UACf;;IAEP;AACA,QACE,OAAO,YAAY,MAAM,eACzB,OAAO,YAAY,YAAY,aAC/B;AACA,aAAO;IACT;AAEA,QAAI,YAAY,MAAM,UAAa,YAAY,MAAM,QAAW;AAC9D,YAAM,IAAI,MAAM,6CAA6C;IAC/D;AAEA,WAAO;MACL,GACE,OAAO,YAAY,MAAM,WACrB,YAAY,IACJ,SAAS,YAAY,CAAC;MACpC,GACE,OAAO,YAAY,MAAM,WACrB,YAAY,IACJ,SAAS,YAAY,CAAC;MACpC,SACE,OAAO,YAAY,MAAM,eACzB,OAAO,YAAY,YAAY,cACb,WAAW,OAAO,YAAY,CAAC,CAAC,IAC9C,OAAO,YAAY,OAAO;;EAEpC,GAAE;AAEF,MAAI,SAAS,WAAW;AACtB,UAAM,mBACJ;AACF,IAA+B,OAAO,gBAAgB;AAEtD,WAAsC,UAAU,kBAAkB;MAChE;KACD;EACH;AAEA,MAAI,SAAS,UAAU;AACrB,UAAM,mBACJ;AACF,IAA8BA,QAAO,gBAAgB;AAErD,WAAqCC,WAAU,kBAAkB;MAC/D;KACD;EACH;AAEA,MAAI,SAAS,WAAW;AACtB,UAAM,mBACJ;AACF,IAA+BD,QAAO,gBAAgB;AAEtD,WAAsCC,WAAU,kBAAkB;MAChE;KACD;EACH;AAEA,MAAI,SAAS,WAAW;AACtB,UAAM,mBACJ;AACF,IAA+BD,QAAO,gBAAgB;AAEtD,WAAsCC,WAAU,kBAAkB;MAChE;KACD;EACH;AAEA,QAAM,IAAI,MAAM,0BAA0B;AAC5C;AAKA,SAAS,2BACP,qBAA4C;AAE5C,MAAI,OAAO,oBAAoB,SAAS,aAAa;AACnD,WAAO,oBAAoB;EAC7B;AAEA,MAAI,OAAO,oBAAoB,sBAAsB,aAAa;AAChE,WAAO;EACT;AAEA,MACE,OAAO,oBAAoB,iBAAiB,eAC5C,OAAO,oBAAoB,yBAAyB,aACpD;AACA,WAAO;EACT;AAEA,MAAI,OAAO,oBAAoB,aAAa,aAAa;AACvD,QAAI,OAAO,oBAAoB,eAAe,aAAa;AACzD,aAAO;IACT;AACA,WAAO;EACT;AAEA,QAAM,IAAI,MAAM,0BAA0B;AAC5C;",
  "names": ["assert", "serialize"]
}

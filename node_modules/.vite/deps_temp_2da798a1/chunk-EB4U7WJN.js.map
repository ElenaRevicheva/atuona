{
  "version": 3,
  "sources": ["../../thirdweb/src/wallets/in-app/core/users/getUser.ts", "../../thirdweb/src/transaction/actions/sign-transaction.ts"],
  "sourcesContent": ["import type { ThirdwebClient } from \"../../../../client/client.js\";\nimport { getThirdwebBaseUrl } from \"../../../../utils/domains.js\";\nimport { getClientFetch } from \"../../../../utils/fetch.js\";\nimport type { OneOf, Prettify } from \"../../../../utils/type-utils.js\";\nimport type { Profile } from \"../authentication/types.js\";\nimport type { Ecosystem } from \"../wallet/types.js\";\n\nexport type GetUserResult = {\n  userId: string;\n  walletAddress: string;\n  smartAccountAddress?: string;\n  email?: string;\n  phone?: string;\n  createdAt: string;\n  profiles: Profile[];\n};\n\n/**\n * Gets user based on the provided query parameters.\n *  This function is only available on the server (a secret key is required in the client).\n *\n * @param options - The options for the get user function.\n * @param options.client - The Thirdweb client with a secret key included.\n * @param [options.walletAddress] - The wallet address generated by thirdweb to query by.\n * @param [options.email] - The email to query by.\n * @param [options.phone] - The phone number to query by.\n * @param [options.id] - The user ID to query by.\n * @param [options.externalWalletAddress] - The linked external wallet address to query by.\n *\n * @returns A user object or null if not found.\n *\n * @example\n * import { getUser } from \"thirdweb/wallets\";\n *\n * const user = await getUser({\n *   client,\n *   walletAddress: \"0x123...\",\n * });\n *\n * @wallet\n */\nexport async function getUser({\n  client,\n  walletAddress,\n  email,\n  phone,\n  id,\n  externalWalletAddress,\n  ecosystem,\n}: Prettify<\n  {\n    client: ThirdwebClient;\n    ecosystem?: Ecosystem;\n  } & OneOf<{\n    walletAddress?: string;\n    email?: string;\n    phone?: string;\n    id?: string;\n    externalWalletAddress?: string;\n  }>\n>): Promise<GetUserResult | null> {\n  if (!client.secretKey) {\n    throw new Error(\n      \"A secret key is required to query for users. If you're making this request from the server, please add a secret key to your client.\",\n    );\n  }\n\n  const url = new URL(\n    `${getThirdwebBaseUrl(\"inAppWallet\")}/api/2023-11-30/embedded-wallet/user-details`,\n  );\n\n  if (walletAddress) {\n    url.searchParams.set(\"queryBy\", \"walletAddress\");\n    url.searchParams.set(\"walletAddress\", walletAddress);\n  } else if (email) {\n    url.searchParams.set(\"queryBy\", \"email\");\n    url.searchParams.set(\"email\", email);\n  } else if (phone) {\n    url.searchParams.set(\"queryBy\", \"phone\");\n    url.searchParams.set(\"phone\", phone);\n  } else if (id) {\n    url.searchParams.set(\"queryBy\", \"id\");\n    url.searchParams.set(\"id\", id);\n  } else if (externalWalletAddress) {\n    url.searchParams.set(\"queryBy\", \"externalWalletAddress\");\n    url.searchParams.set(\"externalWalletAddress\", externalWalletAddress);\n  } else {\n    throw new Error(\n      \"Please provide a walletAddress, email, phone, id, or externalWalletAddress to query for users.\",\n    );\n  }\n\n  const clientFetch = getClientFetch(client, ecosystem);\n\n  const res = await clientFetch(url.toString());\n\n  if (!res.ok) {\n    const error = await res.text().catch(() => \"Unknown error\");\n    throw new Error(\n      `Failed to get profiles. ${res.status} ${res.statusText}: ${error}`,\n    );\n  }\n\n  const data = (await res.json()) as {\n    userId: string;\n    walletAddress: string;\n    smartAccountAddress?: string;\n    email?: string;\n    phone?: string;\n    createdAt: string;\n    linkedAccounts: Profile[];\n  }[];\n\n  return (\n    data.map((item) => ({\n      createdAt: item.createdAt,\n      email: item.email,\n      phone: item.phone,\n      profiles: item.linkedAccounts.map((profile) => {\n        return {\n          details: profile.details,\n          type: (profile.type as string) === \"siwe\" ? \"wallet\" : profile.type,\n        };\n      }),\n      smartAccountAddress: item.smartAccountAddress,\n      userId: item.userId,\n      walletAddress: item.walletAddress,\n    }))[0] || null\n  );\n}\n", "import * as ox__Hash from \"ox/Hash\";\nimport * as ox__Secp256k1 from \"ox/Secp256k1\";\nimport type { Hex } from \"../../utils/encoding/hex.js\";\nimport {\n  type SerializableTransaction,\n  serializeTransaction,\n} from \"../serialize-transaction.js\";\n\nexport type SignTransactionOptions = {\n  transaction: SerializableTransaction;\n  privateKey: Hex;\n  // TODO: Add optional custom serializer here\n};\n\n/**\n * Signs a transaction to be sent to a node.\n * @param options The options for signing.\n * @param options.transaction - The transaction object to sign\n * @param options.privateKey - The account private key\n * @returns The signed transaction as a hex string\n * @example\n * ```ts\n * import { signTransaction } from \"thirdweb\";\n * signTransaction({\n *   transaction: {\n *     ...\n *   },\n *   privateKey: \"0x...\",\n * });\n * ```\n * @transaction\n */\nexport function signTransaction({\n  transaction,\n  privateKey,\n}: SignTransactionOptions): Hex {\n  const serializedTransaction = serializeTransaction({ transaction });\n\n  const signature = ox__Secp256k1.sign({\n    payload: ox__Hash.keccak256(serializedTransaction),\n    privateKey: privateKey,\n  });\n  return serializeTransaction({\n    transaction: { ...transaction, ...signature },\n  });\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;AAyCA,eAAsB,QAAQ,EAC5B,QACA,eACA,OACA,OACA,IACA,uBACA,UAAS,GAYV;AACC,MAAI,CAAC,OAAO,WAAW;AACrB,UAAM,IAAI,MACR,qIAAqI;EAEzI;AAEA,QAAM,MAAM,IAAI,IACd,GAAG,mBAAmB,aAAa,CAAC,8CAA8C;AAGpF,MAAI,eAAe;AACjB,QAAI,aAAa,IAAI,WAAW,eAAe;AAC/C,QAAI,aAAa,IAAI,iBAAiB,aAAa;EACrD,WAAW,OAAO;AAChB,QAAI,aAAa,IAAI,WAAW,OAAO;AACvC,QAAI,aAAa,IAAI,SAAS,KAAK;EACrC,WAAW,OAAO;AAChB,QAAI,aAAa,IAAI,WAAW,OAAO;AACvC,QAAI,aAAa,IAAI,SAAS,KAAK;EACrC,WAAW,IAAI;AACb,QAAI,aAAa,IAAI,WAAW,IAAI;AACpC,QAAI,aAAa,IAAI,MAAM,EAAE;EAC/B,WAAW,uBAAuB;AAChC,QAAI,aAAa,IAAI,WAAW,uBAAuB;AACvD,QAAI,aAAa,IAAI,yBAAyB,qBAAqB;EACrE,OAAO;AACL,UAAM,IAAI,MACR,gGAAgG;EAEpG;AAEA,QAAM,cAAc,eAAe,QAAQ,SAAS;AAEpD,QAAM,MAAM,MAAM,YAAY,IAAI,SAAQ,CAAE;AAE5C,MAAI,CAAC,IAAI,IAAI;AACX,UAAM,QAAQ,MAAM,IAAI,KAAI,EAAG,MAAM,MAAM,eAAe;AAC1D,UAAM,IAAI,MACR,2BAA2B,IAAI,MAAM,IAAI,IAAI,UAAU,KAAK,KAAK,EAAE;EAEvE;AAEA,QAAM,OAAQ,MAAM,IAAI,KAAI;AAU5B,SACE,KAAK,IAAI,CAAC,UAAU;IAClB,WAAW,KAAK;IAChB,OAAO,KAAK;IACZ,OAAO,KAAK;IACZ,UAAU,KAAK,eAAe,IAAI,CAAC,YAAW;AAC5C,aAAO;QACL,SAAS,QAAQ;QACjB,MAAO,QAAQ,SAAoB,SAAS,WAAW,QAAQ;;IAEnE,CAAC;IACD,qBAAqB,KAAK;IAC1B,QAAQ,KAAK;IACb,eAAe,KAAK;IACpB,EAAE,CAAC,KAAK;AAEd;;;ACjGM,SAAU,gBAAgB,EAC9B,aACA,WAAU,GACa;AACvB,QAAM,wBAAwB,qBAAqB,EAAE,YAAW,CAAE;AAElE,QAAM,YAA0B,KAAK;IACnC,SAAkB,UAAU,qBAAqB;IACjD;GACD;AACD,SAAO,qBAAqB;IAC1B,aAAa,EAAE,GAAG,aAAa,GAAG,UAAS;GAC5C;AACH;",
  "names": []
}

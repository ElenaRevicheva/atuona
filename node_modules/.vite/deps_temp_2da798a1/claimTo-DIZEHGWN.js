import {
  isGetActiveClaimConditionSupported
} from "./chunk-FW4QQCTU.js";
import {
  decimals
} from "./chunk-7SCLKUC6.js";
import {
  isDecimalsSupported
} from "./chunk-LH2QZPDT.js";
import {
  getClaimParams
} from "./chunk-VQP4MYAT.js";
import {
  isContractURISupported
} from "./chunk-KMSGZM3G.js";
import "./chunk-A2QTQJTY.js";
import "./chunk-3PSI24KF.js";
import "./chunk-43F4DZXD.js";
import {
  once
} from "./chunk-NACC2RRT.js";
import {
  prepareContractCall
} from "./chunk-DAHYFYVF.js";
import "./chunk-FHM7BLOT.js";
import "./chunk-YCZ3YGMG.js";
import {
  detectMethod
} from "./chunk-DGWZEIL6.js";
import "./chunk-GYLVPM2U.js";
import "./chunk-Q7I3EUQG.js";
import "./chunk-WZWH6DQ2.js";
import "./chunk-QP4NW4MI.js";
import "./chunk-7OH7LVST.js";
import "./chunk-L4NN5UUQ.js";
import "./chunk-HAADYJEF.js";
import "./chunk-ALXM2V2D.js";
import "./chunk-JTQFPYF6.js";
import "./chunk-EAI6ZE6R.js";
import "./chunk-SJUTDOTM.js";
import "./chunk-7ZAXHZVK.js";
import "./chunk-2OMZKD5Y.js";
import "./chunk-UG6X6BL6.js";
import "./chunk-4HC36SBT.js";
import "./chunk-HXWRQBIO.js";
import "./chunk-FLUAB4EX.js";
import "./chunk-B5MBRYI6.js";
import "./chunk-KWGI5LSL.js";
import "./chunk-6JZ5SMSC.js";
import "./chunk-AMOBGZPQ.js";
import "./chunk-Q7YW2IAU.js";
import "./chunk-XEGDYWOA.js";
import "./chunk-2CIJO3V3.js";
import "./chunk-D2TAUU6E.js";
import "./chunk-SPUJ3V7I.js";
import "./chunk-G24WGTAU.js";
import "./chunk-3HQSRVBD.js";
import "./chunk-3OXDSLPJ.js";
import "./chunk-PPP72TBL.js";
import "./chunk-HARK4W7T.js";
import "./chunk-5JRVV4XU.js";

// node_modules/thirdweb/dist/esm/extensions/erc20/__generated__/IDropERC20/write/claim.js
var FN_SELECTOR = "0x84bb1e42";
var FN_INPUTS = [
  {
    name: "receiver",
    type: "address"
  },
  {
    name: "quantity",
    type: "uint256"
  },
  {
    name: "currency",
    type: "address"
  },
  {
    name: "pricePerToken",
    type: "uint256"
  },
  {
    components: [
      {
        name: "proof",
        type: "bytes32[]"
      },
      {
        name: "quantityLimitPerWallet",
        type: "uint256"
      },
      {
        name: "pricePerToken",
        type: "uint256"
      },
      {
        name: "currency",
        type: "address"
      }
    ],
    name: "allowlistProof",
    type: "tuple"
  },
  {
    name: "data",
    type: "bytes"
  }
];
var FN_OUTPUTS = [];
function isClaimSupported(availableSelectors) {
  return detectMethod({
    availableSelectors,
    method: [FN_SELECTOR, FN_INPUTS, FN_OUTPUTS]
  });
}
function claim(options) {
  const asyncOptions = once(async () => {
    return "asyncParams" in options ? await options.asyncParams() : options;
  });
  return prepareContractCall({
    accessList: async () => {
      var _a;
      return (_a = (await asyncOptions()).overrides) == null ? void 0 : _a.accessList;
    },
    authorizationList: async () => {
      var _a;
      return (_a = (await asyncOptions()).overrides) == null ? void 0 : _a.authorizationList;
    },
    contract: options.contract,
    erc20Value: async () => {
      var _a;
      return (_a = (await asyncOptions()).overrides) == null ? void 0 : _a.erc20Value;
    },
    extraGas: async () => {
      var _a;
      return (_a = (await asyncOptions()).overrides) == null ? void 0 : _a.extraGas;
    },
    gas: async () => {
      var _a;
      return (_a = (await asyncOptions()).overrides) == null ? void 0 : _a.gas;
    },
    gasPrice: async () => {
      var _a;
      return (_a = (await asyncOptions()).overrides) == null ? void 0 : _a.gasPrice;
    },
    maxFeePerGas: async () => {
      var _a;
      return (_a = (await asyncOptions()).overrides) == null ? void 0 : _a.maxFeePerGas;
    },
    maxPriorityFeePerGas: async () => {
      var _a;
      return (_a = (await asyncOptions()).overrides) == null ? void 0 : _a.maxPriorityFeePerGas;
    },
    method: [FN_SELECTOR, FN_INPUTS, FN_OUTPUTS],
    nonce: async () => {
      var _a;
      return (_a = (await asyncOptions()).overrides) == null ? void 0 : _a.nonce;
    },
    params: async () => {
      const resolvedOptions = await asyncOptions();
      return [
        resolvedOptions.receiver,
        resolvedOptions.quantity,
        resolvedOptions.currency,
        resolvedOptions.pricePerToken,
        resolvedOptions.allowlistProof,
        resolvedOptions.data
      ];
    },
    value: async () => {
      var _a;
      return (_a = (await asyncOptions()).overrides) == null ? void 0 : _a.value;
    }
  });
}

// node_modules/thirdweb/dist/esm/extensions/erc20/drops/write/claimTo.js
function claimTo(options) {
  return claim({
    asyncParams: async () => {
      const quantity = await (async () => {
        if ("quantityInWei" in options) {
          return options.quantityInWei;
        }
        const { toUnits } = await import("./units-QWX5TU7A.js");
        return toUnits(options.quantity, await decimals({ contract: options.contract }));
      })();
      return getClaimParams({
        contract: options.contract,
        from: options.from,
        quantity,
        singlePhaseDrop: options.singlePhaseDrop,
        to: options.to,
        tokenDecimals: await decimals({ contract: options.contract }),
        type: "erc20"
      });
    },
    contract: options.contract
  });
}
function isClaimToSupported(availableSelectors) {
  return [
    // has to support the claim method
    isClaimSupported(availableSelectors),
    // has to support the getActiveClaimCondition method
    isGetActiveClaimConditionSupported(availableSelectors),
    // has to support the decimals method
    isDecimalsSupported(availableSelectors),
    // requires contractMetadata for claimer proofs
    isContractURISupported(availableSelectors)
  ].every(Boolean);
}
export {
  claimTo,
  isClaimToSupported
};
//# sourceMappingURL=claimTo-DIZEHGWN.js.map

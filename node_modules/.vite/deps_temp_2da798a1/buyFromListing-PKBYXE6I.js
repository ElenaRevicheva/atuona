import {
  getListing,
  isGetListingSupported,
  isListingValid
} from "./chunk-46Y3IVVR.js";
import "./chunk-QYBETXFO.js";
import "./chunk-LH2QZPDT.js";
import "./chunk-RUR3YVVI.js";
import "./chunk-A2QTQJTY.js";
import {
  once
} from "./chunk-NACC2RRT.js";
import {
  prepareContractCall
} from "./chunk-DAHYFYVF.js";
import "./chunk-FHM7BLOT.js";
import {
  isNativeTokenAddress
} from "./chunk-YCZ3YGMG.js";
import {
  detectMethod
} from "./chunk-DGWZEIL6.js";
import "./chunk-GYLVPM2U.js";
import "./chunk-Q7I3EUQG.js";
import "./chunk-WZWH6DQ2.js";
import "./chunk-QP4NW4MI.js";
import "./chunk-7OH7LVST.js";
import "./chunk-L4NN5UUQ.js";
import "./chunk-HAADYJEF.js";
import "./chunk-ALXM2V2D.js";
import "./chunk-JTQFPYF6.js";
import "./chunk-EAI6ZE6R.js";
import "./chunk-SJUTDOTM.js";
import "./chunk-7ZAXHZVK.js";
import "./chunk-2OMZKD5Y.js";
import "./chunk-UG6X6BL6.js";
import "./chunk-4HC36SBT.js";
import "./chunk-HXWRQBIO.js";
import "./chunk-FLUAB4EX.js";
import "./chunk-B5MBRYI6.js";
import "./chunk-KWGI5LSL.js";
import "./chunk-6JZ5SMSC.js";
import "./chunk-AMOBGZPQ.js";
import "./chunk-Q7YW2IAU.js";
import "./chunk-XEGDYWOA.js";
import "./chunk-2CIJO3V3.js";
import "./chunk-D2TAUU6E.js";
import "./chunk-SPUJ3V7I.js";
import "./chunk-G24WGTAU.js";
import "./chunk-3HQSRVBD.js";
import "./chunk-3OXDSLPJ.js";
import "./chunk-PPP72TBL.js";
import "./chunk-HARK4W7T.js";
import "./chunk-5JRVV4XU.js";

// node_modules/thirdweb/dist/esm/extensions/marketplace/__generated__/IDirectListings/write/buyFromListing.js
var FN_SELECTOR = "0x704232dc";
var FN_INPUTS = [
  {
    name: "_listingId",
    type: "uint256"
  },
  {
    name: "_buyFor",
    type: "address"
  },
  {
    name: "_quantity",
    type: "uint256"
  },
  {
    name: "_currency",
    type: "address"
  },
  {
    name: "_expectedTotalPrice",
    type: "uint256"
  }
];
var FN_OUTPUTS = [];
function isBuyFromListingSupported(availableSelectors) {
  return detectMethod({
    availableSelectors,
    method: [FN_SELECTOR, FN_INPUTS, FN_OUTPUTS]
  });
}
function buyFromListing(options) {
  const asyncOptions = once(async () => {
    return "asyncParams" in options ? await options.asyncParams() : options;
  });
  return prepareContractCall({
    accessList: async () => {
      var _a;
      return (_a = (await asyncOptions()).overrides) == null ? void 0 : _a.accessList;
    },
    authorizationList: async () => {
      var _a;
      return (_a = (await asyncOptions()).overrides) == null ? void 0 : _a.authorizationList;
    },
    contract: options.contract,
    erc20Value: async () => {
      var _a;
      return (_a = (await asyncOptions()).overrides) == null ? void 0 : _a.erc20Value;
    },
    extraGas: async () => {
      var _a;
      return (_a = (await asyncOptions()).overrides) == null ? void 0 : _a.extraGas;
    },
    gas: async () => {
      var _a;
      return (_a = (await asyncOptions()).overrides) == null ? void 0 : _a.gas;
    },
    gasPrice: async () => {
      var _a;
      return (_a = (await asyncOptions()).overrides) == null ? void 0 : _a.gasPrice;
    },
    maxFeePerGas: async () => {
      var _a;
      return (_a = (await asyncOptions()).overrides) == null ? void 0 : _a.maxFeePerGas;
    },
    maxPriorityFeePerGas: async () => {
      var _a;
      return (_a = (await asyncOptions()).overrides) == null ? void 0 : _a.maxPriorityFeePerGas;
    },
    method: [FN_SELECTOR, FN_INPUTS, FN_OUTPUTS],
    nonce: async () => {
      var _a;
      return (_a = (await asyncOptions()).overrides) == null ? void 0 : _a.nonce;
    },
    params: async () => {
      const resolvedOptions = await asyncOptions();
      return [
        resolvedOptions.listingId,
        resolvedOptions.buyFor,
        resolvedOptions.quantity,
        resolvedOptions.currency,
        resolvedOptions.expectedTotalPrice
      ];
    },
    value: async () => {
      var _a;
      return (_a = (await asyncOptions()).overrides) == null ? void 0 : _a.value;
    }
  });
}

// node_modules/thirdweb/dist/esm/extensions/marketplace/direct-listings/write/buyFromListing.js
function buyFromListing2(options) {
  return buyFromListing({
    asyncParams: async () => {
      const listing = await getListing({
        contract: options.contract,
        listingId: options.listingId
      });
      const listingValidity = await isListingValid({
        contract: options.contract,
        listing,
        quantity: options.quantity
      });
      if (!listingValidity.valid) {
        throw new Error(listingValidity.reason);
      }
      return {
        buyFor: options.recipient,
        currency: listing.currencyContractAddress,
        expectedTotalPrice: listing.pricePerToken * options.quantity,
        listingId: options.listingId,
        overrides: {
          erc20Value: isNativeTokenAddress(listing.currencyContractAddress) ? void 0 : {
            amountWei: listing.pricePerToken * options.quantity,
            tokenAddress: listing.currencyContractAddress
          },
          extraGas: 50000n,
          // add extra gas to account for router call
          value: isNativeTokenAddress(listing.currencyContractAddress) ? listing.pricePerToken * options.quantity : 0n
        },
        quantity: options.quantity
      };
    },
    contract: options.contract
  });
}
function isBuyFromListingSupported2(availableSelectors) {
  return isBuyFromListingSupported(availableSelectors) && isGetListingSupported(availableSelectors);
}
export {
  buyFromListing2 as buyFromListing,
  isBuyFromListingSupported2 as isBuyFromListingSupported
};
//# sourceMappingURL=buyFromListing-PKBYXE6I.js.map

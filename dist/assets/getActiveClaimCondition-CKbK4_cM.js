import{a6 as a}from"./main-C_x9syUL.js";const y="0xe9703d25",p=[{name:"tokenId",type:"uint256"}],C=[{name:"startTimestamp",type:"uint256"},{name:"maxClaimableSupply",type:"uint256"},{name:"supplyClaimed",type:"uint256"},{name:"quantityLimitPerWallet",type:"uint256"},{name:"merkleRoot",type:"bytes32"},{name:"pricePerToken",type:"uint256"},{name:"currency",type:"address"},{name:"metadata",type:"string"}];async function T(t){return a({contract:t.contract,method:[y,p,C],params:[t.tokenId]})}const I="0x5ab063e8",P=[{name:"_tokenId",type:"uint256"}],k=[{type:"uint256"}];async function S(t){return a({contract:t.contract,method:[I,P,k],params:[t.tokenId]})}const f="0xd45b28d7",N=[{name:"_tokenId",type:"uint256"},{name:"_conditionId",type:"uint256"}],_=[{components:[{name:"startTimestamp",type:"uint256"},{name:"maxClaimableSupply",type:"uint256"},{name:"supplyClaimed",type:"uint256"},{name:"quantityLimitPerWallet",type:"uint256"},{name:"merkleRoot",type:"bytes32"},{name:"pricePerToken",type:"uint256"},{name:"currency",type:"address"},{name:"metadata",type:"string"}],name:"condition",type:"tuple"}];async function F(t){return a({contract:t.contract,method:[f,N,_],params:[t.tokenId,t.conditionId]})}async function b(t){const i=async()=>{const e=await S(t);return F({...t,conditionId:e})},m=async()=>{const[e,o,r,c,s,u,l,d]=await T({...t,tokenId:t.tokenId});return{currency:l,maxClaimableSupply:o,merkleRoot:s,metadata:d,pricePerToken:u,quantityLimitPerWallet:c,startTimestamp:e,supplyClaimed:r}},n=(await Promise.allSettled([i(),m()])).find(e=>e.status==="fulfilled");if((n==null?void 0:n.status)==="fulfilled")return n.value;throw new Error("Claim condition not found")}export{b as getActiveClaimCondition};

import{a6 as C,a8 as p,b8 as h,b9 as V,ad as c,ba as w,bb as P,bc as _,bd as H,be as $,b4 as b,bf as A,a2 as T}from"./main-DpsjE5QK.js";import{concatHex as F}from"./concat-hex-CkPnTGY7.js";import{p as S}from"./index-DwiDsb1H.js";import"./approve-CbdsTMZF.js";import"./send-eip712-transaction-C8Lr1QfE.js";import"./eth_sendRawTransaction-DPdnXbFR.js";import"./sha256-CDRDPblc.js";import"./number-DhiSQStc.js";const O="0x1626ba7e",U=[{name:"hash",type:"bytes32"},{name:"signature",type:"bytes"}],L=[{type:"bytes4"}];async function B(t){return C({contract:t.contract,method:[O,U,L],params:[t.hash,t.signature]})}const N="0x6492649264926492649264926492649264926492649264926492649264926492";function E({address:t,data:r,signature:e}){return F([p([{type:"address"},{type:"bytes"},{type:"bytes"}],[t,r,e]),N])}const k="0x1626ba7e";async function v({hash:t,signature:r,contract:e}){try{return await B({contract:e,hash:t,signature:r})===k}catch(n){return console.error("Error verifying EIP-1271 signature",n),!1}}const G=`Ethereum Signed Message:
`;function R(t,r){const e=typeof t=="string"?h(t):t.raw instanceof Uint8Array?t.raw:V(t.raw),n=h(`${G}${e.length}`);return c(w(n,e),r)}function j(t){const{domain:r={},message:e,primaryType:n}=t,a={EIP712Domain:P(r),...t.types};_({domain:r,message:e,primaryType:n,types:a});const s=["0x1901"];if(r&&s.push(H({domain:r,types:a})),n!=="EIP712Domain"){const i=(()=>{const o=x({data:e,primaryType:n,types:a});return c(o)})();s.push(i)}return c(w(...s.map(i=>$(i))))}function x({data:t,primaryType:r,types:e}){const n=[{type:"bytes32"}],a=[z({primaryType:r,types:e})];if(!e[r])throw new Error("Invalid types");for(const s of e[r]){const[i,o]=M({name:s.name,type:s.type,types:e,value:t[s.name]});n.push(i),a.push(o)}return p(n,a)}function z({primaryType:t,types:r}){const e=b(q({primaryType:t,types:r}));return c(e)}function q({primaryType:t,types:r}){let e="";const n=D({primaryType:t,types:r});n.delete(t);const a=[t,...Array.from(n).sort()];for(const s of a){if(!r[s])throw new Error("Invalid types");e+=`${s}(${r[s].map(({name:i,type:o})=>`${o} ${i}`).join(",")})`}return e}function D({primaryType:t,types:r},e=new Set){const n=t.match(/^\w*/u),a=n==null?void 0:n[0];if(e.has(a)||r[a]===void 0)return e;e.add(a);for(const s of r[a])D({primaryType:s.type,types:r},e);return e}function M({types:t,name:r,type:e,value:n}){if(t[e]!==void 0)return[{type:"bytes32"},c(x({data:n,primaryType:e,types:t}))];if(e==="bytes")return n=`0x${(n.length%2?"0":"")+n.slice(2)}`,[{type:"bytes32"},c(n)];if(e==="string")return[{type:"bytes32"},c(b(n))];if(e.lastIndexOf("]")===e.length-1){const a=e.slice(0,e.lastIndexOf("[")),s=n.map(i=>M({name:r,type:a,types:t,value:i}));return[{type:"bytes32"},c(p(s.map(([i])=>i),s.map(([,i])=>i)))]}return[{type:e},n]}async function ne({accountContract:t,factoryContract:r,options:e,message:n}){var f,u;const a=R(n);let s;const i=p([{type:"bytes32"}],[a]);if(s=await e.personalAccount.signTypedData({domain:{chainId:e.chain.id,name:"Account",verifyingContract:t.address,version:"1"},message:{message:i},primaryType:"AccountMessage",types:{AccountMessage:[{name:"message",type:"bytes"}]}}),await A(t)){if(await v({contract:t,hash:a,signature:s}))return s;throw new Error("Failed to verify signature")}else{const d=S({accountSalt:(f=e.overrides)==null?void 0:f.accountSalt,adminAddress:e.personalAccount.address,createAccountOverride:(u=e.overrides)==null?void 0:u.createAccount,factoryContract:r});if(!d)throw new Error("Create account override not provided");const y=await T(d);return E({address:r.address,data:y,signature:s})}}async function re({accountContract:t,factoryContract:r,options:e,typedData:n}){var u,d,y,g,l;if(((d=(u=n.domain)==null?void 0:u.verifyingContract)==null?void 0:d.toLowerCase())===((y=t.address)==null?void 0:y.toLowerCase()))return e.personalAccount.signTypedData(n);const s=j(n);let i;const o=p([{type:"bytes32"}],[s]);if(i=await e.personalAccount.signTypedData({domain:{chainId:e.chain.id,name:"Account",verifyingContract:t.address,version:"1"},message:{message:o},primaryType:"AccountMessage",types:{AccountMessage:[{name:"message",type:"bytes"}]}}),await A(t)){if(await v({contract:t,hash:s,signature:i}))return i;throw new Error("Failed to verify signature")}else{const m=S({accountSalt:(g=e.overrides)==null?void 0:g.accountSalt,adminAddress:e.personalAccount.address,createAccountOverride:(l=e.overrides)==null?void 0:l.createAccount,factoryContract:r});if(!m)throw new Error("Create account override not provided");const I=await T(m);return E({address:r.address,data:I,signature:i})}}export{ne as smartAccountSignMessage,re as smartAccountSignTypedData};

import{l as u,W as y,z as A,h as w,aL as g,aM as f,aN as P}from"./main-C3cAwJ4P.js";import{e as k}from"./to-serializable-transaction-D1kWDxIa.js";function x(n){return Object.fromEntries(Object.entries(n).map(([t,e])=>[t,{balance:e.balance?u(e.balance):void 0,code:e.code,nonce:e.nonce?u(e.nonce):void 0,state:e.state,stateDiff:e.stateDiff}]))}async function O(n,t){const{blockNumber:e,blockTag:r,...s}=t,c=(e?u(e):void 0)||r||"latest";return await n({method:"eth_call",params:t.stateOverrides?[s,c,x(t.stateOverrides)]:[s,c]})}async function C(n){const{contract:t,method:e,params:r}=n,s=async()=>{var l,b;if(Array.isArray(e))return e;if(g(e))return f(e);if(typeof e=="function")return f(await e(t));if(typeof e=="string"&&e.startsWith("function ")){const o=P(e);if(o.type==="function")return f(o);throw new Error('"method" passed is not of type "function"')}if(t.abi&&((l=t.abi)==null?void 0:l.length)>0){const o=(b=t.abi)==null?void 0:b.find(m=>m.type==="function"&&m.name===e);if(o)return f(o)}throw new Error(`Could not resolve method "${e}".`)},[a,c]=await Promise.all([s(),typeof r=="function"?r():r]);let d;a[1].length===0?d=a[0]:d=a[0]+y(a[1],c).slice(2);const h=A({chain:t.chain,client:t.client}),p=await O(h,{data:d,from:n.from?w(n.from):void 0,to:t.address}),i=k(a[2],p);return Array.isArray(i)&&i.length===1?i[0]:i}export{C as readContract};

const __vite__mapDeps=(i,m=__vite__mapDeps,d=(m.f||(m.f=["assets/web-node-DuPamAtI.js","assets/main-B5TA8a_y.js"])))=>i.map(i=>d[i]);
import{a as j,_ as A,l as _}from"./main-B5TA8a_y.js";import{i as s,a as N}from"./uint8-array-AbHFXgyX.js";function E(e){return typeof e=="object"&&e!==null}function S(e,t=[]){return E(e)&&t.every(r=>r in e)}function m(e){return globalThis.File&&e instanceof File}function u(e){return!e||!S(e,["data","name"])?!1:!!(typeof e.name=="string"&&(typeof e.data=="string"||s(e.data)))}function d(e,t){if(m(e)&&m(t)){if(e.name===t.name&&e.lastModified===t.lastModified&&e.size===t.size)return!0}else{if(s(e)&&s(t))return N(e,t);if(u(e)&&u(t)&&e.name===t.name){if(typeof e.data=="string"&&typeof t.data=="string")return e.data===t.data;if(s(e.data)&&s(t.data))return N(e.data,t.data)}}return!1}function $(e,t,r){const l=new Map,c=[];for(let n=0;n<t.length;n++){const i=t[n];let f="",a=i;if(m(i))if(r!=null&&r.rewriteFileNames){let g="";if(i.name){const F=i.name.lastIndexOf(".");F>-1&&(g=i.name.substring(F))}f=`${n+r.rewriteFileNames.fileStartNumber}${g}`}else f=`${i.name}`;else u(i)?(a=i.data,r!=null&&r.rewriteFileNames?f=`${n+r.rewriteFileNames.fileStartNumber}`:f=`${i.name}`):r!=null&&r.rewriteFileNames?f=`${n+r.rewriteFileNames.fileStartNumber}`:f=`${n}`;const O=r!=null&&r.uploadWithoutDirectory?"files":`files/${f}`;if(l.has(f)){if(d(l.get(f),i)){c.push(f);continue}throw new Error(`[DUPLICATE_FILE_NAME_ERROR] File name ${f} was passed for more than one different file.`)}l.set(f,i),c.push(f),e.append("file",new Blob([a]),O)}const h={keyvalues:{...r==null?void 0:r.metadata},name:"Storage SDK"};return e.append("pinataMetadata",JSON.stringify(h)),r!=null&&r.uploadWithoutDirectory&&e.append("pinataOptions",JSON.stringify({wrapWithDirectory:!1})),{fileNames:c.map(n=>encodeURIComponent(n)),form:e}}function y(e){return m(e)||s(e)||u(e)}function b(e,t=[]){if(y(e))return t.push(e),t;if(typeof e=="object"){if(!e)return t;if(Array.isArray(e))for(const r of e)b(r,t);else Object.keys(e).map(r=>b(e[r],t))}return t}function o(e,t){if(y(e)){if(t.length)return t.shift();console.warn("Not enough URIs to replace all files in object.")}return typeof e=="object"?e&&(Array.isArray(e)?e.map(r=>o(r,t)):Object.fromEntries(Object.entries(e).map(([r,l])=>[r,o(l,t)]))):e}function D(e){return e.includes("/ipfs/")?`ipfs://${e.split("/ipfs/")[1]}`:e}function w(e){return typeof e=="string"?D(e):typeof e=="object"?!e||y(e)?e:Array.isArray(e)?e.map(t=>w(t)):Object.fromEntries(Object.entries(e).map(([t,r])=>[t,w(r)])):e}async function U(e){if(e.files.length===0)return null;const t=e.files.map(i=>y(i)||typeof i=="string").every(i=>!!i);let r;if(t)r=e.files;else{let i=e.files;i=w(i);const f=b(i);if(f.length){const a=await U({...e,files:f});i=o(i,Array.isArray(a)?a:[a])}r=i.map(a=>typeof a=="string"?a:j(a))}const l=new FormData,{fileNames:c,form:h}=$(l,r,e),n=_();if(n==="browser"||n==="node"){const{uploadBatch:i}=await A(async()=>{const{uploadBatch:a}=await import("./web-node-DuPamAtI.js");return{uploadBatch:a}},__vite__mapDeps([0,1])),f=await i(e.client,h,c,e);return e.files.length===1?f[0]:f}throw new Error("Please, use the uploadMobile function in mobile environments.")}export{U as upload};

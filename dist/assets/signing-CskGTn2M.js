import{W as u,b0 as h,b1 as V,V as c,b2 as w,b3 as C,b4 as P,b5 as _,b6 as H,A,J as b,Q as T}from"./main-C3cAwJ4P.js";import{concatHex as $}from"./concat-hex-BXzZOBzH.js";import{readContract as F}from"./read-contract-EJw7wARq.js";import{p as S}from"./index-7N5QjdwW.js";import"./to-serializable-transaction-D1kWDxIa.js";import"./addresses-Cbjra2SQ.js";import"./send-eip712-transaction-DFw9ifj4.js";import"./eth_sendRawTransaction-DPdnXbFR.js";import"./random-BbuTDDLX.js";import"./send-transaction-C2scQNVZ.js";import"./bundler-CcodSeAe.js";const O="0x1626ba7e",U=[{name:"hash",type:"bytes32"},{name:"signature",type:"bytes"}],L=[{type:"bytes4"}];async function B(t){return F({contract:t.contract,method:[O,U,L],params:[t.hash,t.signature]})}const N="0x6492649264926492649264926492649264926492649264926492649264926492";function E({address:t,data:n,signature:e}){return $([u([{type:"address"},{type:"bytes"},{type:"bytes"}],[t,n,e]),N])}const k="0x1626ba7e";async function v({hash:t,signature:n,contract:e}){try{return await B({contract:e,hash:t,signature:n})===k}catch(r){return console.error("Error verifying EIP-1271 signature",r),!1}}const G=`Ethereum Signed Message:
`;function R(t,n){const e=typeof t=="string"?h(t):t.raw instanceof Uint8Array?t.raw:V(t.raw),r=h(`${G}${e.length}`);return c(w(r,e),n)}function j(t){const{domain:n={},message:e,primaryType:r}=t,a={EIP712Domain:C(n),...t.types};P({domain:n,message:e,primaryType:r,types:a});const s=["0x1901"];if(n&&s.push(_({domain:n,types:a})),r!=="EIP712Domain"){const i=(()=>{const o=x({data:e,primaryType:r,types:a});return c(o)})();s.push(i)}return c(w(...s.map(i=>H(i))))}function x({data:t,primaryType:n,types:e}){const r=[{type:"bytes32"}],a=[z({primaryType:n,types:e})];if(!e[n])throw new Error("Invalid types");for(const s of e[n]){const[i,o]=M({name:s.name,type:s.type,types:e,value:t[s.name]});r.push(i),a.push(o)}return u(r,a)}function z({primaryType:t,types:n}){const e=A(J({primaryType:t,types:n}));return c(e)}function J({primaryType:t,types:n}){let e="";const r=D({primaryType:t,types:n});r.delete(t);const a=[t,...Array.from(r).sort()];for(const s of a){if(!n[s])throw new Error("Invalid types");e+=`${s}(${n[s].map(({name:i,type:o})=>`${o} ${i}`).join(",")})`}return e}function D({primaryType:t,types:n},e=new Set){const r=t.match(/^\w*/u),a=r==null?void 0:r[0];if(e.has(a)||n[a]===void 0)return e;e.add(a);for(const s of n[a])D({primaryType:s.type,types:n},e);return e}function M({types:t,name:n,type:e,value:r}){if(t[e]!==void 0)return[{type:"bytes32"},c(x({data:r,primaryType:e,types:t}))];if(e==="bytes")return r=`0x${(r.length%2?"0":"")+r.slice(2)}`,[{type:"bytes32"},c(r)];if(e==="string")return[{type:"bytes32"},c(A(r))];if(e.lastIndexOf("]")===e.length-1){const a=e.slice(0,e.lastIndexOf("[")),s=r.map(i=>M({name:n,type:a,types:t,value:i}));return[{type:"bytes32"},c(u(s.map(([i])=>i),s.map(([,i])=>i)))]}return[{type:e},r]}async function ae({accountContract:t,factoryContract:n,options:e,message:r}){var f,p;const a=R(r);let s;const i=u([{type:"bytes32"}],[a]);if(s=await e.personalAccount.signTypedData({domain:{chainId:e.chain.id,name:"Account",verifyingContract:t.address,version:"1"},message:{message:i},primaryType:"AccountMessage",types:{AccountMessage:[{name:"message",type:"bytes"}]}}),await b(t)){if(await v({contract:t,hash:a,signature:s}))return s;throw new Error("Failed to verify signature")}else{const d=S({accountSalt:(f=e.overrides)==null?void 0:f.accountSalt,adminAddress:e.personalAccount.address,createAccountOverride:(p=e.overrides)==null?void 0:p.createAccount,factoryContract:n});if(!d)throw new Error("Create account override not provided");const y=await T(d);return E({address:n.address,data:y,signature:s})}}async function ie({accountContract:t,factoryContract:n,options:e,typedData:r}){var p,d,y,g,l;if(((d=(p=r.domain)==null?void 0:p.verifyingContract)==null?void 0:d.toLowerCase())===((y=t.address)==null?void 0:y.toLowerCase()))return e.personalAccount.signTypedData(r);const s=j(r);let i;const o=u([{type:"bytes32"}],[s]);if(i=await e.personalAccount.signTypedData({domain:{chainId:e.chain.id,name:"Account",verifyingContract:t.address,version:"1"},message:{message:o},primaryType:"AccountMessage",types:{AccountMessage:[{name:"message",type:"bytes"}]}}),await b(t)){if(await v({contract:t,hash:s,signature:i}))return i;throw new Error("Failed to verify signature")}else{const m=S({accountSalt:(g=e.overrides)==null?void 0:g.accountSalt,adminAddress:e.personalAccount.address,createAccountOverride:(l=e.overrides)==null?void 0:l.createAccount,factoryContract:n});if(!m)throw new Error("Create account override not provided");const I=await T(m);return E({address:n.address,data:I,signature:i})}}export{ae as smartAccountSignMessage,ie as smartAccountSignTypedData};
